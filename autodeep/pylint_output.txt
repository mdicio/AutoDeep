************* Module autodeep.outputhandler.outputwriter
outputhandler/outputwriter.py:1:0: C0114: Missing module docstring (missing-module-docstring)
outputhandler/outputwriter.py:5:0: C0115: Missing class docstring (missing-class-docstring)
outputhandler/outputwriter.py:36:17: W1514: Using open without explicitly specifying an encoding (unspecified-encoding)
outputhandler/outputwriter.py:50:13: W1514: Using open without explicitly specifying an encoding (unspecified-encoding)
outputhandler/outputwriter.py:5:0: R0903: Too few public methods (1/2) (too-few-public-methods)
************* Module autodeep.outputhandler.resultanalyzer
outputhandler/resultanalyzer.py:1:0: C0114: Missing module docstring (missing-module-docstring)
outputhandler/resultanalyzer.py:7:0: C0115: Missing class docstring (missing-class-docstring)
************* Module autodeep.factory
factory.py:1:0: C0114: Missing module docstring (missing-module-docstring)
factory.py:69:4: R1705: Unnecessary "elif" after "return", remove the leading "el" from "elif" (no-else-return)
factory.py:53:0: R0911: Too many return statements (13/6) (too-many-return-statements)
factory.py:53:0: R0912: Too many branches (14/12) (too-many-branches)
factory.py:99:0: R0913: Too many arguments (15/5) (too-many-arguments)
factory.py:99:0: R0917: Too many positional arguments (15/5) (too-many-positional-arguments)
factory.py:186:4: R1705: Unnecessary "elif" after "return", remove the leading "el" from "elif" (no-else-return)
factory.py:173:0: R0911: Too many return statements (10/6) (too-many-return-statements)
************* Module autodeep.modelutils.igtdutilities
modelutils/igtdutilities.py:1:0: C0114: Missing module docstring (missing-module-docstring)
modelutils/igtdutilities.py:135:12: E1136: Value 'coordinate' is unsubscriptable (unsubscriptable-object)
modelutils/igtdutilities.py:135:30: E1136: Value 'coordinate' is unsubscriptable (unsubscriptable-object)
modelutils/igtdutilities.py:138:0: C0103: Function name "IGTD_absolute_error" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtdutilities.py:138:0: R0913: Too many arguments (10/5) (too-many-arguments)
modelutils/igtdutilities.py:138:0: R0917: Too many positional arguments (10/5) (too-many-positional-arguments)
modelutils/igtdutilities.py:138:0: R0914: Too many local variables (38/15) (too-many-locals)
modelutils/igtdutilities.py:228:8: W0622: Redefining built-in 'id' (redefined-builtin)
modelutils/igtdutilities.py:177:4: E1101: Module 'numpy.random' has no 'RandomState' member (no-member)
modelutils/igtdutilities.py:138:0: R0912: Too many branches (21/12) (too-many-branches)
modelutils/igtdutilities.py:138:0: R0915: Too many statements (88/50) (too-many-statements)
modelutils/igtdutilities.py:339:0: C0103: Function name "IGTD_square_error" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtdutilities.py:339:0: R0913: Too many arguments (10/5) (too-many-arguments)
modelutils/igtdutilities.py:339:0: R0917: Too many positional arguments (10/5) (too-many-positional-arguments)
modelutils/igtdutilities.py:339:0: R0914: Too many local variables (38/15) (too-many-locals)
modelutils/igtdutilities.py:429:8: W0622: Redefining built-in 'id' (redefined-builtin)
modelutils/igtdutilities.py:378:4: E1101: Module 'numpy.random' has no 'RandomState' member (no-member)
modelutils/igtdutilities.py:339:0: R0912: Too many branches (21/12) (too-many-branches)
modelutils/igtdutilities.py:339:0: R0915: Too many statements (88/50) (too-many-statements)
modelutils/igtdutilities.py:540:0: C0103: Function name "IGTD" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtdutilities.py:540:0: R0913: Too many arguments (10/5) (too-many-arguments)
modelutils/igtdutilities.py:540:0: R0917: Too many positional arguments (10/5) (too-many-positional-arguments)
modelutils/igtdutilities.py:603:11: E0606: Possibly using variable 'index_record' before assignment (possibly-used-before-assignment)
modelutils/igtdutilities.py:603:25: E0606: Possibly using variable 'err_record' before assignment (possibly-used-before-assignment)
modelutils/igtdutilities.py:603:37: E0606: Possibly using variable 'run_time' before assignment (possibly-used-before-assignment)
modelutils/igtdutilities.py:606:0: W0102: Dangerous default value [] as argument (dangerous-default-value)
modelutils/igtdutilities.py:606:0: R0913: Too many arguments (10/5) (too-many-arguments)
modelutils/igtdutilities.py:606:0: R0917: Too many positional arguments (10/5) (too-many-positional-arguments)
modelutils/igtdutilities.py:606:0: R0914: Too many local variables (19/15) (too-many-locals)
modelutils/igtdutilities.py:616:4: W0613: Unused argument 'exclude_cols' (unused-argument)
modelutils/igtdutilities.py:704:4: C0103: Argument name "normDir" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtdutilities.py:696:0: W0102: Dangerous default value [] as argument (dangerous-default-value)
modelutils/igtdutilities.py:696:0: R0913: Too many arguments (14/5) (too-many-arguments)
modelutils/igtdutilities.py:696:0: R0917: Too many positional arguments (14/5) (too-many-positional-arguments)
modelutils/igtdutilities.py:696:0: R0914: Too many local variables (28/15) (too-many-locals)
modelutils/igtdutilities.py:774:16: W0621: Redefining name 'time' from outer scope (line 4) (redefined-outer-name)
modelutils/igtdutilities.py:830:17: R1732: Consider using 'with' for resource-allocating operations (consider-using-with)
modelutils/igtdutilities.py:835:17: R1732: Consider using 'with' for resource-allocating operations (consider-using-with)
modelutils/igtdutilities.py:752:21: W0612: Unused variable 'corr' (unused-variable)
************* Module autodeep.modelutils.igtd_models
modelutils/igtd_models.py:1:0: C0114: Missing module docstring (missing-module-docstring)
modelutils/igtd_models.py:6:0: E0401: Unable to import 'keras' (import-error)
modelutils/igtd_models.py:9:0: E0401: Unable to import 'keras' (import-error)
modelutils/igtd_models.py:10:0: E0401: Unable to import 'keras.callbacks' (import-error)
modelutils/igtd_models.py:11:0: E0401: Unable to import 'keras.layers' (import-error)
modelutils/igtd_models.py:23:0: E0401: Unable to import 'keras.models' (import-error)
modelutils/igtd_models.py:35:0: C0103: Function name "ID_mapping" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:48:4: C0200: Consider using enumerate instead of iterating with range and len (consider-using-enumerate)
modelutils/igtd_models.py:71:4: W0622: Redefining built-in 'id' (redefined-builtin)
modelutils/igtd_models.py:72:4: C0200: Consider using enumerate instead of iterating with range and len (consider-using-enumerate)
modelutils/igtd_models.py:93:4: C0200: Consider using enumerate instead of iterating with range and len (consider-using-enumerate)
modelutils/igtd_models.py:113:50: C0103: Argument name "sampleID" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:113:0: R0914: Too many local variables (16/15) (too-many-locals)
modelutils/igtd_models.py:129:4: C0103: Variable name "trainData" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:130:4: C0103: Variable name "valData" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:131:4: C0103: Variable name "testData" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:144:4: C0103: Variable name "trainLabel" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:145:4: C0103: Variable name "valLabel" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:146:4: C0103: Variable name "testLabel" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:187:28: W0123: Use of eval (eval-used)
modelutils/igtd_models.py:191:0: C0103: Function name "get_DNN_optimizer" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:222:37: C0103: Argument name "paraDNN" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:254:0: C0115: Missing class docstring (missing-class-docstring)
modelutils/igtd_models.py:254:0: C0103: Class name "CNN2D_Regressor" doesn't conform to PascalCase naming style (invalid-name)
modelutils/igtd_models.py:256:4: R0914: Too many local variables (22/15) (too-many-locals)
modelutils/igtd_models.py:280:8: W0622: Redefining built-in 'input' (redefined-builtin)
modelutils/igtd_models.py:281:8: C0103: Variable name "input2List" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:256:4: R0912: Too many branches (18/12) (too-many-branches)
modelutils/igtd_models.py:256:4: R0915: Too many statements (51/50) (too-many-statements)
modelutils/igtd_models.py:254:0: R0903: Too few public methods (0/2) (too-few-public-methods)
modelutils/igtd_models.py:403:0: C0115: Missing class docstring (missing-class-docstring)
modelutils/igtd_models.py:403:0: C0103: Class name "CNN2D_Classifier" doesn't conform to PascalCase naming style (invalid-name)
modelutils/igtd_models.py:405:4: R0914: Too many local variables (23/15) (too-many-locals)
modelutils/igtd_models.py:432:8: W0622: Redefining built-in 'input' (redefined-builtin)
modelutils/igtd_models.py:433:8: C0103: Variable name "input2List" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:405:4: R0912: Too many branches (18/12) (too-many-branches)
modelutils/igtd_models.py:405:4: R0915: Too many statements (52/50) (too-many-statements)
modelutils/igtd_models.py:403:0: R0903: Too few public methods (0/2) (too-few-public-methods)
modelutils/igtd_models.py:556:0: C0103: Function name "CNN2D_Regression_Analysis" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:556:37: C0103: Argument name "resultFolder" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:556:0: R0914: Too many local variables (36/15) (too-many-locals)
modelutils/igtd_models.py:577:4: C0103: Variable name "trainData" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:578:4: C0103: Variable name "trainLabel" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:579:4: C0103: Variable name "trainSample" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:585:8: C0103: Variable name "valData" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:586:8: C0103: Variable name "valLabel" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:587:8: C0103: Variable name "valSample" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:589:8: C0103: Variable name "valData" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:590:8: C0103: Variable name "valLabel" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:591:8: C0103: Variable name "valSample" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:593:8: C0103: Variable name "testData" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:594:8: C0103: Variable name "testSample" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:596:12: C0103: Variable name "testLabel" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:598:12: C0103: Variable name "testLabel" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:600:8: C0103: Variable name "testData" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:601:8: C0103: Variable name "testLabel" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:602:8: C0103: Variable name "testSample" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:605:8: C0200: Consider using enumerate instead of iterating with range and len (consider-using-enumerate)
modelutils/igtd_models.py:609:4: C0103: Variable name "perM" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:618:8: C0103: Variable name "dpID" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:674:8: C0103: Variable name "numEpoch" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:678:12: C0103: Variable name "numEpoch" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:683:8: W0632: Possible unbalanced tuple unpacking with sequence defined at line 2 of : left side has 2 labels, right side has 1 value (unbalanced-tuple-unpacking)
modelutils/igtd_models.py:683:8: C0103: Variable name "dpID" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:683:14: C0103: Variable name "epID" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:687:8: W0632: Possible unbalanced tuple unpacking with sequence defined at line 2 of : left side has 2 labels, right side has 1 value (unbalanced-tuple-unpacking)
modelutils/igtd_models.py:687:8: C0103: Variable name "dpID" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:687:14: C0103: Variable name "epID" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:698:4: C0103: Variable name "predResult" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:719:11: W0123: Use of eval (eval-used)
modelutils/igtd_models.py:719:39: W0123: Use of eval (eval-used)
modelutils/igtd_models.py:721:37: W0123: Use of eval (eval-used)
modelutils/igtd_models.py:723:12: W0123: Use of eval (eval-used)
modelutils/igtd_models.py:726:12: W0123: Use of eval (eval-used)
modelutils/igtd_models.py:728:35: W0123: Use of eval (eval-used)
modelutils/igtd_models.py:731:36: W0123: Use of eval (eval-used)
modelutils/igtd_models.py:556:0: R0912: Too many branches (27/12) (too-many-branches)
modelutils/igtd_models.py:556:0: R0915: Too many statements (93/50) (too-many-statements)
modelutils/igtd_models.py:596:12: W0612: Unused variable 'testLabel' (unused-variable)
modelutils/igtd_models.py:743:0: C0103: Function name "CNN2D_Classification_Analysis" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:744:22: C0103: Argument name "resultFolder" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:743:0: R0913: Too many arguments (7/5) (too-many-arguments)
modelutils/igtd_models.py:743:0: R0917: Too many positional arguments (7/5) (too-many-positional-arguments)
modelutils/igtd_models.py:743:0: R0914: Too many local variables (37/15) (too-many-locals)
modelutils/igtd_models.py:770:4: C0103: Variable name "trainData" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:771:4: C0103: Variable name "trainLabel" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:772:4: C0103: Variable name "trainSample" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:778:8: C0103: Variable name "valData" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:779:8: C0103: Variable name "valLabel" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:780:8: C0103: Variable name "valSample" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:782:8: C0103: Variable name "valData" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:783:8: C0103: Variable name "valLabel" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:784:8: C0103: Variable name "valSample" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:786:8: C0103: Variable name "testData" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:787:8: C0103: Variable name "testSample" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:789:12: C0103: Variable name "testLabel" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:791:12: C0103: Variable name "testLabel" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:793:8: C0103: Variable name "testData" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:794:8: C0103: Variable name "testLabel" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:795:8: C0103: Variable name "testSample" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:798:8: C0200: Consider using enumerate instead of iterating with range and len (consider-using-enumerate)
modelutils/igtd_models.py:802:4: C0103: Variable name "perM" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:816:8: C0103: Variable name "dpID" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:874:8: C0103: Variable name "numEpoch" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:878:12: C0103: Variable name "numEpoch" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:883:8: W0632: Possible unbalanced tuple unpacking with sequence defined at line 2 of : left side has 2 labels, right side has 1 value (unbalanced-tuple-unpacking)
modelutils/igtd_models.py:883:8: C0103: Variable name "dpID" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:883:14: C0103: Variable name "epID" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:887:8: W0632: Possible unbalanced tuple unpacking with sequence defined at line 2 of : left side has 2 labels, right side has 1 value (unbalanced-tuple-unpacking)
modelutils/igtd_models.py:887:8: C0103: Variable name "dpID" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:887:14: C0103: Variable name "epID" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:898:4: C0103: Variable name "predResult" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:941:11: W0123: Use of eval (eval-used)
modelutils/igtd_models.py:941:39: W0123: Use of eval (eval-used)
modelutils/igtd_models.py:944:12: W0123: Use of eval (eval-used)
modelutils/igtd_models.py:948:16: W0123: Use of eval (eval-used)
modelutils/igtd_models.py:952:43: W0123: Use of eval (eval-used)
modelutils/igtd_models.py:958:12: W0123: Use of eval (eval-used)
modelutils/igtd_models.py:743:0: R0912: Too many branches (31/12) (too-many-branches)
modelutils/igtd_models.py:743:0: R0915: Too many statements (100/50) (too-many-statements)
modelutils/igtd_models.py:789:12: W0612: Unused variable 'testLabel' (unused-variable)
modelutils/igtd_models.py:4:0: W0611: Unused Dict imported from typing (unused-import)
************* Module autodeep.modelutils.trainingutilities
modelutils/trainingutilities.py:66:0: C0301: Line too long (123/100) (line-too-long)
modelutils/trainingutilities.py:81:0: C0301: Line too long (123/100) (line-too-long)
modelutils/trainingutilities.py:1:0: C0114: Missing module docstring (missing-module-docstring)
modelutils/trainingutilities.py:30:28: C0103: Argument name "X_train" doesn't conform to snake_case naming style (invalid-name)
modelutils/trainingutilities.py:30:46: C0103: Argument name "X_val" doesn't conform to snake_case naming style (invalid-name)
modelutils/trainingutilities.py:55:12: C0103: Variable name "X_moved" doesn't conform to snake_case naming style (invalid-name)
modelutils/trainingutilities.py:70:12: C0103: Variable name "X_moved" doesn't conform to snake_case naming style (invalid-name)
modelutils/trainingutilities.py:88:0: C0103: Function name "stop_on_perfect_lossCondition" doesn't conform to snake_case naming style (invalid-name)
modelutils/trainingutilities.py:170:8: R1705: Unnecessary "elif" after "return", remove the leading "el" from "elif" (no-else-return)
modelutils/trainingutilities.py:207:8: R1705: Unnecessary "elif" after "return", remove the leading "el" from "elif" (no-else-return)
modelutils/trainingutilities.py:244:27: R1718: Consider using a set comprehension (consider-using-set-comprehension)
modelutils/trainingutilities.py:293:4: R1702: Too many nested blocks (6/5) (too-many-nested-blocks)
modelutils/trainingutilities.py:274:0: R0912: Too many branches (17/12) (too-many-branches)
modelutils/trainingutilities.py:425:4: R1702: Too many nested blocks (6/5) (too-many-nested-blocks)
modelutils/trainingutilities.py:413:0: R0912: Too many branches (23/12) (too-many-branches)
modelutils/trainingutilities.py:413:0: R0915: Too many statements (52/50) (too-many-statements)
modelutils/trainingutilities.py:520:4: R1702: Too many nested blocks (6/5) (too-many-nested-blocks)
modelutils/trainingutilities.py:508:0: R0912: Too many branches (23/12) (too-many-branches)
************* Module automl
myexamples/automl.py:1:0: C0114: Missing module docstring (missing-module-docstring)
************* Module igtd_notebooks.preprocess_tabs_housing
myexamples/igtd_notebooks/preprocess_tabs_housing.py:31:0: C0301: Line too long (105/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_housing.py:53:0: C0301: Line too long (105/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_housing.py:1:0: C0114: Missing module docstring (missing-module-docstring)
myexamples/igtd_notebooks/preprocess_tabs_housing.py:6:0: E0401: Unable to import 'dataloaders.dataloader' (import-error)
myexamples/igtd_notebooks/preprocess_tabs_housing.py:6:0: W0401: Wildcard import dataloaders.dataloader (wildcard-import)
myexamples/igtd_notebooks/preprocess_tabs_housing.py:7:0: E0401: Unable to import 'Scripts.IGTD_Functions' (import-error)
myexamples/igtd_notebooks/preprocess_tabs_housing.py:13:0: C0103: Constant name "dataset_name" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_housing.py:14:14: E1123: Unexpected keyword argument 'normalize_features' in function call (unexpected-keyword-arg)
myexamples/igtd_notebooks/preprocess_tabs_housing.py:14:14: E1123: Unexpected keyword argument 'encode_categorical' in function call (unexpected-keyword-arg)
myexamples/igtd_notebooks/preprocess_tabs_housing.py:14:14: E1123: Unexpected keyword argument 'return_extra_info' in function call (unexpected-keyword-arg)
myexamples/igtd_notebooks/preprocess_tabs_housing.py:14:14: E1123: Unexpected keyword argument 'random_state' in function call (unexpected-keyword-arg)
myexamples/igtd_notebooks/preprocess_tabs_housing.py:24:0: C0103: Constant name "num_row" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_housing.py:25:0: C0103: Constant name "num_col" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_housing.py:26:0: C0103: Constant name "num" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_housing.py:27:0: C0103: Constant name "save_image_size" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_housing.py:28:0: C0103: Constant name "fea_dist_method" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_housing.py:29:0: C0103: Constant name "image_dist_method" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_housing.py:30:0: C0103: Constant name "error" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_housing.py:31:0: C0103: Constant name "result_dir" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_housing.py:32:0: C0103: Constant name "max_step" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_housing.py:33:0: C0103: Constant name "val_step" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_housing.py:34:0: C0103: Constant name "min_gain" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_housing.py:50:0: C0103: Constant name "fea_dist_method" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_housing.py:51:0: C0103: Constant name "image_dist_method" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_housing.py:52:0: C0103: Constant name "error" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_housing.py:53:0: C0103: Constant name "result_dir" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_housing.py:7:0: C0411: third party import "Scripts.IGTD_Functions.drop_numerical_outliers" should be placed before first party imports "autodeep.factory.create_data_loader", "dataloaders.dataloader.*"  (wrong-import-order)
myexamples/igtd_notebooks/preprocess_tabs_housing.py:2:0: W0611: Unused Dict imported from typing (unused-import)
myexamples/igtd_notebooks/preprocess_tabs_housing.py:3:0: W0611: Unused numpy imported as np (unused-import)
myexamples/igtd_notebooks/preprocess_tabs_housing.py:4:0: W0611: Unused pandas imported as pd (unused-import)
myexamples/igtd_notebooks/preprocess_tabs_housing.py:7:0: W0611: Unused drop_numerical_outliers imported from Scripts.IGTD_Functions (unused-import)
myexamples/igtd_notebooks/preprocess_tabs_housing.py:7:0: W0611: Unused min_max_transform imported from Scripts.IGTD_Functions (unused-import)
************* Module igtd_notebooks.preprocess_tabs_heloc
myexamples/igtd_notebooks/preprocess_tabs_heloc.py:31:0: C0301: Line too long (105/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_heloc.py:53:0: C0301: Line too long (105/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_heloc.py:1:0: C0114: Missing module docstring (missing-module-docstring)
myexamples/igtd_notebooks/preprocess_tabs_heloc.py:6:0: E0401: Unable to import 'dataloaders.dataloader' (import-error)
myexamples/igtd_notebooks/preprocess_tabs_heloc.py:6:0: W0401: Wildcard import dataloaders.dataloader (wildcard-import)
myexamples/igtd_notebooks/preprocess_tabs_heloc.py:7:0: E0401: Unable to import 'Scripts.IGTD_Functions' (import-error)
myexamples/igtd_notebooks/preprocess_tabs_heloc.py:13:0: C0103: Constant name "dataset_name" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_heloc.py:14:14: E1123: Unexpected keyword argument 'normalize_features' in function call (unexpected-keyword-arg)
myexamples/igtd_notebooks/preprocess_tabs_heloc.py:14:14: E1123: Unexpected keyword argument 'encode_categorical' in function call (unexpected-keyword-arg)
myexamples/igtd_notebooks/preprocess_tabs_heloc.py:14:14: E1123: Unexpected keyword argument 'return_extra_info' in function call (unexpected-keyword-arg)
myexamples/igtd_notebooks/preprocess_tabs_heloc.py:14:14: E1123: Unexpected keyword argument 'random_state' in function call (unexpected-keyword-arg)
myexamples/igtd_notebooks/preprocess_tabs_heloc.py:24:0: C0103: Constant name "num_row" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_heloc.py:25:0: C0103: Constant name "num_col" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_heloc.py:26:0: C0103: Constant name "num" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_heloc.py:27:0: C0103: Constant name "save_image_size" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_heloc.py:28:0: C0103: Constant name "fea_dist_method" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_heloc.py:29:0: C0103: Constant name "image_dist_method" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_heloc.py:30:0: C0103: Constant name "error" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_heloc.py:31:0: C0103: Constant name "result_dir" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_heloc.py:32:0: C0103: Constant name "max_step" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_heloc.py:33:0: C0103: Constant name "val_step" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_heloc.py:34:0: C0103: Constant name "min_gain" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_heloc.py:50:0: C0103: Constant name "fea_dist_method" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_heloc.py:51:0: C0103: Constant name "image_dist_method" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_heloc.py:52:0: C0103: Constant name "error" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_heloc.py:53:0: C0103: Constant name "result_dir" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_heloc.py:7:0: C0411: third party import "Scripts.IGTD_Functions.drop_numerical_outliers" should be placed before first party imports "autodeep.factory.create_data_loader", "dataloaders.dataloader.*"  (wrong-import-order)
myexamples/igtd_notebooks/preprocess_tabs_heloc.py:2:0: W0611: Unused Dict imported from typing (unused-import)
myexamples/igtd_notebooks/preprocess_tabs_heloc.py:3:0: W0611: Unused numpy imported as np (unused-import)
myexamples/igtd_notebooks/preprocess_tabs_heloc.py:4:0: W0611: Unused pandas imported as pd (unused-import)
myexamples/igtd_notebooks/preprocess_tabs_heloc.py:7:0: W0611: Unused drop_numerical_outliers imported from Scripts.IGTD_Functions (unused-import)
myexamples/igtd_notebooks/preprocess_tabs_heloc.py:7:0: W0611: Unused min_max_transform imported from Scripts.IGTD_Functions (unused-import)
************* Module igtd_notebooks.preprocess_tabs_covertype
myexamples/igtd_notebooks/preprocess_tabs_covertype.py:31:0: C0301: Line too long (105/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_covertype.py:53:0: C0301: Line too long (105/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_covertype.py:1:0: C0114: Missing module docstring (missing-module-docstring)
myexamples/igtd_notebooks/preprocess_tabs_covertype.py:6:0: E0401: Unable to import 'dataloaders.dataloader' (import-error)
myexamples/igtd_notebooks/preprocess_tabs_covertype.py:6:0: W0401: Wildcard import dataloaders.dataloader (wildcard-import)
myexamples/igtd_notebooks/preprocess_tabs_covertype.py:7:0: E0401: Unable to import 'Scripts.IGTD_Functions' (import-error)
myexamples/igtd_notebooks/preprocess_tabs_covertype.py:13:0: C0103: Constant name "dataset_name" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_covertype.py:14:14: E1123: Unexpected keyword argument 'normalize_features' in function call (unexpected-keyword-arg)
myexamples/igtd_notebooks/preprocess_tabs_covertype.py:14:14: E1123: Unexpected keyword argument 'encode_categorical' in function call (unexpected-keyword-arg)
myexamples/igtd_notebooks/preprocess_tabs_covertype.py:14:14: E1123: Unexpected keyword argument 'return_extra_info' in function call (unexpected-keyword-arg)
myexamples/igtd_notebooks/preprocess_tabs_covertype.py:14:14: E1123: Unexpected keyword argument 'random_state' in function call (unexpected-keyword-arg)
myexamples/igtd_notebooks/preprocess_tabs_covertype.py:24:0: C0103: Constant name "num_row" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_covertype.py:25:0: C0103: Constant name "num_col" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_covertype.py:26:0: C0103: Constant name "num" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_covertype.py:27:0: C0103: Constant name "save_image_size" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_covertype.py:28:0: C0103: Constant name "fea_dist_method" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_covertype.py:29:0: C0103: Constant name "image_dist_method" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_covertype.py:30:0: C0103: Constant name "error" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_covertype.py:31:0: C0103: Constant name "result_dir" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_covertype.py:32:0: C0103: Constant name "max_step" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_covertype.py:33:0: C0103: Constant name "val_step" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_covertype.py:34:0: C0103: Constant name "min_gain" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_covertype.py:50:0: C0103: Constant name "fea_dist_method" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_covertype.py:51:0: C0103: Constant name "image_dist_method" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_covertype.py:52:0: C0103: Constant name "error" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_covertype.py:53:0: C0103: Constant name "result_dir" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_covertype.py:7:0: C0411: third party import "Scripts.IGTD_Functions.drop_numerical_outliers" should be placed before first party imports "autodeep.factory.create_data_loader", "dataloaders.dataloader.*"  (wrong-import-order)
myexamples/igtd_notebooks/preprocess_tabs_covertype.py:2:0: W0611: Unused Dict imported from typing (unused-import)
myexamples/igtd_notebooks/preprocess_tabs_covertype.py:3:0: W0611: Unused numpy imported as np (unused-import)
myexamples/igtd_notebooks/preprocess_tabs_covertype.py:4:0: W0611: Unused pandas imported as pd (unused-import)
myexamples/igtd_notebooks/preprocess_tabs_covertype.py:7:0: W0611: Unused drop_numerical_outliers imported from Scripts.IGTD_Functions (unused-import)
myexamples/igtd_notebooks/preprocess_tabs_covertype.py:7:0: W0611: Unused min_max_transform imported from Scripts.IGTD_Functions (unused-import)
************* Module igtd_notebooks.preprocess_tabs_ageconditions
myexamples/igtd_notebooks/preprocess_tabs_ageconditions.py:31:0: C0301: Line too long (105/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_ageconditions.py:53:0: C0301: Line too long (105/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_ageconditions.py:1:0: C0114: Missing module docstring (missing-module-docstring)
myexamples/igtd_notebooks/preprocess_tabs_ageconditions.py:6:0: E0401: Unable to import 'dataloaders.dataloader' (import-error)
myexamples/igtd_notebooks/preprocess_tabs_ageconditions.py:6:0: W0401: Wildcard import dataloaders.dataloader (wildcard-import)
myexamples/igtd_notebooks/preprocess_tabs_ageconditions.py:7:0: E0401: Unable to import 'Scripts.IGTD_Functions' (import-error)
myexamples/igtd_notebooks/preprocess_tabs_ageconditions.py:13:0: C0103: Constant name "dataset_name" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_ageconditions.py:14:14: E1123: Unexpected keyword argument 'normalize_features' in function call (unexpected-keyword-arg)
myexamples/igtd_notebooks/preprocess_tabs_ageconditions.py:14:14: E1123: Unexpected keyword argument 'encode_categorical' in function call (unexpected-keyword-arg)
myexamples/igtd_notebooks/preprocess_tabs_ageconditions.py:14:14: E1123: Unexpected keyword argument 'return_extra_info' in function call (unexpected-keyword-arg)
myexamples/igtd_notebooks/preprocess_tabs_ageconditions.py:14:14: E1123: Unexpected keyword argument 'random_state' in function call (unexpected-keyword-arg)
myexamples/igtd_notebooks/preprocess_tabs_ageconditions.py:24:0: C0103: Constant name "num_row" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_ageconditions.py:25:0: C0103: Constant name "num_col" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_ageconditions.py:26:0: C0103: Constant name "num" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_ageconditions.py:27:0: C0103: Constant name "save_image_size" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_ageconditions.py:28:0: C0103: Constant name "fea_dist_method" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_ageconditions.py:29:0: C0103: Constant name "image_dist_method" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_ageconditions.py:30:0: C0103: Constant name "error" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_ageconditions.py:31:0: C0103: Constant name "result_dir" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_ageconditions.py:32:0: C0103: Constant name "max_step" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_ageconditions.py:33:0: C0103: Constant name "val_step" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_ageconditions.py:34:0: C0103: Constant name "min_gain" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_ageconditions.py:50:0: C0103: Constant name "fea_dist_method" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_ageconditions.py:51:0: C0103: Constant name "image_dist_method" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_ageconditions.py:52:0: C0103: Constant name "error" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_ageconditions.py:53:0: C0103: Constant name "result_dir" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_ageconditions.py:7:0: C0411: third party import "Scripts.IGTD_Functions.drop_numerical_outliers" should be placed before first party imports "autodeep.factory.create_data_loader", "dataloaders.dataloader.*"  (wrong-import-order)
myexamples/igtd_notebooks/preprocess_tabs_ageconditions.py:2:0: W0611: Unused Dict imported from typing (unused-import)
myexamples/igtd_notebooks/preprocess_tabs_ageconditions.py:3:0: W0611: Unused numpy imported as np (unused-import)
myexamples/igtd_notebooks/preprocess_tabs_ageconditions.py:4:0: W0611: Unused pandas imported as pd (unused-import)
myexamples/igtd_notebooks/preprocess_tabs_ageconditions.py:7:0: W0611: Unused drop_numerical_outliers imported from Scripts.IGTD_Functions (unused-import)
myexamples/igtd_notebooks/preprocess_tabs_ageconditions.py:7:0: W0611: Unused min_max_transform imported from Scripts.IGTD_Functions (unused-import)
************* Module igtd_notebooks.preprocess_tabs_adult
myexamples/igtd_notebooks/preprocess_tabs_adult.py:31:0: C0301: Line too long (105/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_adult.py:53:0: C0301: Line too long (105/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_adult.py:1:0: C0114: Missing module docstring (missing-module-docstring)
myexamples/igtd_notebooks/preprocess_tabs_adult.py:6:0: E0401: Unable to import 'dataloaders.dataloader' (import-error)
myexamples/igtd_notebooks/preprocess_tabs_adult.py:6:0: W0401: Wildcard import dataloaders.dataloader (wildcard-import)
myexamples/igtd_notebooks/preprocess_tabs_adult.py:7:0: E0401: Unable to import 'Scripts.IGTD_Functions' (import-error)
myexamples/igtd_notebooks/preprocess_tabs_adult.py:13:0: C0103: Constant name "dataset_name" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_adult.py:14:14: E1123: Unexpected keyword argument 'normalize_features' in function call (unexpected-keyword-arg)
myexamples/igtd_notebooks/preprocess_tabs_adult.py:14:14: E1123: Unexpected keyword argument 'encode_categorical' in function call (unexpected-keyword-arg)
myexamples/igtd_notebooks/preprocess_tabs_adult.py:14:14: E1123: Unexpected keyword argument 'return_extra_info' in function call (unexpected-keyword-arg)
myexamples/igtd_notebooks/preprocess_tabs_adult.py:14:14: E1123: Unexpected keyword argument 'random_state' in function call (unexpected-keyword-arg)
myexamples/igtd_notebooks/preprocess_tabs_adult.py:24:0: C0103: Constant name "num_row" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_adult.py:25:0: C0103: Constant name "num_col" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_adult.py:26:0: C0103: Constant name "num" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_adult.py:27:0: C0103: Constant name "save_image_size" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_adult.py:28:0: C0103: Constant name "fea_dist_method" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_adult.py:29:0: C0103: Constant name "image_dist_method" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_adult.py:30:0: C0103: Constant name "error" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_adult.py:31:0: C0103: Constant name "result_dir" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_adult.py:32:0: C0103: Constant name "max_step" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_adult.py:33:0: C0103: Constant name "val_step" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_adult.py:34:0: C0103: Constant name "min_gain" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_adult.py:50:0: C0103: Constant name "fea_dist_method" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_adult.py:51:0: C0103: Constant name "image_dist_method" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_adult.py:52:0: C0103: Constant name "error" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_adult.py:53:0: C0103: Constant name "result_dir" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_adult.py:7:0: C0411: third party import "Scripts.IGTD_Functions.drop_numerical_outliers" should be placed before first party imports "autodeep.factory.create_data_loader", "dataloaders.dataloader.*"  (wrong-import-order)
myexamples/igtd_notebooks/preprocess_tabs_adult.py:2:0: W0611: Unused Dict imported from typing (unused-import)
myexamples/igtd_notebooks/preprocess_tabs_adult.py:3:0: W0611: Unused numpy imported as np (unused-import)
myexamples/igtd_notebooks/preprocess_tabs_adult.py:4:0: W0611: Unused pandas imported as pd (unused-import)
myexamples/igtd_notebooks/preprocess_tabs_adult.py:7:0: W0611: Unused drop_numerical_outliers imported from Scripts.IGTD_Functions (unused-import)
myexamples/igtd_notebooks/preprocess_tabs_adult.py:7:0: W0611: Unused min_max_transform imported from Scripts.IGTD_Functions (unused-import)
************* Module igtd_notebooks.preprocess_tabs_breastcancer
myexamples/igtd_notebooks/preprocess_tabs_breastcancer.py:31:0: C0301: Line too long (105/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_breastcancer.py:53:0: C0301: Line too long (105/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_breastcancer.py:1:0: C0114: Missing module docstring (missing-module-docstring)
myexamples/igtd_notebooks/preprocess_tabs_breastcancer.py:6:0: E0401: Unable to import 'dataloaders.dataloader' (import-error)
myexamples/igtd_notebooks/preprocess_tabs_breastcancer.py:6:0: W0401: Wildcard import dataloaders.dataloader (wildcard-import)
myexamples/igtd_notebooks/preprocess_tabs_breastcancer.py:7:0: E0401: Unable to import 'Scripts.IGTD_Functions' (import-error)
myexamples/igtd_notebooks/preprocess_tabs_breastcancer.py:13:0: C0103: Constant name "dataset_name" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_breastcancer.py:14:14: E1123: Unexpected keyword argument 'normalize_features' in function call (unexpected-keyword-arg)
myexamples/igtd_notebooks/preprocess_tabs_breastcancer.py:14:14: E1123: Unexpected keyword argument 'encode_categorical' in function call (unexpected-keyword-arg)
myexamples/igtd_notebooks/preprocess_tabs_breastcancer.py:14:14: E1123: Unexpected keyword argument 'return_extra_info' in function call (unexpected-keyword-arg)
myexamples/igtd_notebooks/preprocess_tabs_breastcancer.py:14:14: E1123: Unexpected keyword argument 'random_state' in function call (unexpected-keyword-arg)
myexamples/igtd_notebooks/preprocess_tabs_breastcancer.py:24:0: C0103: Constant name "num_row" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_breastcancer.py:25:0: C0103: Constant name "num_col" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_breastcancer.py:26:0: C0103: Constant name "num" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_breastcancer.py:27:0: C0103: Constant name "save_image_size" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_breastcancer.py:28:0: C0103: Constant name "fea_dist_method" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_breastcancer.py:29:0: C0103: Constant name "image_dist_method" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_breastcancer.py:30:0: C0103: Constant name "error" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_breastcancer.py:31:0: C0103: Constant name "result_dir" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_breastcancer.py:32:0: C0103: Constant name "max_step" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_breastcancer.py:33:0: C0103: Constant name "val_step" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_breastcancer.py:34:0: C0103: Constant name "min_gain" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_breastcancer.py:50:0: C0103: Constant name "fea_dist_method" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_breastcancer.py:51:0: C0103: Constant name "image_dist_method" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_breastcancer.py:52:0: C0103: Constant name "error" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_breastcancer.py:53:0: C0103: Constant name "result_dir" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_breastcancer.py:7:0: C0411: third party import "Scripts.IGTD_Functions.drop_numerical_outliers" should be placed before first party imports "autodeep.factory.create_data_loader", "dataloaders.dataloader.*"  (wrong-import-order)
myexamples/igtd_notebooks/preprocess_tabs_breastcancer.py:2:0: W0611: Unused Dict imported from typing (unused-import)
myexamples/igtd_notebooks/preprocess_tabs_breastcancer.py:3:0: W0611: Unused numpy imported as np (unused-import)
myexamples/igtd_notebooks/preprocess_tabs_breastcancer.py:4:0: W0611: Unused pandas imported as pd (unused-import)
myexamples/igtd_notebooks/preprocess_tabs_breastcancer.py:7:0: W0611: Unused drop_numerical_outliers imported from Scripts.IGTD_Functions (unused-import)
myexamples/igtd_notebooks/preprocess_tabs_breastcancer.py:7:0: W0611: Unused min_max_transform imported from Scripts.IGTD_Functions (unused-import)
************* Module igtd_notebooks.preprocess_tabs_iris
myexamples/igtd_notebooks/preprocess_tabs_iris.py:31:0: C0301: Line too long (105/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_iris.py:53:0: C0301: Line too long (105/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_iris.py:1:0: C0114: Missing module docstring (missing-module-docstring)
myexamples/igtd_notebooks/preprocess_tabs_iris.py:6:0: E0401: Unable to import 'dataloaders.dataloader' (import-error)
myexamples/igtd_notebooks/preprocess_tabs_iris.py:6:0: W0401: Wildcard import dataloaders.dataloader (wildcard-import)
myexamples/igtd_notebooks/preprocess_tabs_iris.py:7:0: E0401: Unable to import 'Scripts.IGTD_Functions' (import-error)
myexamples/igtd_notebooks/preprocess_tabs_iris.py:13:0: C0103: Constant name "dataset_name" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_iris.py:14:14: E1123: Unexpected keyword argument 'normalize_features' in function call (unexpected-keyword-arg)
myexamples/igtd_notebooks/preprocess_tabs_iris.py:14:14: E1123: Unexpected keyword argument 'encode_categorical' in function call (unexpected-keyword-arg)
myexamples/igtd_notebooks/preprocess_tabs_iris.py:14:14: E1123: Unexpected keyword argument 'return_extra_info' in function call (unexpected-keyword-arg)
myexamples/igtd_notebooks/preprocess_tabs_iris.py:14:14: E1123: Unexpected keyword argument 'random_state' in function call (unexpected-keyword-arg)
myexamples/igtd_notebooks/preprocess_tabs_iris.py:24:0: C0103: Constant name "num_row" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_iris.py:25:0: C0103: Constant name "num_col" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_iris.py:26:0: C0103: Constant name "num" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_iris.py:27:0: C0103: Constant name "save_image_size" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_iris.py:28:0: C0103: Constant name "fea_dist_method" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_iris.py:29:0: C0103: Constant name "image_dist_method" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_iris.py:30:0: C0103: Constant name "error" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_iris.py:31:0: C0103: Constant name "result_dir" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_iris.py:32:0: C0103: Constant name "max_step" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_iris.py:33:0: C0103: Constant name "val_step" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_iris.py:34:0: C0103: Constant name "min_gain" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_iris.py:50:0: C0103: Constant name "fea_dist_method" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_iris.py:51:0: C0103: Constant name "image_dist_method" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_iris.py:52:0: C0103: Constant name "error" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_iris.py:53:0: C0103: Constant name "result_dir" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_iris.py:7:0: C0411: third party import "Scripts.IGTD_Functions.drop_numerical_outliers" should be placed before first party imports "autodeep.factory.create_data_loader", "dataloaders.dataloader.*"  (wrong-import-order)
myexamples/igtd_notebooks/preprocess_tabs_iris.py:2:0: W0611: Unused Dict imported from typing (unused-import)
myexamples/igtd_notebooks/preprocess_tabs_iris.py:3:0: W0611: Unused numpy imported as np (unused-import)
myexamples/igtd_notebooks/preprocess_tabs_iris.py:4:0: W0611: Unused pandas imported as pd (unused-import)
myexamples/igtd_notebooks/preprocess_tabs_iris.py:7:0: W0611: Unused drop_numerical_outliers imported from Scripts.IGTD_Functions (unused-import)
myexamples/igtd_notebooks/preprocess_tabs_iris.py:7:0: W0611: Unused min_max_transform imported from Scripts.IGTD_Functions (unused-import)
************* Module igtd_notebooks.preprocess_tabs_titanic
myexamples/igtd_notebooks/preprocess_tabs_titanic.py:31:0: C0301: Line too long (105/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_titanic.py:53:0: C0301: Line too long (105/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_titanic.py:1:0: C0114: Missing module docstring (missing-module-docstring)
myexamples/igtd_notebooks/preprocess_tabs_titanic.py:6:0: E0401: Unable to import 'dataloaders.dataloader' (import-error)
myexamples/igtd_notebooks/preprocess_tabs_titanic.py:6:0: W0401: Wildcard import dataloaders.dataloader (wildcard-import)
myexamples/igtd_notebooks/preprocess_tabs_titanic.py:7:0: E0401: Unable to import 'Scripts.IGTD_Functions' (import-error)
myexamples/igtd_notebooks/preprocess_tabs_titanic.py:13:0: C0103: Constant name "dataset_name" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_titanic.py:14:14: E1123: Unexpected keyword argument 'normalize_features' in function call (unexpected-keyword-arg)
myexamples/igtd_notebooks/preprocess_tabs_titanic.py:14:14: E1123: Unexpected keyword argument 'encode_categorical' in function call (unexpected-keyword-arg)
myexamples/igtd_notebooks/preprocess_tabs_titanic.py:14:14: E1123: Unexpected keyword argument 'return_extra_info' in function call (unexpected-keyword-arg)
myexamples/igtd_notebooks/preprocess_tabs_titanic.py:14:14: E1123: Unexpected keyword argument 'random_state' in function call (unexpected-keyword-arg)
myexamples/igtd_notebooks/preprocess_tabs_titanic.py:24:0: C0103: Constant name "num_row" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_titanic.py:25:0: C0103: Constant name "num_col" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_titanic.py:26:0: C0103: Constant name "num" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_titanic.py:27:0: C0103: Constant name "save_image_size" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_titanic.py:28:0: C0103: Constant name "fea_dist_method" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_titanic.py:29:0: C0103: Constant name "image_dist_method" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_titanic.py:30:0: C0103: Constant name "error" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_titanic.py:31:0: C0103: Constant name "result_dir" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_titanic.py:32:0: C0103: Constant name "max_step" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_titanic.py:33:0: C0103: Constant name "val_step" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_titanic.py:34:0: C0103: Constant name "min_gain" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_titanic.py:50:0: C0103: Constant name "fea_dist_method" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_titanic.py:51:0: C0103: Constant name "image_dist_method" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_titanic.py:52:0: C0103: Constant name "error" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_titanic.py:53:0: C0103: Constant name "result_dir" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_titanic.py:7:0: C0411: third party import "Scripts.IGTD_Functions.drop_numerical_outliers" should be placed before first party imports "autodeep.factory.create_data_loader", "dataloaders.dataloader.*"  (wrong-import-order)
myexamples/igtd_notebooks/preprocess_tabs_titanic.py:2:0: W0611: Unused Dict imported from typing (unused-import)
myexamples/igtd_notebooks/preprocess_tabs_titanic.py:3:0: W0611: Unused numpy imported as np (unused-import)
myexamples/igtd_notebooks/preprocess_tabs_titanic.py:4:0: W0611: Unused pandas imported as pd (unused-import)
myexamples/igtd_notebooks/preprocess_tabs_titanic.py:7:0: W0611: Unused drop_numerical_outliers imported from Scripts.IGTD_Functions (unused-import)
myexamples/igtd_notebooks/preprocess_tabs_titanic.py:7:0: W0611: Unused min_max_transform imported from Scripts.IGTD_Functions (unused-import)
************* Module igtd_notebooks.preprocess_tabs_diabetes
myexamples/igtd_notebooks/preprocess_tabs_diabetes.py:32:0: C0301: Line too long (105/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_diabetes.py:54:0: C0301: Line too long (105/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_diabetes.py:1:0: C0114: Missing module docstring (missing-module-docstring)
myexamples/igtd_notebooks/preprocess_tabs_diabetes.py:5:0: E0611: No name 'create_full_data_loader' in module 'autodeep.factory' (no-name-in-module)
myexamples/igtd_notebooks/preprocess_tabs_diabetes.py:6:0: E0401: Unable to import 'dataloaders.fulldataloader' (import-error)
myexamples/igtd_notebooks/preprocess_tabs_diabetes.py:6:0: W0401: Wildcard import dataloaders.fulldataloader (wildcard-import)
myexamples/igtd_notebooks/preprocess_tabs_diabetes.py:7:0: E0401: Unable to import 'Scripts.IGTD_Functions' (import-error)
myexamples/igtd_notebooks/preprocess_tabs_diabetes.py:13:0: C0103: Constant name "dataset_name" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_diabetes.py:23:0: W0104: Statement seems to have no effect (pointless-statement)
myexamples/igtd_notebooks/preprocess_tabs_diabetes.py:25:0: C0103: Constant name "num_row" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_diabetes.py:26:0: C0103: Constant name "num_col" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_diabetes.py:27:0: C0103: Constant name "num" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_diabetes.py:28:0: C0103: Constant name "save_image_size" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_diabetes.py:29:0: C0103: Constant name "fea_dist_method" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_diabetes.py:30:0: C0103: Constant name "image_dist_method" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_diabetes.py:31:0: C0103: Constant name "error" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_diabetes.py:32:0: C0103: Constant name "result_dir" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_diabetes.py:33:0: C0103: Constant name "max_step" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_diabetes.py:34:0: C0103: Constant name "val_step" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_diabetes.py:35:0: C0103: Constant name "min_gain" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_diabetes.py:51:0: C0103: Constant name "fea_dist_method" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_diabetes.py:52:0: C0103: Constant name "image_dist_method" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_diabetes.py:53:0: C0103: Constant name "error" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_diabetes.py:54:0: C0103: Constant name "result_dir" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_diabetes.py:7:0: C0411: third party import "Scripts.IGTD_Functions.drop_numerical_outliers" should be placed before first party imports "autodeep.factory.create_full_data_loader", "dataloaders.fulldataloader.*"  (wrong-import-order)
myexamples/igtd_notebooks/preprocess_tabs_diabetes.py:2:0: W0611: Unused Dict imported from typing (unused-import)
myexamples/igtd_notebooks/preprocess_tabs_diabetes.py:3:0: W0611: Unused numpy imported as np (unused-import)
myexamples/igtd_notebooks/preprocess_tabs_diabetes.py:4:0: W0611: Unused pandas imported as pd (unused-import)
myexamples/igtd_notebooks/preprocess_tabs_diabetes.py:7:0: W0611: Unused drop_numerical_outliers imported from Scripts.IGTD_Functions (unused-import)
myexamples/igtd_notebooks/preprocess_tabs_diabetes.py:7:0: W0611: Unused min_max_transform imported from Scripts.IGTD_Functions (unused-import)
************* Module igtd_notebooks.preprocess_tabs_creditcard
myexamples/igtd_notebooks/preprocess_tabs_creditcard.py:31:0: C0301: Line too long (105/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_creditcard.py:53:0: C0301: Line too long (105/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_creditcard.py:1:0: C0114: Missing module docstring (missing-module-docstring)
myexamples/igtd_notebooks/preprocess_tabs_creditcard.py:6:0: E0401: Unable to import 'dataloaders.dataloader' (import-error)
myexamples/igtd_notebooks/preprocess_tabs_creditcard.py:6:0: W0401: Wildcard import dataloaders.dataloader (wildcard-import)
myexamples/igtd_notebooks/preprocess_tabs_creditcard.py:7:0: E0401: Unable to import 'Scripts.IGTD_Functions' (import-error)
myexamples/igtd_notebooks/preprocess_tabs_creditcard.py:13:0: C0103: Constant name "dataset_name" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_creditcard.py:14:14: E1123: Unexpected keyword argument 'normalize_features' in function call (unexpected-keyword-arg)
myexamples/igtd_notebooks/preprocess_tabs_creditcard.py:14:14: E1123: Unexpected keyword argument 'encode_categorical' in function call (unexpected-keyword-arg)
myexamples/igtd_notebooks/preprocess_tabs_creditcard.py:14:14: E1123: Unexpected keyword argument 'return_extra_info' in function call (unexpected-keyword-arg)
myexamples/igtd_notebooks/preprocess_tabs_creditcard.py:14:14: E1123: Unexpected keyword argument 'random_state' in function call (unexpected-keyword-arg)
myexamples/igtd_notebooks/preprocess_tabs_creditcard.py:24:0: C0103: Constant name "num_row" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_creditcard.py:25:0: C0103: Constant name "num_col" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_creditcard.py:26:0: C0103: Constant name "num" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_creditcard.py:27:0: C0103: Constant name "save_image_size" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_creditcard.py:28:0: C0103: Constant name "fea_dist_method" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_creditcard.py:29:0: C0103: Constant name "image_dist_method" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_creditcard.py:30:0: C0103: Constant name "error" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_creditcard.py:31:0: C0103: Constant name "result_dir" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_creditcard.py:32:0: C0103: Constant name "max_step" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_creditcard.py:33:0: C0103: Constant name "val_step" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_creditcard.py:34:0: C0103: Constant name "min_gain" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_creditcard.py:50:0: C0103: Constant name "fea_dist_method" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_creditcard.py:51:0: C0103: Constant name "image_dist_method" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_creditcard.py:52:0: C0103: Constant name "error" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_creditcard.py:53:0: C0103: Constant name "result_dir" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_creditcard.py:7:0: C0411: third party import "Scripts.IGTD_Functions.drop_numerical_outliers" should be placed before first party imports "autodeep.factory.create_data_loader", "dataloaders.dataloader.*"  (wrong-import-order)
myexamples/igtd_notebooks/preprocess_tabs_creditcard.py:2:0: W0611: Unused Dict imported from typing (unused-import)
myexamples/igtd_notebooks/preprocess_tabs_creditcard.py:3:0: W0611: Unused numpy imported as np (unused-import)
myexamples/igtd_notebooks/preprocess_tabs_creditcard.py:4:0: W0611: Unused pandas imported as pd (unused-import)
myexamples/igtd_notebooks/preprocess_tabs_creditcard.py:7:0: W0611: Unused drop_numerical_outliers imported from Scripts.IGTD_Functions (unused-import)
myexamples/igtd_notebooks/preprocess_tabs_creditcard.py:7:0: W0611: Unused min_max_transform imported from Scripts.IGTD_Functions (unused-import)
************* Module autodeep.modelsdefinition.FTTransformerModel
modelsdefinition/FTTransformerModel.py:1:0: C0114: Missing module docstring (missing-module-docstring)
modelsdefinition/FTTransformerModel.py:1:0: C0103: Module name "FTTransformerModel" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/FTTransformerModel.py:10:0: C0115: Missing class docstring (missing-class-docstring)
modelsdefinition/FTTransformerModel.py:64:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/FTTransformerModel.py:69:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
************* Module autodeep.modelsdefinition.SoftOrdering1DCNN
modelsdefinition/SoftOrdering1DCNN.py:235:0: C0301: Line too long (107/100) (line-too-long)
modelsdefinition/SoftOrdering1DCNN.py:269:0: C0301: Line too long (107/100) (line-too-long)
modelsdefinition/SoftOrdering1DCNN.py:351:0: C0301: Line too long (102/100) (line-too-long)
modelsdefinition/SoftOrdering1DCNN.py:645:0: C0301: Line too long (119/100) (line-too-long)
modelsdefinition/SoftOrdering1DCNN.py:649:0: C0301: Line too long (113/100) (line-too-long)
modelsdefinition/SoftOrdering1DCNN.py:752:0: C0301: Line too long (128/100) (line-too-long)
modelsdefinition/SoftOrdering1DCNN.py:1:0: C0114: Missing module docstring (missing-module-docstring)
modelsdefinition/SoftOrdering1DCNN.py:1:0: C0103: Module name "SoftOrdering1DCNN" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/SoftOrdering1DCNN.py:7:0: R0402: Use 'from torch import nn' instead (consider-using-from-import)
modelsdefinition/SoftOrdering1DCNN.py:9:0: R0402: Use 'from torch import optim' instead (consider-using-from-import)
modelsdefinition/SoftOrdering1DCNN.py:25:0: C0115: Missing class docstring (missing-class-docstring)
modelsdefinition/SoftOrdering1DCNN.py:25:0: R0902: Too many instance attributes (27/7) (too-many-instance-attributes)
modelsdefinition/SoftOrdering1DCNN.py:43:8: R1725: Consider using Python 3 style super() without arguments (super-with-arguments)
modelsdefinition/SoftOrdering1DCNN.py:130:0: C0115: Missing class docstring (missing-class-docstring)
modelsdefinition/SoftOrdering1DCNN.py:130:0: R0902: Too many instance attributes (21/7) (too-many-instance-attributes)
modelsdefinition/SoftOrdering1DCNN.py:172:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/SoftOrdering1DCNN.py:266:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/SoftOrdering1DCNN.py:286:12: W0612: Unused variable 'i' (unused-variable)
modelsdefinition/SoftOrdering1DCNN.py:354:40: C0103: Argument name "X_train" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/SoftOrdering1DCNN.py:372:8: C0103: Variable name "X_train_tensor" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/SoftOrdering1DCNN.py:389:52: C0103: Argument name "X_train" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/SoftOrdering1DCNN.py:403:8: C0103: Variable name "X_train_tensor" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/SoftOrdering1DCNN.py:481:48: W0613: Unused argument 'default_params' (unused-argument)
modelsdefinition/SoftOrdering1DCNN.py:537:14: C0103: Argument name "X" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/SoftOrdering1DCNN.py:536:4: R0913: Too many arguments (8/5) (too-many-arguments)
modelsdefinition/SoftOrdering1DCNN.py:536:4: R0917: Too many positional arguments (8/5) (too-many-positional-arguments)
modelsdefinition/SoftOrdering1DCNN.py:536:4: R0914: Too many local variables (27/15) (too-many-locals)
modelsdefinition/SoftOrdering1DCNN.py:579:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/SoftOrdering1DCNN.py:580:8: C0103: Variable name "X_train" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/SoftOrdering1DCNN.py:580:17: C0103: Variable name "X_val" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/SoftOrdering1DCNN.py:594:8: R0914: Too many local variables (19/15) (too-many-locals)
modelsdefinition/SoftOrdering1DCNN.py:595:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/SoftOrdering1DCNN.py:667:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/SoftOrdering1DCNN.py:668:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/SoftOrdering1DCNN.py:594:8: R0915: Too many statements (52/50) (too-many-statements)
modelsdefinition/SoftOrdering1DCNN.py:701:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/SoftOrdering1DCNN.py:702:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/SoftOrdering1DCNN.py:705:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/SoftOrdering1DCNN.py:706:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/SoftOrdering1DCNN.py:536:4: R0915: Too many statements (91/50) (too-many-statements)
modelsdefinition/SoftOrdering1DCNN.py:709:22: C0103: Argument name "X_test" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/SoftOrdering1DCNN.py:758:8: R1705: Unnecessary "else" after "return", remove the "else" and de-indent the code inside it (no-else-return)
modelsdefinition/SoftOrdering1DCNN.py:188:8: W0201: Attribute 'model' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/SoftOrdering1DCNN.py:616:12: W0201: Attribute 'model' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/SoftOrdering1DCNN.py:334:12: W0201: Attribute 'loss_fn' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/SoftOrdering1DCNN.py:346:12: W0201: Attribute 'loss_fn' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/SoftOrdering1DCNN.py:348:12: W0201: Attribute 'loss_fn' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/SoftOrdering1DCNN.py:499:12: W0201: Attribute 'optimizer' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/SoftOrdering1DCNN.py:505:12: W0201: Attribute 'optimizer' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/SoftOrdering1DCNN.py:511:12: W0201: Attribute 'optimizer' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/SoftOrdering1DCNN.py:517:12: W0201: Attribute 'scheduler' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/SoftOrdering1DCNN.py:523:12: W0201: Attribute 'scheduler' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/SoftOrdering1DCNN.py:527:12: W0201: Attribute 'scheduler' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/SoftOrdering1DCNN.py:562:8: W0201: Attribute 'default_params' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/SoftOrdering1DCNN.py:569:8: W0201: Attribute 'num_features' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/SoftOrdering1DCNN.py:572:12: W0201: Attribute 'num_targets' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/SoftOrdering1DCNN.py:574:12: W0201: Attribute 'num_targets' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/SoftOrdering1DCNN.py:576:12: W0201: Attribute 'num_targets' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/SoftOrdering1DCNN.py:587:8: W0201: Attribute 'torch_dataset_train' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/SoftOrdering1DCNN.py:590:8: W0201: Attribute 'torch_dataset_val' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/SoftOrdering1DCNN.py:682:8: W0201: Attribute 'evaluator' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/SoftOrdering1DCNN.py:703:8: W0201: Attribute 'best_model' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/SoftOrdering1DCNN.py:764:0: C0115: Missing class docstring (missing-class-docstring)
************* Module autodeep.modelsdefinition.MLP
modelsdefinition/MLP.py:1:0: C0114: Missing module docstring (missing-module-docstring)
modelsdefinition/MLP.py:1:0: C0103: Module name "MLP" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/MLP.py:18:0: W0223: Method 'train' is abstract in class 'BaseModel' but is not overridden in child class 'MLP' (abstract-method)
modelsdefinition/MLP.py:18:0: R0902: Too many instance attributes (12/7) (too-many-instance-attributes)
modelsdefinition/MLP.py:21:4: W0231: __init__ method from base class 'BaseModel' is not called (super-init-not-called)
modelsdefinition/MLP.py:99:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/MLP.py:122:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/MLP.py:124:8: R1705: Unnecessary "else" after "return", remove the "else" and de-indent the code inside it (no-else-return)
modelsdefinition/MLP.py:130:14: C0103: Argument name "X" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/MLP.py:129:4: R0913: Too many arguments (8/5) (too-many-arguments)
modelsdefinition/MLP.py:129:4: R0917: Too many positional arguments (8/5) (too-many-positional-arguments)
modelsdefinition/MLP.py:129:4: R0914: Too many local variables (20/15) (too-many-locals)
modelsdefinition/MLP.py:159:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/MLP.py:164:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/MLP.py:195:12: C0103: Variable name "X_train" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/MLP.py:195:21: C0103: Variable name "X_test" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/MLP.py:253:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/MLP.py:254:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/MLP.py:129:4: R0915: Too many statements (55/50) (too-many-statements)
modelsdefinition/MLP.py:130:70: W0613: Unused argument 'extra_info' (unused-argument)
modelsdefinition/MLP.py:155:8: W0201: Attribute 'default_params' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/MLP.py:234:8: W0201: Attribute 'evaluator' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/MLP.py:255:8: W0201: Attribute 'best_model' defined outside __init__ (attribute-defined-outside-init)
************* Module autodeep.modelsdefinition.IGTD
modelsdefinition/IGTD.py:1:0: C0114: Missing module docstring (missing-module-docstring)
modelsdefinition/IGTD.py:1:0: C0103: Module name "IGTD" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/IGTD.py:7:0: E0401: Unable to import 'Scripts.IGTD_Functions' (import-error)
modelsdefinition/IGTD.py:10:0: R0902: Too many instance attributes (8/7) (too-many-instance-attributes)
modelsdefinition/IGTD.py:27:4: R0913: Too many arguments (8/5) (too-many-arguments)
modelsdefinition/IGTD.py:27:4: R0917: Too many positional arguments (8/5) (too-many-positional-arguments)
modelsdefinition/IGTD.py:76:14: C0103: Argument name "X" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/IGTD.py:97:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/IGTD.py:10:0: R0903: Too few public methods (1/2) (too-few-public-methods)
modelsdefinition/IGTD.py:118:0: E0401: Unable to import 'dataloaders.dataloader' (import-error)
modelsdefinition/IGTD.py:118:0: C0413: Import "from dataloaders.dataloader import DataLoader" should be placed at the top of the module (wrong-import-position)
modelsdefinition/IGTD.py:119:0: C0413: Import "from sklearn.model_selection import train_test_split" should be placed at the top of the module (wrong-import-position)
modelsdefinition/IGTD.py:122:0: C0115: Missing class docstring (missing-class-docstring)
modelsdefinition/IGTD.py:122:0: R0902: Too many instance attributes (13/7) (too-many-instance-attributes)
modelsdefinition/IGTD.py:124:4: R0913: Too many arguments (14/5) (too-many-arguments)
modelsdefinition/IGTD.py:124:4: R0917: Too many positional arguments (14/5) (too-many-positional-arguments)
modelsdefinition/IGTD.py:126:8: W0621: Redefining name 'dataset_path' from outer scope (line 257) (redefined-outer-name)
modelsdefinition/IGTD.py:136:8: W0621: Redefining name 'igtd_preprocessor' from outer scope (line 247) (redefined-outer-name)
modelsdefinition/IGTD.py:137:8: W0621: Redefining name 'igtd_configs' from outer scope (line 617) (redefined-outer-name)
modelsdefinition/IGTD.py:138:8: W0621: Redefining name 'igtd_result_base_dir' from outer scope (line 256) (redefined-outer-name)
modelsdefinition/IGTD.py:215:12: W0621: Redefining name 'X_train' from outer scope (line 270) (redefined-outer-name)
modelsdefinition/IGTD.py:215:21: W0621: Redefining name 'X_test' from outer scope (line 270) (redefined-outer-name)
modelsdefinition/IGTD.py:216:12: W0621: Redefining name 'y_train' from outer scope (line 270) (redefined-outer-name)
modelsdefinition/IGTD.py:216:21: W0621: Redefining name 'y_test' from outer scope (line 270) (redefined-outer-name)
modelsdefinition/IGTD.py:238:8: W0621: Redefining name 'extra_info' from outer scope (line 270) (redefined-outer-name)
modelsdefinition/IGTD.py:204:8: C0103: Variable name "X" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/IGTD.py:207:12: C0103: Variable name "X" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/IGTD.py:215:12: C0103: Variable name "X_train" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/IGTD.py:215:21: C0103: Variable name "X_test" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/IGTD.py:218:12: C0103: Variable name "X_train" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/IGTD.py:218:21: C0103: Variable name "X_test" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/IGTD.py:226:12: C0103: Variable name "X_train" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/IGTD.py:226:21: C0103: Variable name "X_test" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/IGTD.py:122:0: R0903: Too few public methods (1/2) (too-few-public-methods)
modelsdefinition/IGTD.py:256:4: C0103: Constant name "igtd_result_base_dir" doesn't conform to UPPER_CASE naming style (invalid-name)
modelsdefinition/IGTD.py:257:4: C0103: Constant name "dataset_path" doesn't conform to UPPER_CASE naming style (invalid-name)
modelsdefinition/IGTD.py:267:21: E0601: Using variable 'igtd_configs' before assignment (used-before-assignment)
modelsdefinition/IGTD.py:272:0: W0404: Reimport 'logging' (imported line 1) (reimported)
modelsdefinition/IGTD.py:272:0: C0413: Import "import logging" should be placed at the top of the module (wrong-import-position)
modelsdefinition/IGTD.py:273:0: W0404: Reimport 'os' (imported line 2) (reimported)
modelsdefinition/IGTD.py:273:0: C0413: Import "import os" should be placed at the top of the module (wrong-import-position)
modelsdefinition/IGTD.py:274:0: W0404: Reimport 'Dict' (imported line 3) (reimported)
modelsdefinition/IGTD.py:274:0: W0404: Reimport 'Optional' (imported line 3) (reimported)
modelsdefinition/IGTD.py:274:0: C0413: Import "from typing import Dict, Optional" should be placed at the top of the module (wrong-import-position)
modelsdefinition/IGTD.py:276:0: W0404: Reimport 'numpy' (imported line 5) (reimported)
modelsdefinition/IGTD.py:276:0: C0413: Import "import numpy as np" should be placed at the top of the module (wrong-import-position)
modelsdefinition/IGTD.py:277:0: W0404: Reimport 'pandas' (imported line 6) (reimported)
modelsdefinition/IGTD.py:277:0: C0413: Import "import pandas as pd" should be placed at the top of the module (wrong-import-position)
modelsdefinition/IGTD.py:278:0: E0401: Unable to import 'dataloaders.dataloader' (import-error)
modelsdefinition/IGTD.py:278:0: W0404: Reimport 'DataLoader' (imported line 118) (reimported)
modelsdefinition/IGTD.py:278:0: C0413: Import "from dataloaders.dataloader import DataLoader" should be placed at the top of the module (wrong-import-position)
modelsdefinition/IGTD.py:279:0: E0401: Unable to import 'Scripts.IGTD_Functions' (import-error)
modelsdefinition/IGTD.py:279:0: W0404: Reimport 'table_to_image' (imported line 7) (reimported)
modelsdefinition/IGTD.py:279:0: C0413: Import "from Scripts.IGTD_Functions import table_to_image" should be placed at the top of the module (wrong-import-position)
modelsdefinition/IGTD.py:280:0: W0404: Reimport 'train_test_split' (imported line 119) (reimported)
modelsdefinition/IGTD.py:280:0: C0413: Import "from sklearn.model_selection import train_test_split" should be placed at the top of the module (wrong-import-position)
modelsdefinition/IGTD.py:283:0: E0102: class already defined line 10 (function-redefined)
modelsdefinition/IGTD.py:283:0: R0902: Too many instance attributes (9/7) (too-many-instance-attributes)
modelsdefinition/IGTD.py:300:4: R0913: Too many arguments (9/5) (too-many-arguments)
modelsdefinition/IGTD.py:300:4: R0917: Too many positional arguments (9/5) (too-many-positional-arguments)
modelsdefinition/IGTD.py:353:14: C0103: Argument name "X" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/IGTD.py:376:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/IGTD.py:283:0: R0903: Too few public methods (1/2) (too-few-public-methods)
modelsdefinition/IGTD.py:397:0: C0115: Missing class docstring (missing-class-docstring)
modelsdefinition/IGTD.py:397:0: E0102: class already defined line 122 (function-redefined)
modelsdefinition/IGTD.py:397:0: R0902: Too many instance attributes (14/7) (too-many-instance-attributes)
modelsdefinition/IGTD.py:399:4: R0913: Too many arguments (14/5) (too-many-arguments)
modelsdefinition/IGTD.py:399:4: R0917: Too many positional arguments (14/5) (too-many-positional-arguments)
modelsdefinition/IGTD.py:399:4: R0914: Too many local variables (16/15) (too-many-locals)
modelsdefinition/IGTD.py:401:8: W0621: Redefining name 'dataset_path' from outer scope (line 257) (redefined-outer-name)
modelsdefinition/IGTD.py:411:8: W0621: Redefining name 'igtd_preprocessor' from outer scope (line 247) (redefined-outer-name)
modelsdefinition/IGTD.py:412:8: W0621: Redefining name 'igtd_configs' from outer scope (line 617) (redefined-outer-name)
modelsdefinition/IGTD.py:413:8: W0621: Redefining name 'igtd_result_base_dir' from outer scope (line 256) (redefined-outer-name)
modelsdefinition/IGTD.py:471:4: R0914: Too many local variables (16/15) (too-many-locals)
modelsdefinition/IGTD.py:497:12: W0621: Redefining name 'X_train' from outer scope (line 270) (redefined-outer-name)
modelsdefinition/IGTD.py:497:21: W0621: Redefining name 'X_test' from outer scope (line 270) (redefined-outer-name)
modelsdefinition/IGTD.py:498:12: W0621: Redefining name 'y_train' from outer scope (line 270) (redefined-outer-name)
modelsdefinition/IGTD.py:498:21: W0621: Redefining name 'y_test' from outer scope (line 270) (redefined-outer-name)
modelsdefinition/IGTD.py:521:8: W0621: Redefining name 'extra_info' from outer scope (line 270) (redefined-outer-name)
modelsdefinition/IGTD.py:486:8: C0103: Variable name "X" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/IGTD.py:489:12: C0103: Variable name "X" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/IGTD.py:497:12: C0103: Variable name "X_train" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/IGTD.py:497:21: C0103: Variable name "X_test" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/IGTD.py:500:12: C0103: Variable name "X_train" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/IGTD.py:500:21: C0103: Variable name "X_test" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/IGTD.py:508:12: C0103: Variable name "X_train" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/IGTD.py:508:21: C0103: Variable name "X_test" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/IGTD.py:520:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/IGTD.py:564:8: W0621: Redefining name 'extra_info' from outer scope (line 270) (redefined-outer-name)
modelsdefinition/IGTD.py:567:17: W1514: Using open without explicitly specifying an encoding (unspecified-encoding)
modelsdefinition/IGTD.py:577:39: C0103: Argument name "X" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/IGTD.py:591:29: C0103: Argument name "X_train" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/IGTD.py:591:52: C0103: Argument name "X_test" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/IGTD.py:591:29: W0621: Redefining name 'X_train' from outer scope (line 270) (redefined-outer-name)
modelsdefinition/IGTD.py:591:52: W0621: Redefining name 'X_test' from outer scope (line 270) (redefined-outer-name)
modelsdefinition/IGTD.py:629:24: E1120: No value for argument 'dataset_name' in constructor call (no-value-for-parameter)
modelsdefinition/IGTD.py:638:4: C0103: Constant name "igtd_result_base_dir" doesn't conform to UPPER_CASE naming style (invalid-name)
modelsdefinition/IGTD.py:639:4: C0103: Constant name "dataset_path" doesn't conform to UPPER_CASE naming style (invalid-name)
modelsdefinition/IGTD.py:119:0: C0411: third party import "sklearn.model_selection.train_test_split" should be placed before first party import "dataloaders.dataloader.DataLoader"  (wrong-import-order)
modelsdefinition/IGTD.py:272:0: C0411: standard import "logging" should be placed before third party imports "numpy", "pandas", "Scripts.IGTD_Functions.table_to_image", "sklearn.model_selection.train_test_split" and first party import "dataloaders.dataloader.DataLoader"  (wrong-import-order)
modelsdefinition/IGTD.py:273:0: C0411: standard import "os" should be placed before third party imports "numpy", "pandas", "Scripts.IGTD_Functions.table_to_image", "sklearn.model_selection.train_test_split" and first party import "dataloaders.dataloader.DataLoader"  (wrong-import-order)
modelsdefinition/IGTD.py:274:0: C0411: standard import "typing.Dict" should be placed before third party imports "numpy", "pandas", "Scripts.IGTD_Functions.table_to_image", "sklearn.model_selection.train_test_split" and first party import "dataloaders.dataloader.DataLoader"  (wrong-import-order)
modelsdefinition/IGTD.py:276:0: C0411: third party import "numpy" should be placed before first party import "dataloaders.dataloader.DataLoader"  (wrong-import-order)
modelsdefinition/IGTD.py:277:0: C0411: third party import "pandas" should be placed before first party import "dataloaders.dataloader.DataLoader"  (wrong-import-order)
modelsdefinition/IGTD.py:279:0: C0411: third party import "Scripts.IGTD_Functions.table_to_image" should be placed before first party imports "dataloaders.dataloader.DataLoader", "dataloaders.dataloader.DataLoader"  (wrong-import-order)
modelsdefinition/IGTD.py:280:0: C0411: third party import "sklearn.model_selection.train_test_split" should be placed before first party imports "dataloaders.dataloader.DataLoader", "dataloaders.dataloader.DataLoader"  (wrong-import-order)
modelsdefinition/IGTD.py:272:0: C0412: Imports from package logging are not grouped (ungrouped-imports)
modelsdefinition/IGTD.py:273:0: C0412: Imports from package os are not grouped (ungrouped-imports)
modelsdefinition/IGTD.py:274:0: C0412: Imports from package typing are not grouped (ungrouped-imports)
modelsdefinition/IGTD.py:276:0: C0412: Imports from package numpy are not grouped (ungrouped-imports)
modelsdefinition/IGTD.py:277:0: C0412: Imports from package pandas are not grouped (ungrouped-imports)
modelsdefinition/IGTD.py:278:0: C0412: Imports from package dataloaders are not grouped (ungrouped-imports)
modelsdefinition/IGTD.py:279:0: C0412: Imports from package Scripts are not grouped (ungrouped-imports)
modelsdefinition/IGTD.py:280:0: C0412: Imports from package sklearn are not grouped (ungrouped-imports)
************* Module autodeep.modelsdefinition.TabTransformerModel
modelsdefinition/TabTransformerModel.py:1:0: C0114: Missing module docstring (missing-module-docstring)
modelsdefinition/TabTransformerModel.py:1:0: C0103: Module name "TabTransformerModel" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/TabTransformerModel.py:10:0: C0115: Missing class docstring (missing-class-docstring)
modelsdefinition/TabTransformerModel.py:64:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/TabTransformerModel.py:69:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
************* Module autodeep.modelsdefinition.XGBoostTrainer
modelsdefinition/XGBoostTrainer.py:226:0: C0301: Line too long (110/100) (line-too-long)
modelsdefinition/XGBoostTrainer.py:1:0: C0114: Missing module docstring (missing-module-docstring)
modelsdefinition/XGBoostTrainer.py:1:0: C0103: Module name "XGBoostTrainer" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/XGBoostTrainer.py:18:0: C0115: Missing class docstring (missing-class-docstring)
modelsdefinition/XGBoostTrainer.py:18:0: W0223: Method 'train' is abstract in class 'BaseModel' but is not overridden in child class 'XGBoostTrainer' (abstract-method)
modelsdefinition/XGBoostTrainer.py:18:0: R0902: Too many instance attributes (13/7) (too-many-instance-attributes)
modelsdefinition/XGBoostTrainer.py:20:4: W0231: __init__ method from base class 'BaseModel' is not called (super-init-not-called)
modelsdefinition/XGBoostTrainer.py:90:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/XGBoostTrainer.py:114:8: R1705: Unnecessary "else" after "return", remove the "else" and de-indent the code inside it (no-else-return)
modelsdefinition/XGBoostTrainer.py:120:14: C0103: Argument name "X" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/XGBoostTrainer.py:119:4: R0913: Too many arguments (8/5) (too-many-arguments)
modelsdefinition/XGBoostTrainer.py:119:4: R0917: Too many positional arguments (8/5) (too-many-positional-arguments)
modelsdefinition/XGBoostTrainer.py:119:4: R0914: Too many local variables (27/15) (too-many-locals)
modelsdefinition/XGBoostTrainer.py:151:8: C0103: Variable name "X_train" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/XGBoostTrainer.py:151:17: C0103: Variable name "X_val" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/XGBoostTrainer.py:161:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/XGBoostTrainer.py:181:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/XGBoostTrainer.py:190:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/XGBoostTrainer.py:224:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/XGBoostTrainer.py:225:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/XGBoostTrainer.py:119:4: R0915: Too many statements (53/50) (too-many-statements)
modelsdefinition/XGBoostTrainer.py:120:70: W0613: Unused argument 'extra_info' (unused-argument)
modelsdefinition/XGBoostTrainer.py:145:8: W0201: Attribute 'default_params' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/XGBoostTrainer.py:203:8: W0201: Attribute 'evaluator' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/XGBoostTrainer.py:222:8: W0201: Attribute 'best_model' defined outside __init__ (attribute-defined-outside-init)
************* Module autodeep.modelsdefinition.CategoryEmbeddingModel
modelsdefinition/CategoryEmbeddingModel.py:1:0: C0114: Missing module docstring (missing-module-docstring)
modelsdefinition/CategoryEmbeddingModel.py:1:0: C0103: Module name "CategoryEmbeddingModel" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/CategoryEmbeddingModel.py:10:0: C0115: Missing class docstring (missing-class-docstring)
modelsdefinition/CategoryEmbeddingModel.py:60:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/CategoryEmbeddingModel.py:65:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
************* Module autodeep.modelsdefinition.GANDALF
modelsdefinition/GANDALF.py:1:0: C0114: Missing module docstring (missing-module-docstring)
modelsdefinition/GANDALF.py:1:0: C0103: Module name "GANDALF" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/GANDALF.py:12:0: C0115: Missing class docstring (missing-class-docstring)
modelsdefinition/GANDALF.py:62:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/GANDALF.py:67:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/GANDALF.py:95:8: W0201: Attribute 'target_scaler' defined outside __init__ (attribute-defined-outside-init)
************* Module autodeep.modelsdefinition.ResNetModel
modelsdefinition/ResNetModel.py:75:0: C0301: Line too long (120/100) (line-too-long)
modelsdefinition/ResNetModel.py:209:0: C0301: Line too long (107/100) (line-too-long)
modelsdefinition/ResNetModel.py:243:0: C0301: Line too long (107/100) (line-too-long)
modelsdefinition/ResNetModel.py:323:0: C0301: Line too long (102/100) (line-too-long)
modelsdefinition/ResNetModel.py:649:0: C0301: Line too long (117/100) (line-too-long)
modelsdefinition/ResNetModel.py:724:0: C0301: Line too long (110/100) (line-too-long)
modelsdefinition/ResNetModel.py:783:0: C0301: Line too long (128/100) (line-too-long)
modelsdefinition/ResNetModel.py:1:0: C0114: Missing module docstring (missing-module-docstring)
modelsdefinition/ResNetModel.py:1:0: C0103: Module name "ResNetModel" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/ResNetModel.py:8:0: R0402: Use 'from torch import nn' instead (consider-using-from-import)
modelsdefinition/ResNetModel.py:9:0: R0402: Use 'from torch import optim' instead (consider-using-from-import)
modelsdefinition/ResNetModel.py:10:0: R0402: Use 'from torchvision import transforms' instead (consider-using-from-import)
modelsdefinition/ResNetModel.py:25:0: C0115: Missing class docstring (missing-class-docstring)
modelsdefinition/ResNetModel.py:51:8: R1725: Consider using Python 3 style super() without arguments (super-with-arguments)
modelsdefinition/ResNetModel.py:96:0: C0115: Missing class docstring (missing-class-docstring)
modelsdefinition/ResNetModel.py:96:0: R0902: Too many instance attributes (25/7) (too-many-instance-attributes)
modelsdefinition/ResNetModel.py:124:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/ResNetModel.py:150:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/ResNetModel.py:240:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/ResNetModel.py:260:12: W0612: Unused variable 'i' (unused-variable)
modelsdefinition/ResNetModel.py:327:14: C0103: Argument name "X_train" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/ResNetModel.py:326:4: R0913: Too many arguments (8/5) (too-many-arguments)
modelsdefinition/ResNetModel.py:326:4: R0917: Too many positional arguments (8/5) (too-many-positional-arguments)
modelsdefinition/ResNetModel.py:370:14: C0103: Argument name "X_train" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/ResNetModel.py:369:4: R0913: Too many arguments (6/5) (too-many-arguments)
modelsdefinition/ResNetModel.py:369:4: R0917: Too many positional arguments (6/5) (too-many-positional-arguments)
modelsdefinition/ResNetModel.py:472:48: W0613: Unused argument 'default_params' (unused-argument)
modelsdefinition/ResNetModel.py:526:14: C0103: Argument name "X" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/ResNetModel.py:525:4: R0913: Too many arguments (8/5) (too-many-arguments)
modelsdefinition/ResNetModel.py:525:4: R0917: Too many positional arguments (8/5) (too-many-positional-arguments)
modelsdefinition/ResNetModel.py:525:4: R0914: Too many local variables (25/15) (too-many-locals)
modelsdefinition/ResNetModel.py:558:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/ResNetModel.py:578:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/ResNetModel.py:581:8: R0914: Too many local variables (28/15) (too-many-locals)
modelsdefinition/ResNetModel.py:582:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/ResNetModel.py:583:12: C0103: Variable name "X_train" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/ResNetModel.py:583:21: C0103: Variable name "X_val" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/ResNetModel.py:687:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/ResNetModel.py:581:8: R0915: Too many statements (69/50) (too-many-statements)
modelsdefinition/ResNetModel.py:719:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/ResNetModel.py:722:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/ResNetModel.py:723:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/ResNetModel.py:525:4: R0915: Too many statements (115/50) (too-many-statements)
modelsdefinition/ResNetModel.py:728:22: C0103: Argument name "X_test" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/ResNetModel.py:790:8: R1705: Unnecessary "else" after "return", remove the "else" and de-indent the code inside it (no-else-return)
modelsdefinition/ResNetModel.py:124:16: E0203: Access to member 'logger' before its definition line 126 (access-member-before-definition)
modelsdefinition/ResNetModel.py:163:8: W0201: Attribute 'model' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/ResNetModel.py:620:12: W0201: Attribute 'model' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/ResNetModel.py:308:12: W0201: Attribute 'loss_fn' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/ResNetModel.py:318:12: W0201: Attribute 'loss_fn' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/ResNetModel.py:320:12: W0201: Attribute 'loss_fn' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/ResNetModel.py:487:12: W0201: Attribute 'optimizer' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/ResNetModel.py:493:12: W0201: Attribute 'optimizer' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/ResNetModel.py:499:12: W0201: Attribute 'optimizer' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/ResNetModel.py:505:12: W0201: Attribute 'scheduler' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/ResNetModel.py:511:12: W0201: Attribute 'scheduler' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/ResNetModel.py:515:12: W0201: Attribute 'scheduler' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/ResNetModel.py:552:8: W0201: Attribute 'default_params' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/ResNetModel.py:561:8: W0201: Attribute 'extra_info' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/ResNetModel.py:563:8: W0201: Attribute 'img_rows' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/ResNetModel.py:747:8: W0201: Attribute 'img_rows' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/ResNetModel.py:564:8: W0201: Attribute 'img_columns' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/ResNetModel.py:748:8: W0201: Attribute 'img_columns' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/ResNetModel.py:566:8: W0201: Attribute 'new_column_ordering' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/ResNetModel.py:750:8: W0201: Attribute 'new_column_ordering' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/ResNetModel.py:569:8: W0201: Attribute 'num_features' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/ResNetModel.py:571:12: W0201: Attribute 'num_targets' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/ResNetModel.py:573:12: W0201: Attribute 'num_targets' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/ResNetModel.py:575:12: W0201: Attribute 'num_targets' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/ResNetModel.py:700:8: W0201: Attribute 'evaluator' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/ResNetModel.py:720:8: W0201: Attribute 'best_model' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/ResNetModel.py:796:0: C0115: Missing class docstring (missing-class-docstring)
modelsdefinition/ResNetModel.py:798:4: R0913: Too many arguments (6/5) (too-many-arguments)
modelsdefinition/ResNetModel.py:798:4: R0917: Too many positional arguments (6/5) (too-many-positional-arguments)
modelsdefinition/ResNetModel.py:848:8: R1705: Unnecessary "else" after "return", remove the "else" and de-indent the code inside it (no-else-return)
************* Module autodeep.modelsdefinition.CommonStructure
modelsdefinition/CommonStructure.py:115:0: C0301: Line too long (109/100) (line-too-long)
modelsdefinition/CommonStructure.py:222:0: C0301: Line too long (132/100) (line-too-long)
modelsdefinition/CommonStructure.py:477:0: C0301: Line too long (110/100) (line-too-long)
modelsdefinition/CommonStructure.py:1:0: C0114: Missing module docstring (missing-module-docstring)
modelsdefinition/CommonStructure.py:1:0: C0103: Module name "CommonStructure" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/CommonStructure.py:10:0: R0402: Use 'from torch import nn' instead (consider-using-from-import)
modelsdefinition/CommonStructure.py:47:8: R1725: Consider using Python 3 style super() without arguments (super-with-arguments)
modelsdefinition/CommonStructure.py:48:8: W0105: String statement has no effect (pointless-string-statement)
modelsdefinition/CommonStructure.py:60:20: C0103: Argument name "X_train" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/CommonStructure.py:76:22: C0103: Argument name "X_test" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/CommonStructure.py:93:0: R0902: Too many instance attributes (18/7) (too-many-instance-attributes)
modelsdefinition/CommonStructure.py:128:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/CommonStructure.py:137:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/CommonStructure.py:173:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/CommonStructure.py:191:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/CommonStructure.py:273:22: C0103: Argument name "X_test" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/CommonStructure.py:293:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/CommonStructure.py:295:8: R1705: Unnecessary "else" after "return", remove the "else" and de-indent the code inside it (no-else-return)
modelsdefinition/CommonStructure.py:301:14: C0103: Argument name "X" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/CommonStructure.py:300:4: R0913: Too many arguments (8/5) (too-many-arguments)
modelsdefinition/CommonStructure.py:300:4: R0917: Too many positional arguments (8/5) (too-many-positional-arguments)
modelsdefinition/CommonStructure.py:300:4: R0914: Too many local variables (30/15) (too-many-locals)
modelsdefinition/CommonStructure.py:326:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/CommonStructure.py:344:8: C0103: Variable name "X_train" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/CommonStructure.py:344:17: C0103: Variable name "X_val" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/CommonStructure.py:347:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/CommonStructure.py:348:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/CommonStructure.py:349:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/CommonStructure.py:351:30: C0103: Argument name "X_train" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/CommonStructure.py:351:39: C0103: Argument name "X_val" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/CommonStructure.py:351:8: R0914: Too many local variables (17/15) (too-many-locals)
modelsdefinition/CommonStructure.py:353:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/CommonStructure.py:359:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/CommonStructure.py:360:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/CommonStructure.py:361:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/CommonStructure.py:362:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/CommonStructure.py:363:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/CommonStructure.py:364:20: E1101: Instance of 'PytorchTabularTrainer' has no 'prepare_tabular_model' member (no-member)
modelsdefinition/CommonStructure.py:368:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/CommonStructure.py:371:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/CommonStructure.py:376:19: W0718: Catching too general exception Exception (broad-exception-caught)
modelsdefinition/CommonStructure.py:379:21: W1514: Using open without explicitly specifying an encoding (unspecified-encoding)
modelsdefinition/CommonStructure.py:392:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/CommonStructure.py:466:47: E1101: Instance of 'PytorchTabularTrainer' has no 'model_name' member (no-member)
modelsdefinition/CommonStructure.py:471:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/CommonStructure.py:472:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/CommonStructure.py:475:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/CommonStructure.py:476:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/CommonStructure.py:300:4: R0915: Too many statements (95/50) (too-many-statements)
modelsdefinition/CommonStructure.py:217:12: W0201: Attribute 'loss_fn' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/CommonStructure.py:219:12: W0201: Attribute 'loss_fn' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/CommonStructure.py:330:8: W0201: Attribute 'default_params' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/CommonStructure.py:342:12: W0201: Attribute 'target_range' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/CommonStructure.py:416:8: W0201: Attribute 'evaluator' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/CommonStructure.py:473:8: W0201: Attribute 'best_model' defined outside __init__ (attribute-defined-outside-init)
************* Module autodeep.modelsdefinition.TabNetModel
modelsdefinition/TabNetModel.py:1:0: C0114: Missing module docstring (missing-module-docstring)
modelsdefinition/TabNetModel.py:1:0: C0103: Module name "TabNetModel" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/TabNetModel.py:10:0: C0115: Missing class docstring (missing-class-docstring)
modelsdefinition/TabNetModel.py:60:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/TabNetModel.py:65:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
************* Module autodeep.modelsdefinition.CatBoostModel
modelsdefinition/CatBoostModel.py:183:0: C0301: Line too long (106/100) (line-too-long)
modelsdefinition/CatBoostModel.py:245:0: C0301: Line too long (110/100) (line-too-long)
modelsdefinition/CatBoostModel.py:1:0: C0114: Missing module docstring (missing-module-docstring)
modelsdefinition/CatBoostModel.py:1:0: C0103: Module name "CatBoostModel" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/CatBoostModel.py:18:0: C0115: Missing class docstring (missing-class-docstring)
modelsdefinition/CatBoostModel.py:18:0: W0223: Method 'train' is abstract in class 'BaseModel' but is not overridden in child class 'CatBoostTrainer' (abstract-method)
modelsdefinition/CatBoostModel.py:18:0: R0902: Too many instance attributes (14/7) (too-many-instance-attributes)
modelsdefinition/CatBoostModel.py:20:4: W0231: __init__ method from base class 'BaseModel' is not called (super-init-not-called)
modelsdefinition/CatBoostModel.py:89:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/CatBoostModel.py:112:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/CatBoostModel.py:114:8: R1705: Unnecessary "else" after "return", remove the "else" and de-indent the code inside it (no-else-return)
modelsdefinition/CatBoostModel.py:120:14: C0103: Argument name "X" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/CatBoostModel.py:119:4: R0913: Too many arguments (8/5) (too-many-arguments)
modelsdefinition/CatBoostModel.py:119:4: R0917: Too many positional arguments (8/5) (too-many-positional-arguments)
modelsdefinition/CatBoostModel.py:119:4: R0914: Too many local variables (27/15) (too-many-locals)
modelsdefinition/CatBoostModel.py:154:8: C0103: Variable name "X_train" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/CatBoostModel.py:154:17: C0103: Variable name "X_val" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/CatBoostModel.py:160:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/CatBoostModel.py:202:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/CatBoostModel.py:211:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/CatBoostModel.py:243:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/CatBoostModel.py:244:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/CatBoostModel.py:119:4: R0915: Too many statements (61/50) (too-many-statements)
modelsdefinition/CatBoostModel.py:146:8: W0201: Attribute 'cat_features' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/CatBoostModel.py:147:8: W0201: Attribute 'default_params' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/CatBoostModel.py:153:8: W0201: Attribute 'num_targets' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/CatBoostModel.py:224:8: W0201: Attribute 'evaluator' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/CatBoostModel.py:239:8: W0201: Attribute 'best_model' defined outside __init__ (attribute-defined-outside-init)
************* Module autodeep.modelsdefinition.NodeModel
modelsdefinition/NodeModel.py:1:0: C0114: Missing module docstring (missing-module-docstring)
modelsdefinition/NodeModel.py:1:0: C0103: Module name "NodeModel" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/NodeModel.py:10:0: C0115: Missing class docstring (missing-class-docstring)
modelsdefinition/NodeModel.py:60:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/NodeModel.py:65:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
************* Module autodeep.modelsdefinition.AutomaticFeatureInteractionModel
modelsdefinition/AutomaticFeatureInteractionModel.py:1:0: C0114: Missing module docstring (missing-module-docstring)
modelsdefinition/AutomaticFeatureInteractionModel.py:1:0: C0103: Module name "AutomaticFeatureInteractionModel" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/AutomaticFeatureInteractionModel.py:10:0: C0115: Missing class docstring (missing-class-docstring)
modelsdefinition/AutomaticFeatureInteractionModel.py:64:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/AutomaticFeatureInteractionModel.py:69:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
************* Module autodeep.modelsdefinition.GATE
modelsdefinition/GATE.py:1:0: C0114: Missing module docstring (missing-module-docstring)
modelsdefinition/GATE.py:1:0: C0103: Module name "GATE" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/GATE.py:10:0: C0115: Missing class docstring (missing-class-docstring)
modelsdefinition/GATE.py:60:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/GATE.py:65:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
************* Module autodeep.automl
automl.py:1:0: C0114: Missing module docstring (missing-module-docstring)
automl.py:49:0: C0115: Missing class docstring (missing-class-docstring)
automl.py:49:0: R0902: Too many instance attributes (11/7) (too-many-instance-attributes)
automl.py:51:4: W0102: Dangerous default value DEFAULT_MODELS (builtins.list) as argument (dangerous-default-value)
automl.py:51:4: W0102: Dangerous default value DEFAULT_IGTD_CONFIG (builtins.dict) as argument (dangerous-default-value)
automl.py:51:4: R0913: Too many arguments (11/5) (too-many-arguments)
automl.py:51:4: R0917: Too many positional arguments (11/5) (too-many-positional-arguments)
automl.py:131:13: W1514: Using open without explicitly specifying an encoding (unspecified-encoding)
automl.py:150:4: R0914: Too many local variables (22/15) (too-many-locals)
automl.py:195:16: C0103: Variable name "X_train" doesn't conform to snake_case naming style (invalid-name)
automl.py:195:25: C0103: Variable name "X_test" doesn't conform to snake_case naming style (invalid-name)
automl.py:221:21: C0103: Argument name "X_train" doesn't conform to snake_case naming style (invalid-name)
automl.py:220:4: R0913: Too many arguments (7/5) (too-many-arguments)
automl.py:220:4: R0917: Too many positional arguments (7/5) (too-many-positional-arguments)
automl.py:245:8: R1720: Unnecessary "elif" after "raise", remove the leading "el" from "elif" (no-else-raise)
automl.py:260:38: C0103: Argument name "X_test" doesn't conform to snake_case naming style (invalid-name)
automl.py:308:4: R0913: Too many arguments (9/5) (too-many-arguments)
automl.py:308:4: R0917: Too many positional arguments (9/5) (too-many-positional-arguments)
automl.py:49:0: R0903: Too few public methods (1/2) (too-few-public-methods)
************* Module autodeep.evaluation.generalevaluator
evaluation/generalevaluator.py:1:0: C0114: Missing module docstring (missing-module-docstring)
evaluation/generalevaluator.py:16:0: C0115: Missing class docstring (missing-class-docstring)
evaluation/generalevaluator.py:18:4: R0913: Too many arguments (7/5) (too-many-arguments)
evaluation/generalevaluator.py:18:4: R0917: Too many positional arguments (7/5) (too-many-positional-arguments)
evaluation/generalevaluator.py:163:8: R1705: Unnecessary "elif" after "return", remove the leading "el" from "elif" (no-else-return)
evaluation/generalevaluator.py:203:8: R1705: Unnecessary "else" after "return", remove the "else" and de-indent the code inside it (no-else-return)
evaluation/generalevaluator.py:250:8: R1705: Unnecessary "elif" after "return", remove the leading "el" from "elif" (no-else-return)
evaluation/generalevaluator.py:257:4: R0912: Too many branches (14/12) (too-many-branches)
evaluation/generalevaluator.py:338:8: R1705: Unnecessary "else" after "return", remove the "else" and de-indent the code inside it (no-else-return)
evaluation/generalevaluator.py:302:4: R0911: Too many return statements (10/6) (too-many-return-statements)
************* Module autodeep.dataloaders.dataloader
dataloaders/dataloader.py:124:0: C0301: Line too long (169/100) (line-too-long)
dataloaders/dataloader.py:596:0: C0301: Line too long (137/100) (line-too-long)
dataloaders/dataloader.py:701:0: C0301: Line too long (107/100) (line-too-long)
dataloaders/dataloader.py:869:0: C0301: Line too long (101/100) (line-too-long)
dataloaders/dataloader.py:945:0: C0301: Line too long (106/100) (line-too-long)
dataloaders/dataloader.py:1024:0: C0301: Line too long (104/100) (line-too-long)
dataloaders/dataloader.py:1175:0: C0301: Line too long (101/100) (line-too-long)
dataloaders/dataloader.py:1352:0: C0301: Line too long (103/100) (line-too-long)
dataloaders/dataloader.py:1:0: C0302: Too many lines in module (1436/1000) (too-many-lines)
dataloaders/dataloader.py:1:0: C0114: Missing module docstring (missing-module-docstring)
dataloaders/dataloader.py:16:0: C0115: Missing class docstring (missing-class-docstring)
dataloaders/dataloader.py:16:0: R0902: Too many instance attributes (10/7) (too-many-instance-attributes)
dataloaders/dataloader.py:95:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
dataloaders/dataloader.py:103:39: C0103: Argument name "X" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:123:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
dataloaders/dataloader.py:128:18: C0103: Argument name "X" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:155:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
dataloaders/dataloader.py:159:12: W0201: Attribute 'result_file_name' defined outside __init__ (attribute-defined-outside-init)
dataloaders/dataloader.py:16:0: R0903: Too few public methods (1/2) (too-few-public-methods)
dataloaders/dataloader.py:176:0: C0115: Missing class docstring (missing-class-docstring)
dataloaders/dataloader.py:249:20: W0212: Access to a protected member _auto_determine_img_size of a client class (protected-access)
dataloaders/dataloader.py:252:17: W1514: Using open without explicitly specifying an encoding (unspecified-encoding)
dataloaders/dataloader.py:203:50: W0613: Unused argument 'dataset_name' (unused-argument)
dataloaders/dataloader.py:176:0: R0903: Too few public methods (1/2) (too-few-public-methods)
dataloaders/dataloader.py:265:0: C0115: Missing class docstring (missing-class-docstring)
dataloaders/dataloader.py:265:0: R0902: Too many instance attributes (8/7) (too-many-instance-attributes)
dataloaders/dataloader.py:267:4: R0913: Too many arguments (9/5) (too-many-arguments)
dataloaders/dataloader.py:267:4: R0917: Too many positional arguments (9/5) (too-many-positional-arguments)
dataloaders/dataloader.py:352:19: R1721: Unnecessary use of a comprehension, use list(range(bins)) instead. (unnecessary-comprehension)
dataloaders/dataloader.py:360:19: R1721: Unnecessary use of a comprehension, use list(range(bins)) instead. (unnecessary-comprehension)
dataloaders/dataloader.py:392:41: C0103: Argument name "X" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:406:8: C0415: Import outside toplevel (collections.Counter) (import-outside-toplevel)
dataloaders/dataloader.py:410:8: C0103: Variable name "balanced_X" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:415:12: C0103: Variable name "balanced_X" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:416:8: C0103: Variable name "balanced_X" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:421:29: C0103: Argument name "X_train" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:421:38: C0103: Argument name "X_test" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:452:4: W0102: Dangerous default value [] as argument (dangerous-default-value)
dataloaders/dataloader.py:474:0: C0115: Missing class docstring (missing-class-docstring)
dataloaders/dataloader.py:474:0: R0902: Too many instance attributes (16/7) (too-many-instance-attributes)
dataloaders/dataloader.py:476:4: W0231: __init__ method from base class 'DataLoader' is not called (super-init-not-called)
dataloaders/dataloader.py:476:4: R0913: Too many arguments (16/5) (too-many-arguments)
dataloaders/dataloader.py:476:4: R0917: Too many positional arguments (16/5) (too-many-positional-arguments)
dataloaders/dataloader.py:476:4: R0914: Too many local variables (16/15) (too-many-locals)
dataloaders/dataloader.py:584:8: C0103: Variable name "X" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:587:12: C0103: Variable name "X" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:600:12: C0103: Variable name "X_train" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:600:21: C0103: Variable name "X_test" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:603:12: C0103: Variable name "X_train" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:603:21: C0103: Variable name "X_test" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:611:12: C0103: Variable name "X_train" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:611:21: C0103: Variable name "X_test" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:622:0: C0115: Missing class docstring (missing-class-docstring)
dataloaders/dataloader.py:624:4: W0231: __init__ method from base class 'DataLoader' is not called (super-init-not-called)
dataloaders/dataloader.py:624:4: R0913: Too many arguments (7/5) (too-many-arguments)
dataloaders/dataloader.py:624:4: R0917: Too many positional arguments (7/5) (too-many-positional-arguments)
dataloaders/dataloader.py:690:8: C0103: Variable name "X_train" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:691:8: C0103: Variable name "X_test" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:694:8: C0103: Variable name "X_train" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:694:17: C0103: Variable name "X_test" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:697:25: E1101: Instance of 'KaggleAgeConditionsLoader' has no 'create_extra_info' member (no-member)
dataloaders/dataloader.py:706:0: C0115: Missing class docstring (missing-class-docstring)
dataloaders/dataloader.py:708:4: W0231: __init__ method from base class 'DataLoader' is not called (super-init-not-called)
dataloaders/dataloader.py:708:4: R0913: Too many arguments (7/5) (too-many-arguments)
dataloaders/dataloader.py:708:4: R0917: Too many positional arguments (7/5) (too-many-positional-arguments)
dataloaders/dataloader.py:767:8: C0103: Variable name "X_train" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:768:8: C0103: Variable name "X_test" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:771:8: C0103: Variable name "X_train" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:771:17: C0103: Variable name "X_test" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:776:25: E1101: Instance of 'BufixDataLoader' has no 'create_extra_info' member (no-member)
dataloaders/dataloader.py:785:0: C0115: Missing class docstring (missing-class-docstring)
dataloaders/dataloader.py:787:4: W0231: __init__ method from base class 'DataLoader' is not called (super-init-not-called)
dataloaders/dataloader.py:787:4: R0913: Too many arguments (7/5) (too-many-arguments)
dataloaders/dataloader.py:787:4: R0917: Too many positional arguments (7/5) (too-many-positional-arguments)
dataloaders/dataloader.py:856:8: C0103: Variable name "X_train" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:858:8: C0103: Variable name "X_test" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:860:8: C0103: Variable name "X_train" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:860:17: C0103: Variable name "X_test" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:865:25: E1101: Instance of 'TitanicDataLoader' has no 'create_extra_info' member (no-member)
dataloaders/dataloader.py:874:0: C0115: Missing class docstring (missing-class-docstring)
dataloaders/dataloader.py:876:4: W0231: __init__ method from base class 'DataLoader' is not called (super-init-not-called)
dataloaders/dataloader.py:876:4: R0913: Too many arguments (7/5) (too-many-arguments)
dataloaders/dataloader.py:876:4: R0917: Too many positional arguments (7/5) (too-many-positional-arguments)
dataloaders/dataloader.py:924:26: E1101: Instance of 'tuple' has no 'data' member (no-member)
dataloaders/dataloader.py:924:45: E1101: Instance of 'tuple' has no 'feature_names' member (no-member)
dataloaders/dataloader.py:925:33: E1101: Instance of 'tuple' has no 'target' member (no-member)
dataloaders/dataloader.py:932:8: C0103: Variable name "X_train" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:934:8: C0103: Variable name "X_test" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:936:8: C0103: Variable name "X_train" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:936:17: C0103: Variable name "X_test" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:941:25: E1101: Instance of 'BreastCancerDataLoader' has no 'create_extra_info' member (no-member)
dataloaders/dataloader.py:950:0: C0115: Missing class docstring (missing-class-docstring)
dataloaders/dataloader.py:952:4: W0231: __init__ method from base class 'DataLoader' is not called (super-init-not-called)
dataloaders/dataloader.py:952:4: R0913: Too many arguments (7/5) (too-many-arguments)
dataloaders/dataloader.py:952:4: R0917: Too many positional arguments (7/5) (too-many-positional-arguments)
dataloaders/dataloader.py:1011:8: C0103: Variable name "X_train" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:1013:8: C0103: Variable name "X_test" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:1015:8: C0103: Variable name "X_train" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:1015:17: C0103: Variable name "X_test" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:1020:25: E1101: Instance of 'CreditDataLoader' has no 'create_extra_info' member (no-member)
dataloaders/dataloader.py:1029:0: C0115: Missing class docstring (missing-class-docstring)
dataloaders/dataloader.py:1031:4: W0231: __init__ method from base class 'DataLoader' is not called (super-init-not-called)
dataloaders/dataloader.py:1031:4: R0913: Too many arguments (7/5) (too-many-arguments)
dataloaders/dataloader.py:1031:4: R0917: Too many positional arguments (7/5) (too-many-positional-arguments)
dataloaders/dataloader.py:1079:26: E1101: Instance of 'tuple' has no 'data' member (no-member)
dataloaders/dataloader.py:1079:45: E1101: Instance of 'tuple' has no 'feature_names' member (no-member)
dataloaders/dataloader.py:1080:33: E1101: Instance of 'tuple' has no 'target' member (no-member)
dataloaders/dataloader.py:1087:8: C0103: Variable name "X_train" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:1089:8: C0103: Variable name "X_test" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:1091:8: C0103: Variable name "X_train" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:1091:17: C0103: Variable name "X_test" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:1096:25: E1101: Instance of 'IrisDataLoader' has no 'create_extra_info' member (no-member)
dataloaders/dataloader.py:1105:0: C0115: Missing class docstring (missing-class-docstring)
dataloaders/dataloader.py:1107:4: W0231: __init__ method from base class 'DataLoader' is not called (super-init-not-called)
dataloaders/dataloader.py:1107:4: R0913: Too many arguments (7/5) (too-many-arguments)
dataloaders/dataloader.py:1107:4: R0917: Too many positional arguments (7/5) (too-many-positional-arguments)
dataloaders/dataloader.py:1155:26: E1101: Instance of 'tuple' has no 'data' member (no-member)
dataloaders/dataloader.py:1155:45: E1101: Instance of 'tuple' has no 'feature_names' member (no-member)
dataloaders/dataloader.py:1157:33: E1101: Instance of 'tuple' has no 'target' member (no-member)
dataloaders/dataloader.py:1162:8: C0103: Variable name "X_train" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:1164:8: C0103: Variable name "X_test" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:1166:8: C0103: Variable name "X_train" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:1166:17: C0103: Variable name "X_test" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:1171:25: E1101: Instance of 'CaliforniaHousingDataLoader' has no 'create_extra_info' member (no-member)
dataloaders/dataloader.py:1180:0: C0115: Missing class docstring (missing-class-docstring)
dataloaders/dataloader.py:1182:4: W0231: __init__ method from base class 'DataLoader' is not called (super-init-not-called)
dataloaders/dataloader.py:1182:4: R0913: Too many arguments (7/5) (too-many-arguments)
dataloaders/dataloader.py:1182:4: R0917: Too many positional arguments (7/5) (too-many-positional-arguments)
dataloaders/dataloader.py:1262:8: C0103: Variable name "X_train" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:1264:8: C0103: Variable name "X_test" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:1266:8: C0103: Variable name "X_train" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:1266:17: C0103: Variable name "X_test" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:1271:25: E1101: Instance of 'AdultDataLoader' has no 'create_extra_info' member (no-member)
dataloaders/dataloader.py:1280:0: C0115: Missing class docstring (missing-class-docstring)
dataloaders/dataloader.py:1282:4: W0231: __init__ method from base class 'DataLoader' is not called (super-init-not-called)
dataloaders/dataloader.py:1282:4: R0913: Too many arguments (7/5) (too-many-arguments)
dataloaders/dataloader.py:1282:4: R0917: Too many positional arguments (7/5) (too-many-positional-arguments)
dataloaders/dataloader.py:1339:8: C0103: Variable name "X_train" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:1341:8: C0103: Variable name "X_test" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:1343:8: C0103: Variable name "X_train" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:1343:17: C0103: Variable name "X_test" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:1348:25: E1101: Instance of 'CoverTypeDataLoader' has no 'create_extra_info' member (no-member)
dataloaders/dataloader.py:1357:0: C0115: Missing class docstring (missing-class-docstring)
dataloaders/dataloader.py:1359:4: W0231: __init__ method from base class 'DataLoader' is not called (super-init-not-called)
dataloaders/dataloader.py:1359:4: R0913: Too many arguments (7/5) (too-many-arguments)
dataloaders/dataloader.py:1359:4: R0917: Too many positional arguments (7/5) (too-many-positional-arguments)
dataloaders/dataloader.py:1421:8: C0103: Variable name "X_train" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:1423:8: C0103: Variable name "X_test" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:1425:8: C0103: Variable name "X_train" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:1425:17: C0103: Variable name "X_test" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:1430:25: E1101: Instance of 'HelocDataLoader' has no 'create_extra_info' member (no-member)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.ResNetModel:[180:306]
==autodeep.modelsdefinition.SoftOrdering1DCNN:[206:332]
        return model

    def process_inputs_labels_training(self, inputs, labels):
        """process_inputs_labels_training

        Args:
        self : type
            Description
        inputs : type
            Description
        labels : type
            Description

        Returns:
            type: Description
        """
        inputs, labels = inputs.to(self.device), labels.to(self.device)
        if self.problem_type == "binary_classification":
            outputs = self.model(inputs).reshape(-1)
            labels = labels.float()
        elif self.problem_type == "regression":
            outputs = self.model(inputs).reshape(-1)
            labels = labels.float()
        elif self.problem_type == "multiclass_classification":
            labels = labels.long()
            outputs = self.model(inputs)
        else:
            raise ValueError(
                "Invalid problem_type. Supported options: binary_classification, multiclass_classification"
            )
        return outputs, labels

    def process_inputs_labels_prediction(self, inputs, labels):
        """process_inputs_labels_prediction

        Args:
        self : type
            Description
        inputs : type
            Description
        labels : type
            Description

        Returns:
            type: Description
        """
        inputs, labels = inputs.to(self.device), labels.to(self.device)
        probabilities = None
        if self.problem_type == "binary_classification":
            probabilities = torch.sigmoid(self.model(inputs)).reshape(-1)
            predictions = (probabilities >= 0.5).float()
            probabilities = probabilities.cpu().numpy()
            labels = labels.float()
        elif self.problem_type == "regression":
            predictions = self.model(inputs).reshape(-1)
            labels = labels.float()
        elif self.problem_type == "multiclass_classification":
            labels = labels.long()
            _, predictions = torch.max(self.model(inputs), dim=1)
            self.logger.debug(f"multiclass predictions {predictions[:10]}")
        else:
            raise ValueError(
                "Invalid problem_type. Supported options: binary_classification, multiclass_classification"
            )
        return predictions.cpu().numpy(), labels.cpu().numpy(), probabilities

    def train_step(self, train_loader):
        """train_step

        Args:
        self : type
            Description
        train_loader : type
            Description

        Returns:
            type: Description
        """
        running_loss = 0.0
        for i, (inputs, labels) in enumerate(train_loader):
            outputs, labels = self.process_inputs_labels_training(inputs, labels)
            self.optimizer.zero_grad()
            loss = self.loss_fn(outputs, labels)
            loss.backward()
            self.optimizer.step()
            running_loss += loss.item()
        return running_loss / len(train_loader)

    def validate_step(self, validation_loader):
        """validate_step

        Args:
        self : type
            Description
        validation_loader : type
            Description

        Returns:
            type: Description
        """
        self.model.eval()
        val_loss = 0.0
        total_samples = 0
        with torch.no_grad():
            for inputs, labels in validation_loader:
                outputs, labels = self.process_inputs_labels_training(inputs, labels)
                loss = self.loss_fn(outputs, labels)
                val_loss += loss.item() * inputs.size(0)
                total_samples += inputs.size(0)
        return val_loss / total_samples

    def _set_loss_function(self, y_train):
        """_set_loss_function

        Args:
        self : type
            Description
        y_train : type
            Description

        Returns:
            type: Description
        """
        if self.problem_type == "binary_classification":
            num_positives = y_train.sum()
            num_negatives = len(y_train) - num_positives (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==igtd_notebooks.preprocess_tabs_ageconditions:[24:66]
==igtd_notebooks.preprocess_tabs_titanic:[24:66]
num_col = 7
num = num_row * num_col
save_image_size = 3
fea_dist_method = "Euclidean"
image_dist_method = "Euclidean"
error = "abs"
result_dir = f"./modelsdefinition/IGTD/results/{dataset_name}_igtd_{fea_dist_method}_{image_dist_method}"
max_step = 1000000
val_step = 1000
min_gain = 0.01
os.makedirs(name=result_dir, exist_ok=True)
table_to_image(
    X_train,
    [num_row, num_col],
    fea_dist_method,
    image_dist_method,
    save_image_size,
    max_step,
    val_step,
    result_dir,
    error,
    min_gain=min_gain,
    save_mode="bulk",
    exclude_cols=exclude_cols,
)
fea_dist_method = "Pearson"
image_dist_method = "Manhattan"
error = "squared"
result_dir = f"./modelsdefinition/IGTD/results/{dataset_name}_igtd_{fea_dist_method}_{image_dist_method}"
os.makedirs(name=result_dir, exist_ok=True)
table_to_image(
    X_train,
    [num_row, num_col],
    fea_dist_method,
    image_dist_method,
    save_image_size,
    max_step,
    val_step,
    result_dir,
    error,
    min_gain=min_gain,
) (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==igtd_notebooks.preprocess_tabs_creditcard:[25:66]
==igtd_notebooks.preprocess_tabs_diabetes:[26:67]
num = num_row * num_col
save_image_size = 3
fea_dist_method = "Euclidean"
image_dist_method = "Euclidean"
error = "abs"
result_dir = f"./modelsdefinition/IGTD/results/{dataset_name}_igtd_{fea_dist_method}_{image_dist_method}"
max_step = 1000000
val_step = 1000
min_gain = 0.01
os.makedirs(name=result_dir, exist_ok=True)
table_to_image(
    X_train,
    [num_row, num_col],
    fea_dist_method,
    image_dist_method,
    save_image_size,
    max_step,
    val_step,
    result_dir,
    error,
    min_gain=min_gain,
    save_mode="bulk",
    exclude_cols=exclude_cols,
)
fea_dist_method = "Pearson"
image_dist_method = "Manhattan"
error = "squared"
result_dir = f"./modelsdefinition/IGTD/results/{dataset_name}_igtd_{fea_dist_method}_{image_dist_method}"
os.makedirs(name=result_dir, exist_ok=True)
table_to_image(
    X_train,
    [num_row, num_col],
    fea_dist_method,
    image_dist_method,
    save_image_size,
    max_step,
    val_step,
    result_dir,
    error,
    min_gain=min_gain,
) (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==igtd_notebooks.preprocess_tabs_iris:[25:66]
==igtd_notebooks.preprocess_tabs_titanic:[25:66]
num = num_row * num_col
save_image_size = 3
fea_dist_method = "Euclidean"
image_dist_method = "Euclidean"
error = "abs"
result_dir = f"./modelsdefinition/IGTD/results/{dataset_name}_igtd_{fea_dist_method}_{image_dist_method}"
max_step = 1000000
val_step = 1000
min_gain = 0.01
os.makedirs(name=result_dir, exist_ok=True)
table_to_image(
    X_train,
    [num_row, num_col],
    fea_dist_method,
    image_dist_method,
    save_image_size,
    max_step,
    val_step,
    result_dir,
    error,
    min_gain=min_gain,
    save_mode="bulk",
    exclude_cols=exclude_cols,
)
fea_dist_method = "Pearson"
image_dist_method = "Manhattan"
error = "squared"
result_dir = f"./modelsdefinition/IGTD/results/{dataset_name}_igtd_{fea_dist_method}_{image_dist_method}"
os.makedirs(name=result_dir, exist_ok=True)
table_to_image(
    X_train,
    [num_row, num_col],
    fea_dist_method,
    image_dist_method,
    save_image_size,
    max_step,
    val_step,
    result_dir,
    error,
    min_gain=min_gain,
) (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==igtd_notebooks.preprocess_tabs_adult:[25:66]
==igtd_notebooks.preprocess_tabs_breastcancer:[25:66]
num = num_row * num_col
save_image_size = 3
fea_dist_method = "Euclidean"
image_dist_method = "Euclidean"
error = "abs"
result_dir = f"./modelsdefinition/IGTD/results/{dataset_name}_igtd_{fea_dist_method}_{image_dist_method}"
max_step = 1000000
val_step = 1000
min_gain = 0.01
os.makedirs(name=result_dir, exist_ok=True)
table_to_image(
    X_train,
    [num_row, num_col],
    fea_dist_method,
    image_dist_method,
    save_image_size,
    max_step,
    val_step,
    result_dir,
    error,
    min_gain=min_gain,
    save_mode="bulk",
    exclude_cols=exclude_cols,
)
fea_dist_method = "Pearson"
image_dist_method = "Manhattan"
error = "squared"
result_dir = f"./modelsdefinition/IGTD/results/{dataset_name}_igtd_{fea_dist_method}_{image_dist_method}"
os.makedirs(name=result_dir, exist_ok=True)
table_to_image(
    X_train,
    [num_row, num_col],
    fea_dist_method,
    image_dist_method,
    save_image_size,
    max_step,
    val_step,
    result_dir,
    error,
    min_gain=min_gain,
) (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==igtd_notebooks.preprocess_tabs_ageconditions:[25:66]
==igtd_notebooks.preprocess_tabs_covertype:[25:66]
num = num_row * num_col
save_image_size = 3
fea_dist_method = "Euclidean"
image_dist_method = "Euclidean"
error = "abs"
result_dir = f"./modelsdefinition/IGTD/results/{dataset_name}_igtd_{fea_dist_method}_{image_dist_method}"
max_step = 1000000
val_step = 1000
min_gain = 0.01
os.makedirs(name=result_dir, exist_ok=True)
table_to_image(
    X_train,
    [num_row, num_col],
    fea_dist_method,
    image_dist_method,
    save_image_size,
    max_step,
    val_step,
    result_dir,
    error,
    min_gain=min_gain,
    save_mode="bulk",
    exclude_cols=exclude_cols,
)
fea_dist_method = "Pearson"
image_dist_method = "Manhattan"
error = "squared"
result_dir = f"./modelsdefinition/IGTD/results/{dataset_name}_igtd_{fea_dist_method}_{image_dist_method}"
os.makedirs(name=result_dir, exist_ok=True)
table_to_image(
    X_train,
    [num_row, num_col],
    fea_dist_method,
    image_dist_method,
    save_image_size,
    max_step,
    val_step,
    result_dir,
    error,
    min_gain=min_gain,
) (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==igtd_notebooks.preprocess_tabs_heloc:[25:66]
==igtd_notebooks.preprocess_tabs_housing:[25:66]
num = num_row * num_col
save_image_size = 3
fea_dist_method = "Euclidean"
image_dist_method = "Euclidean"
error = "abs"
result_dir = f"./modelsdefinition/IGTD/results/{dataset_name}_igtd_{fea_dist_method}_{image_dist_method}"
max_step = 1000000
val_step = 1000
min_gain = 0.01
os.makedirs(name=result_dir, exist_ok=True)
table_to_image(
    X_train,
    [num_row, num_col],
    fea_dist_method,
    image_dist_method,
    save_image_size,
    max_step,
    val_step,
    result_dir,
    error,
    min_gain=min_gain,
    save_mode="bulk",
    exclude_cols=exclude_cols,
)
fea_dist_method = "Pearson"
image_dist_method = "Manhattan"
error = "squared"
result_dir = f"./modelsdefinition/IGTD/results/{dataset_name}_igtd_{fea_dist_method}_{image_dist_method}"
os.makedirs(name=result_dir, exist_ok=True)
table_to_image(
    X_train,
    [num_row, num_col],
    fea_dist_method,
    image_dist_method,
    save_image_size,
    max_step,
    val_step,
    result_dir,
    error,
    min_gain=min_gain,
) (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.CatBoostModel:[203:238]
==autodeep.modelsdefinition.XGBoostTrainer:[182:217]
            probabilities = None
            if self.problem_type != "regression":
                probabilities = model.predict_proba(X_train)[:, 1]
            self.evaluator.y_true = y_train
            self.evaluator.y_pred = y_pred
            self.evaluator.y_prob = probabilities
            metrics_for_split_train = self.evaluator.evaluate_model()
            self.logger.info(f"Train metrics: {metrics_for_split_val}")
            if self.evaluator.maximize[metric][0]:
                score = -1 * score
            return {
                "loss": score,
                "params": params,
                "status": STATUS_OK,
                "trained_model": model,
                "train_metrics": metrics_for_split_train,
                "validation_metrics": metrics_for_split_val,
            }

        trials = Trials()
        self.evaluator = Evaluator(problem_type=self.problem_type)
        threshold = float(-1.0 * self.evaluator.maximize[metric][1])
        best = fmin(
            objective,
            space=space,
            algo=tpe.suggest,
            max_evals=max_evals,
            trials=trials,
            rstate=np.random.default_rng(self.random_state),
            early_stop_fn=lambda x: stop_on_perfect_lossCondition(x, threshold),
        )
        best_params = space_eval(space, best)
        best_params["default_params"] = self.default_params
        best_trial = trials.best_trial
        best_score = best_trial["result"]["loss"] (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.ResNetModel:[758:787]
==autodeep.modelsdefinition.SoftOrdering1DCNN:[727:756]
        test_loader = DataLoader(
            test_dataset,
            batch_size=batch_size,
            shuffle=False,
            num_workers=self.num_workers,
            pin_memory=True,
        )
        predictions = []
        probabilities = []
        with torch.no_grad():
            for inputs in test_loader:
                inputs = inputs.to(self.device)
                outputs = self.model(inputs)
                if self.problem_type == "binary_classification":
                    probs = torch.sigmoid(outputs).cpu().numpy().reshape(-1)
                    preds = (probs >= 0.5).astype(int)
                    probabilities.extend(probs)
                elif self.problem_type == "multiclass_classification":
                    _, preds = torch.max(outputs, 1)
                    preds = preds.cpu().numpy()
                elif self.problem_type == "regression":
                    preds = outputs.cpu().numpy()
                else:
                    raise ValueError(
                        "Invalid problem_type. Supported options: binary_classification, multiclass_classification, regression."
                    )
                predictions.extend(preds)
        self.logger.debug("Model predicting success")
        predictions = np.array(predictions).squeeze() (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.MLP:[223:252]
==autodeep.modelsdefinition.XGBoostTrainer:[192:221]
            return {
                "loss": score,
                "params": params,
                "status": STATUS_OK,
                "trained_model": model,
                "train_metrics": metrics_for_split_train,
                "validation_metrics": metrics_for_split_val,
            }

        trials = Trials()
        self.evaluator = Evaluator(problem_type=self.problem_type)
        threshold = float(-1.0 * self.evaluator.maximize[metric][1])
        best = fmin(
            objective,
            space=space,
            algo=tpe.suggest,
            max_evals=max_evals,
            trials=trials,
            rstate=np.random.default_rng(self.random_state),
            early_stop_fn=lambda x: stop_on_perfect_lossCondition(x, threshold),
        )
        best_params = space_eval(space, best)
        best_params["default_params"] = self.default_params
        best_trial = trials.best_trial
        best_score = best_trial["result"]["loss"]
        if self.evaluator.maximize[metric][0]:
            best_score = -1 * best_score
        train_metrics = best_trial["result"]["train_metrics"]
        validation_metrics = best_trial["result"]["validation_metrics"] (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.ResNetModel:[397:485]
==autodeep.modelsdefinition.SoftOrdering1DCNN:[408:494]
        return dataset

    def _torch_image_datasets_to_dataloaders(
        self, train_dataset, val_dataset, batch_size
    ):
        """_torch_image_datasets_to_dataloaders

        Args:
        self : type
            Description
        train_dataset : type
            Description
        val_dataset : type
            Description
        batch_size : type
            Description

        Returns:
            type: Description
        """
        train_loader = DataLoader(
            train_dataset,
            batch_size=batch_size,
            shuffle=True,
            drop_last=False,
            num_workers=self.num_workers,
            pin_memory=True,
        )
        val_loader = DataLoader(
            val_dataset,
            batch_size=batch_size,
            shuffle=False,
            drop_last=False,
            num_workers=self.num_workers,
            pin_memory=True,
        )
        return train_loader, val_loader

    def _load_model(self, model_path):
        """_load_model

        Args:
        self : type
            Description
        model_path : type
            Description

        Returns:
            type: Description
        """
        if not os.path.isfile(model_path):
            raise FileNotFoundError(f"Model file not found at {model_path}")
        self.model.load_state_dict(torch.load(model_path, map_location=self.device))
        self.model.eval()
        print(f"Model loaded successfully from {model_path}")

    def _save_model(self, model_dir, model_name):
        """_save_model

        Args:
        self : type
            Description
        model_dir : type
            Description
        model_name : type
            Description

        Returns:
            type: Description
        """
        save_path = os.path.join(model_dir, model_name)
        torch.save(self.model.state_dict(), save_path)
        print(f"Model saved successfully at {save_path}")

    def _set_optimizer_schedulers(self, params, default_params: Optional[Dict] = None):
        """_set_optimizer_schedulers

        Args:
        self : type
            Description
        params : type
            Description
        default_params : type
            Description

        Returns:
            type: Description
        """ (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.CatBoostModel:[213:238]
==autodeep.modelsdefinition.MLP:[223:248]
            return {
                "loss": score,
                "params": params,
                "status": STATUS_OK,
                "trained_model": model,
                "train_metrics": metrics_for_split_train,
                "validation_metrics": metrics_for_split_val,
            }

        trials = Trials()
        self.evaluator = Evaluator(problem_type=self.problem_type)
        threshold = float(-1.0 * self.evaluator.maximize[metric][1])
        best = fmin(
            objective,
            space=space,
            algo=tpe.suggest,
            max_evals=max_evals,
            trials=trials,
            rstate=np.random.default_rng(self.random_state),
            early_stop_fn=lambda x: stop_on_perfect_lossCondition(x, threshold),
        )
        best_params = space_eval(space, best)
        best_params["default_params"] = self.default_params
        best_trial = trials.best_trial
        best_score = best_trial["result"]["loss"] (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.MLP:[228:252]
==autodeep.modelsdefinition.ResNetModel:[694:718]
                "train_metrics": metrics_for_split_train,
                "validation_metrics": metrics_for_split_val,
            }

        trials = Trials()
        self.evaluator = Evaluator(problem_type=self.problem_type)
        threshold = float(-1.0 * self.evaluator.maximize[metric][1])
        best = fmin(
            objective,
            space=space,
            algo=tpe.suggest,
            max_evals=max_evals,
            trials=trials,
            rstate=np.random.default_rng(self.random_state),
            early_stop_fn=lambda x: stop_on_perfect_lossCondition(x, threshold),
        )
        best_params = space_eval(space, best)
        best_params["default_params"] = self.default_params
        best_trial = trials.best_trial
        best_score = best_trial["result"]["loss"]
        if self.evaluator.maximize[metric][0]:
            best_score = -1 * best_score
        train_metrics = best_trial["result"]["train_metrics"]
        validation_metrics = best_trial["result"]["validation_metrics"] (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.ResNetModel:[124:147]
==autodeep.modelsdefinition.SoftOrdering1DCNN:[147:170]
        self.transformation = None
        self.logger = logging.getLogger(__name__)
        self.logger.setLevel(logging.DEBUG)
        self.random_state = 4200
        self.script_filename = os.path.basename(__file__)
        formatter = logging.Formatter(
            f"%(asctime)s - %(levelname)s - {self.script_filename} - %(message)s"
        )
        console_handler = logging.StreamHandler()
        console_handler.setLevel(logging.INFO)
        console_handler.setFormatter(formatter)
        if not any(
            isinstance(handler, logging.StreamHandler)
            for handler in self.logger.handlers
        ):
            self.logger.addHandler(console_handler)
        file_handler = logging.FileHandler("logfile.log")
        file_handler.setLevel(logging.DEBUG)
        file_handler.setFormatter(formatter)
        if not any(
            isinstance(handler, logging.FileHandler) for handler in self.logger.handlers
        ):
            self.logger.addHandler(file_handler) (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.MLP:[34:56]
==autodeep.modelsdefinition.SoftOrdering1DCNN:[148:170]
        self.logger = logging.getLogger(__name__)
        self.logger.setLevel(logging.DEBUG)
        self.random_state = 4200
        self.script_filename = os.path.basename(__file__)
        formatter = logging.Formatter(
            f"%(asctime)s - %(levelname)s - {self.script_filename} - %(message)s"
        )
        console_handler = logging.StreamHandler()
        console_handler.setLevel(logging.INFO)
        console_handler.setFormatter(formatter)
        if not any(
            isinstance(handler, logging.StreamHandler)
            for handler in self.logger.handlers
        ):
            self.logger.addHandler(console_handler)
        file_handler = logging.FileHandler("logfile.log")
        file_handler.setLevel(logging.DEBUG)
        file_handler.setFormatter(formatter)
        if not any(
            isinstance(handler, logging.FileHandler) for handler in self.logger.handlers
        ):
            self.logger.addHandler(file_handler) (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.CatBoostModel:[218:238]
==autodeep.modelsdefinition.ResNetModel:[694:714]
                "train_metrics": metrics_for_split_train,
                "validation_metrics": metrics_for_split_val,
            }

        trials = Trials()
        self.evaluator = Evaluator(problem_type=self.problem_type)
        threshold = float(-1.0 * self.evaluator.maximize[metric][1])
        best = fmin(
            objective,
            space=space,
            algo=tpe.suggest,
            max_evals=max_evals,
            trials=trials,
            rstate=np.random.default_rng(self.random_state),
            early_stop_fn=lambda x: stop_on_perfect_lossCondition(x, threshold),
        )
        best_params = space_eval(space, best)
        best_params["default_params"] = self.default_params
        best_trial = trials.best_trial
        best_score = best_trial["result"]["loss"] (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.MLP:[38:57]
==autodeep.modelsdefinition.XGBoostTrainer:[38:57]
        formatter = logging.Formatter(
            f"%(asctime)s - %(levelname)s - {self.script_filename} - %(message)s"
        )
        console_handler = logging.StreamHandler()
        console_handler.setLevel(logging.INFO)
        console_handler.setFormatter(formatter)
        if not any(
            isinstance(handler, logging.StreamHandler)
            for handler in self.logger.handlers
        ):
            self.logger.addHandler(console_handler)
        file_handler = logging.FileHandler("logfile.log")
        file_handler.setLevel(logging.DEBUG)
        file_handler.setFormatter(formatter)
        if not any(
            isinstance(handler, logging.FileHandler) for handler in self.logger.handlers
        ):
            self.logger.addHandler(file_handler)
        self.extra_info = None (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.MLP:[230:250]
==autodeep.modelsdefinition.SoftOrdering1DCNN:[678:698]
            }

        trials = Trials()
        self.evaluator = Evaluator(problem_type=self.problem_type)
        threshold = float(-1.0 * self.evaluator.maximize[metric][1])
        best = fmin(
            objective,
            space=space,
            algo=tpe.suggest,
            max_evals=max_evals,
            trials=trials,
            rstate=np.random.default_rng(self.random_state),
            early_stop_fn=lambda x: stop_on_perfect_lossCondition(x, threshold),
        )
        best_params = space_eval(space, best)
        best_params["default_params"] = self.default_params
        best_trial = trials.best_trial
        best_score = best_trial["result"]["loss"]
        if self.evaluator.maximize[metric][0]:
            best_score = -1 * best_score (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.automl:[27:45]
==autodeep.dataloaders.dataloader:[43:61]
    "img_size": "auto",
    "save_image_size": 3,
    "max_step": 1000000,
    "val_step": 1000,
    "min_gain": 0.01,
    "ordering_methods": {
        "Euclidean_Euclidean": {
            "fea_dist_method": "Euclidean",
            "image_dist_method": "Euclidean",
            "error": "abs",
        },
        "Pearson_Manhattan": {
            "fea_dist_method": "Pearson",
            "image_dist_method": "Manhattan",
            "error": "squared",
        },
    },
} (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.CatBoostModel:[37:55]
==autodeep.modelsdefinition.MLP:[38:56]
        formatter = logging.Formatter(
            f"%(asctime)s - %(levelname)s - {self.script_filename} - %(message)s"
        )
        console_handler = logging.StreamHandler()
        console_handler.setLevel(logging.INFO)
        console_handler.setFormatter(formatter)
        if not any(
            isinstance(handler, logging.StreamHandler)
            for handler in self.logger.handlers
        ):
            self.logger.addHandler(console_handler)
        file_handler = logging.FileHandler("logfile.log")
        file_handler.setLevel(logging.DEBUG)
        file_handler.setFormatter(formatter)
        if not any(
            isinstance(handler, logging.FileHandler) for handler in self.logger.handlers
        ):
            self.logger.addHandler(file_handler) (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.SoftOrdering1DCNN:[152:170]
==autodeep.modelsdefinition.XGBoostTrainer:[38:56]
        formatter = logging.Formatter(
            f"%(asctime)s - %(levelname)s - {self.script_filename} - %(message)s"
        )
        console_handler = logging.StreamHandler()
        console_handler.setLevel(logging.INFO)
        console_handler.setFormatter(formatter)
        if not any(
            isinstance(handler, logging.StreamHandler)
            for handler in self.logger.handlers
        ):
            self.logger.addHandler(console_handler)
        file_handler = logging.FileHandler("logfile.log")
        file_handler.setLevel(logging.DEBUG)
        file_handler.setFormatter(formatter)
        if not any(
            isinstance(handler, logging.FileHandler) for handler in self.logger.handlers
        ):
            self.logger.addHandler(file_handler) (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.CatBoostModel:[220:238]
==autodeep.modelsdefinition.SoftOrdering1DCNN:[678:696]
            }

        trials = Trials()
        self.evaluator = Evaluator(problem_type=self.problem_type)
        threshold = float(-1.0 * self.evaluator.maximize[metric][1])
        best = fmin(
            objective,
            space=space,
            algo=tpe.suggest,
            max_evals=max_evals,
            trials=trials,
            rstate=np.random.default_rng(self.random_state),
            early_stop_fn=lambda x: stop_on_perfect_lossCondition(x, threshold),
        )
        best_params = space_eval(space, best)
        best_params["default_params"] = self.default_params
        best_trial = trials.best_trial
        best_score = best_trial["result"]["loss"] (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.CommonStructure:[422:442]
==autodeep.modelsdefinition.MLP:[237:252]
            space=space,
            algo=tpe.suggest,
            max_evals=max_evals,
            trials=trials,
            rstate=np.random.default_rng(self.random_state),
            early_stop_fn=lambda x: stop_on_perfect_lossCondition(x, threshold),
        )
        best_params = space_eval(space, best)
        best_params["default_params"] = self.default_params
        best_trial = trials.best_trial
        best_score = best_trial["result"]["loss"]
        if self.evaluator.maximize[metric][0]:
            best_score = -1 * best_score
        train_metrics = best_trial["result"]["train_metrics"]
        validation_metrics = best_trial["result"]["validation_metrics"]

        def extract_optimizer_scheduler(params):
            """
            Convert optimizer and scheduler class objects to their string names.
            """ (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.ResNetModel:[634:648]
==autodeep.modelsdefinition.SoftOrdering1DCNN:[630:644]
                    if early_stopping and val_size > 0:
                        val_loss = self.validate_step(val_loader)
                        self.scheduler.step(val_loss)
                        if (
                            val_loss + self.default_params.get("tol", 0.0)
                            < best_val_loss
                        ):
                            best_val_loss = val_loss
                            best_epoch = epoch
                            current_patience = 0
                            best_model_state_dict = self.model.state_dict()
                        else:
                            current_patience += 1
                        print( (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.CommonStructure:[422:435]
==autodeep.modelsdefinition.SoftOrdering1DCNN:[685:698]
            space=space,
            algo=tpe.suggest,
            max_evals=max_evals,
            trials=trials,
            rstate=np.random.default_rng(self.random_state),
            early_stop_fn=lambda x: stop_on_perfect_lossCondition(x, threshold),
        )
        best_params = space_eval(space, best)
        best_params["default_params"] = self.default_params
        best_trial = trials.best_trial
        best_score = best_trial["result"]["loss"]
        if self.evaluator.maximize[metric][0]:
            best_score = -1 * best_score (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.FTTransformerModel:[43:56]
==autodeep.modelsdefinition.TabTransformerModel:[43:56]
        print("tabular model params")
        print(params)
        print("tabular model outer params")
        print(default_params)
        data_config, trainer_config, optimizer_config, learning_rate = (
            self.prepare_shared_tabular_configs(
                params=params, default_params=default_params, extra_info=self.extra_info
            )
        )
        input_embed_dim_multiplier = params.get("input_embed_dim_multiplier", None)
        num_heads = params.get("num_heads", None)
        if num_heads is not None and input_embed_dim_multiplier is not None:
            params["input_embed_dim"] = input_embed_dim_multiplier * num_heads (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.AutomaticFeatureInteractionModel:[74:86]
==autodeep.modelsdefinition.NodeModel:[70:82]
            optimizer_config = OptimizerConfig()
        print(data_config)
        print(model_config)
        print(optimizer_config)
        print(trainer_config)
        tabular_model = TabularModel(
            data_config=data_config,
            model_config=model_config,
            optimizer_config=optimizer_config,
            trainer_config=trainer_config,
        )
        return tabular_model (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.AutomaticFeatureInteractionModel:[57:69]
==autodeep.modelsdefinition.NodeModel:[53:65]
        compatible_params = {
            param: value for param, value in params.items() if param in valid_params
        }
        invalid_params = {
            param: value for param, value in params.items() if param not in valid_params
        }
        self.logger.warning(
            f"You are passing some invalid parameters to the model {invalid_params}"
        )
        if self.task == "regression":
            compatible_params["target_range"] = self.target_range
        self.logger.debug(f"compatible parameters: {compatible_params}") (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.CategoryEmbeddingModel:[73:85]
==autodeep.modelsdefinition.TabNetModel:[70:82]
            optimizer_config = OptimizerConfig()
        print(data_config)
        print(model_config)
        print(optimizer_config)
        print(trainer_config)
        tabular_model = TabularModel(
            data_config=data_config,
            model_config=model_config,
            optimizer_config=optimizer_config,
            trainer_config=trainer_config,
        )
        return tabular_model (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.CategoryEmbeddingModel:[53:65]
==autodeep.modelsdefinition.TabNetModel:[53:65]
        compatible_params = {
            param: value for param, value in params.items() if param in valid_params
        }
        invalid_params = {
            param: value for param, value in params.items() if param not in valid_params
        }
        self.logger.warning(
            f"You are passing some invalid parameters to the model {invalid_params}"
        )
        if self.task == "regression":
            compatible_params["target_range"] = self.target_range
        self.logger.debug(f"compatible parameters: {compatible_params}") (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.FTTransformerModel:[74:86]
==autodeep.modelsdefinition.TabTransformerModel:[74:86]
            optimizer_config = OptimizerConfig()
        print(data_config)
        print(model_config)
        print(optimizer_config)
        print(trainer_config)
        tabular_model = TabularModel(
            data_config=data_config,
            model_config=model_config,
            optimizer_config=optimizer_config,
            trainer_config=trainer_config,
        )
        return tabular_model (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.FTTransformerModel:[57:69]
==autodeep.modelsdefinition.TabTransformerModel:[57:69]
        compatible_params = {
            param: value for param, value in params.items() if param in valid_params
        }
        invalid_params = {
            param: value for param, value in params.items() if param not in valid_params
        }
        self.logger.warning(
            f"You are passing some invalid parameters to the model {invalid_params}"
        )
        if self.task == "regression":
            compatible_params["target_range"] = self.target_range
        self.logger.debug(f"compatible parameters: {compatible_params}") (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==igtd_notebooks.preprocess_tabs_creditcard:[34:46]
==igtd_notebooks.preprocess_tabs_diabetes:[54:66]
os.makedirs(name=result_dir, exist_ok=True)
table_to_image(
    X_train,
    [num_row, num_col],
    fea_dist_method,
    image_dist_method,
    save_image_size,
    max_step,
    val_step,
    result_dir,
    error,
    min_gain=min_gain, (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==igtd_notebooks.preprocess_tabs_creditcard:[53:65]
==igtd_notebooks.preprocess_tabs_diabetes:[35:47]
os.makedirs(name=result_dir, exist_ok=True)
table_to_image(
    X_train,
    [num_row, num_col],
    fea_dist_method,
    image_dist_method,
    save_image_size,
    max_step,
    val_step,
    result_dir,
    error,
    min_gain=min_gain, (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==igtd_notebooks.preprocess_tabs_iris:[53:65]
==igtd_notebooks.preprocess_tabs_titanic:[34:46]
os.makedirs(name=result_dir, exist_ok=True)
table_to_image(
    X_train,
    [num_row, num_col],
    fea_dist_method,
    image_dist_method,
    save_image_size,
    max_step,
    val_step,
    result_dir,
    error,
    min_gain=min_gain, (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==igtd_notebooks.preprocess_tabs_iris:[34:46]
==igtd_notebooks.preprocess_tabs_titanic:[53:65]
os.makedirs(name=result_dir, exist_ok=True)
table_to_image(
    X_train,
    [num_row, num_col],
    fea_dist_method,
    image_dist_method,
    save_image_size,
    max_step,
    val_step,
    result_dir,
    error,
    min_gain=min_gain, (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==igtd_notebooks.preprocess_tabs_adult:[53:65]
==igtd_notebooks.preprocess_tabs_breastcancer:[34:46]
os.makedirs(name=result_dir, exist_ok=True)
table_to_image(
    X_train,
    [num_row, num_col],
    fea_dist_method,
    image_dist_method,
    save_image_size,
    max_step,
    val_step,
    result_dir,
    error,
    min_gain=min_gain, (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==igtd_notebooks.preprocess_tabs_adult:[34:46]
==igtd_notebooks.preprocess_tabs_breastcancer:[53:65]
os.makedirs(name=result_dir, exist_ok=True)
table_to_image(
    X_train,
    [num_row, num_col],
    fea_dist_method,
    image_dist_method,
    save_image_size,
    max_step,
    val_step,
    result_dir,
    error,
    min_gain=min_gain, (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==igtd_notebooks.preprocess_tabs_ageconditions:[34:46]
==igtd_notebooks.preprocess_tabs_covertype:[53:65]
os.makedirs(name=result_dir, exist_ok=True)
table_to_image(
    X_train,
    [num_row, num_col],
    fea_dist_method,
    image_dist_method,
    save_image_size,
    max_step,
    val_step,
    result_dir,
    error,
    min_gain=min_gain, (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==igtd_notebooks.preprocess_tabs_ageconditions:[53:65]
==igtd_notebooks.preprocess_tabs_covertype:[34:46]
os.makedirs(name=result_dir, exist_ok=True)
table_to_image(
    X_train,
    [num_row, num_col],
    fea_dist_method,
    image_dist_method,
    save_image_size,
    max_step,
    val_step,
    result_dir,
    error,
    min_gain=min_gain, (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==igtd_notebooks.preprocess_tabs_heloc:[34:46]
==igtd_notebooks.preprocess_tabs_housing:[53:65]
os.makedirs(name=result_dir, exist_ok=True)
table_to_image(
    X_train,
    [num_row, num_col],
    fea_dist_method,
    image_dist_method,
    save_image_size,
    max_step,
    val_step,
    result_dir,
    error,
    min_gain=min_gain, (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==igtd_notebooks.preprocess_tabs_heloc:[53:65]
==igtd_notebooks.preprocess_tabs_housing:[34:46]
os.makedirs(name=result_dir, exist_ok=True)
table_to_image(
    X_train,
    [num_row, num_col],
    fea_dist_method,
    image_dist_method,
    save_image_size,
    max_step,
    val_step,
    result_dir,
    error,
    min_gain=min_gain, (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.CatBoostModel:[227:238]
==autodeep.modelsdefinition.CommonStructure:[422:433]
            space=space,
            algo=tpe.suggest,
            max_evals=max_evals,
            trials=trials,
            rstate=np.random.default_rng(self.random_state),
            early_stop_fn=lambda x: stop_on_perfect_lossCondition(x, threshold),
        )
        best_params = space_eval(space, best)
        best_params["default_params"] = self.default_params
        best_trial = trials.best_trial
        best_score = best_trial["result"]["loss"] (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.dataloaders.dataloader:[596:607]
==autodeep.modelsdefinition.IGTD:[211:222]
                )
            train_mask = df[self.split_col] == self.train_value
            test_mask = df[self.split_col] == self.test_value
            X_train, X_test = X[train_mask], X[test_mask]
            y_train, y_test = y[train_mask], y[test_mask]
        else:
            X_train, X_test, y_train, y_test = train_test_split(
                X,
                y,
                test_size=self.test_size,
                random_state=self.random_state, (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.FTTransformerModel:[57:68]
==autodeep.modelsdefinition.GANDALF:[55:66]
        compatible_params = {
            param: value for param, value in params.items() if param in valid_params
        }
        invalid_params = {
            param: value for param, value in params.items() if param not in valid_params
        }
        self.logger.warning(
            f"You are passing some invalid parameters to the model {invalid_params}"
        )
        if self.task == "regression":
            compatible_params["target_range"] = self.target_range (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==igtd_notebooks.preprocess_tabs_covertype:[13:24]
==igtd_notebooks.preprocess_tabs_heloc:[13:24]
data_loader = create_data_loader(
    dataset_name,
    test_size=0.2,
    normalize_features="mean_std",
    encode_categorical=True,
    return_extra_info=False,
    random_state=4200,
)
X_train, X_test, y_train, y_test, extra_info = data_loader.load_data()
exclude_cols = []
num_row = 6 (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.CatBoostModel:[192:202]
==autodeep.modelsdefinition.XGBoostTrainer:[171:181]
            probabilities = None
            if self.problem_type != "regression":
                probabilities = model.predict_proba(X_val)[:, 1]
            self.evaluator.y_true = y_val
            self.evaluator.y_pred = y_pred
            self.evaluator.y_prob = probabilities
            self.evaluator.run_metrics = eval_metrics
            metrics_for_split_val = self.evaluator.evaluate_model()
            score = metrics_for_split_val[metric]
            self.logger.info(f"Validation metrics: {metrics_for_split_val}") (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.automl:[33:43]
==autodeep.modelsdefinition.IGTD:[617:627]
        "Euclidean_Euclidean": {
            "fea_dist_method": "Euclidean",
            "image_dist_method": "Euclidean",
            "error": "abs",
        },
        "Pearson_Manhattan": {
            "fea_dist_method": "Pearson",
            "image_dist_method": "Manhattan",
            "error": "squared",
        }, (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.ResNetModel:[623:633]
==autodeep.modelsdefinition.SoftOrdering1DCNN:[619:629]
            self.model.to(self.device)
            self.model.train()
            best_val_loss = float("inf")
            best_epoch = 0
            current_patience = 0
            best_model_state_dict = None
            with tqdm(
                total=max_epochs, desc="Training", unit="epoch", ncols=80
            ) as pbar:
                for epoch in range(max_epochs): (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==igtd_notebooks.preprocess_tabs_creditcard:[13:23]
==igtd_notebooks.preprocess_tabs_titanic:[13:23]
data_loader = create_data_loader(
    dataset_name,
    test_size=0.2,
    normalize_features="mean_std",
    encode_categorical=True,
    return_extra_info=False,
    random_state=4200,
)
X_train, X_test, y_train, y_test, extra_info = data_loader.load_data()
exclude_cols = [] (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==igtd_notebooks.preprocess_tabs_adult:[13:23]
==igtd_notebooks.preprocess_tabs_iris:[13:23]
data_loader = create_data_loader(
    dataset_name,
    test_size=0.2,
    normalize_features="mean_std",
    encode_categorical=True,
    return_extra_info=False,
    random_state=4200,
)
X_train, X_test, y_train, y_test, extra_info = data_loader.load_data()
exclude_cols = [] (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==igtd_notebooks.preprocess_tabs_ageconditions:[13:23]
==igtd_notebooks.preprocess_tabs_covertype:[13:23]
data_loader = create_data_loader(
    dataset_name,
    test_size=0.2,
    normalize_features="mean_std",
    encode_categorical=True,
    return_extra_info=False,
    random_state=4200,
)
X_train, X_test, y_train, y_test, extra_info = data_loader.load_data()
exclude_cols = [] (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==igtd_notebooks.preprocess_tabs_heloc:[13:23]
==igtd_notebooks.preprocess_tabs_housing:[13:23]
data_loader = create_data_loader(
    dataset_name,
    test_size=0.2,
    normalize_features="mean_std",
    encode_categorical=True,
    return_extra_info=False,
    random_state=4200,
)
X_train, X_test, y_train, y_test, extra_info = data_loader.load_data()
exclude_cols = [] (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.AutomaticFeatureInteractionModel:[43:52]
==autodeep.modelsdefinition.GATE:[43:52]
        print("tabular model params")
        print(params)
        print("tabular model outer params")
        print(default_params)
        data_config, trainer_config, optimizer_config, learning_rate = (
            self.prepare_shared_tabular_configs(
                params=params, default_params=default_params, extra_info=self.extra_info
            )
        ) (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.NodeModel:[43:52]
==autodeep.modelsdefinition.TabNetModel:[43:52]
        print("tabular model params")
        print(params)
        print("tabular model outer params")
        print(default_params)
        data_config, trainer_config, optimizer_config, learning_rate = (
            self.prepare_shared_tabular_configs(
                params=params, default_params=default_params, extra_info=self.extra_info
            )
        ) (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.GANDALF:[45:54]
==autodeep.modelsdefinition.TabTransformerModel:[43:52]
        print("tabular model params")
        print(params)
        print("tabular model outer params")
        print(default_params)
        data_config, trainer_config, optimizer_config, learning_rate = (
            self.prepare_shared_tabular_configs(
                params=params, default_params=default_params, extra_info=self.extra_info
            )
        ) (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.ResNetModel:[569:578]
==autodeep.modelsdefinition.SoftOrdering1DCNN:[570:579]
        if self.problem_type == "regression":
            self.num_targets = 1
        elif self.problem_type == "binary_classification":
            self.num_targets = 1
        elif self.problem_type == "multiclass_classification":
            self.num_targets = len(np.unique(y))
        else:
            raise ValueError("Unsupported task type")
        self.logger.debug(f"Training on {self.device} for dataset") (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.CategoryEmbeddingModel:[43:52]
==autodeep.modelsdefinition.FTTransformerModel:[43:52]
        print("tabular model params")
        print(params)
        print("tabular model outer params")
        print(default_params)
        data_config, trainer_config, optimizer_config, learning_rate = (
            self.prepare_shared_tabular_configs(
                params=params, default_params=default_params, extra_info=self.extra_info
            )
        ) (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.dataloaders.dataloader:[582:590]
==autodeep.modelsdefinition.IGTD:[202:210]
            )
        X = df.drop(columns=[self.target_column])
        y = df[self.target_column]
        if self.encode_categorical:
            X = self.force_encode_categorical(X)
        if self.split_col and self.split_col in df.columns:
            if self.train_value is None or self.test_value is None:
                raise ValueError( (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.CatBoostModel:[70:107]
==autodeep.modelsdefinition.XGBoostTrainer:[71:108]
        self.logger.info("Loading model")
        self.logger.debug("Model loaded successfully")
        self.model = self.best_model

    def save_model(self, model_dir, model_name):
        """save_model

        Args:
        self : type
            Description
        model_dir : type
            Description
        model_name : type
            Description

        Returns:
            type: Description
        """
        self.logger.info(f"Saving model to {model_dir + model_name}")
        self.model.save_model(model_dir + model_name)
        self.logger.debug("Model saved successfully")

    def predict(self, X_test, predict_proba=False):
        """predict

        Args:
        self : type
            Description
        X_test : type
            Description
        predict_proba : type
            Description

        Returns:
            type: Description
        """
        self.logger.info("Computing predictions") (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.ResNetModel:[719:743]
==autodeep.modelsdefinition.XGBoostTrainer:[221:228]
        self.best_model = best_trial["result"]["trained_model"]
        self._load_best_model()
        self.logger.info(f"Best hyperparameters: {best_params}")
        self.logger.info(
            f"The best possible score for metric {metric} is {-threshold}, we reached {metric} = {best_score}"
        )
        return best_params, best_score, train_metrics, validation_metrics (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.dataloaders.dataloader:[66:73]
==autodeep.modelsdefinition.IGTD:[66:92]
        self.logger = logging.getLogger(self.__class__.__name__)
        if not self.logger.handlers:
            ch = logging.StreamHandler()
            ch.setLevel(logging.INFO)
            formatter = logging.Formatter("%(asctime)s - %(levelname)s - %(message)s")
            ch.setFormatter(formatter)
            self.logger.addHandler(ch) (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.CommonStructure:[404:411]
==autodeep.modelsdefinition.MLP:[223:230]
            return {
                "loss": score,
                "params": params,
                "status": STATUS_OK,
                "trained_model": model,
                "train_metrics": metrics_for_split_train,
                "validation_metrics": metrics_for_split_val, (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.MLP:[122:156]
==autodeep.modelsdefinition.XGBoostTrainer:[112:146]
        self.logger.debug("Computed predictions successfully")
        if predict_proba:
            return predictions, probabilities
        else:
            return predictions

    def hyperopt_search(
        self, X, y, model_config, metric, eval_metrics, max_evals=16, extra_info=None
    ):
        """hyperopt_search

        Args:
        self : type
            Description
        X : type
            Description
        y : type
            Description
        model_config : type
            Description
        metric : type
            Description
        eval_metrics : type
            Description
        max_evals : type
            Description
        extra_info : type
            Description

        Returns:
            type: Description
        """
        self.default_params = model_config["default_params"]
        val_size = self.default_params.get("val_size") (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.ResNetModel:[582:589]
==autodeep.modelsdefinition.SoftOrdering1DCNN:[579:586]
            X_train, X_val, y_train, y_val = train_test_split(
                X,
                y,
                test_size=val_size,
                random_state=42,
                stratify=y if self.problem_type != "regression" else None,
            ) (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.ResNetModel:[317:351]
==autodeep.modelsdefinition.SoftOrdering1DCNN:[345:371]
            self.loss_fn = nn.CrossEntropyLoss(weight=class_weights, reduction="mean")
        elif self.problem_type == "regression":
            self.loss_fn = nn.MSELoss()
        else:
            raise ValueError(
                "Invalid problem_type. Supported values are 'binary', 'multiclass', and 'regression'."
            )

    def _pandas_to_torch_image_datasets(
        self, X_train, y_train, img_rows, img_columns, transform, val_size, batch_size
    ):
        """_pandas_to_torch_image_datasets

        Args:
        self : type
            Description
        X_train : type
            Description
        y_train : type
            Description
        img_rows : type
            Description
        img_columns : type
            Description
        transform : type
            Description
        val_size : type
            Description
        batch_size : type
            Description

        Returns:
            type: Description
        """ (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.FTTransformerModel:[79:86]
==autodeep.modelsdefinition.GANDALF:[73:93]
        tabular_model = TabularModel(
            data_config=data_config,
            model_config=model_config,
            optimizer_config=optimizer_config,
            trainer_config=trainer_config,
        )
        return tabular_model (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==igtd_notebooks.preprocess_tabs_breastcancer:[17:24]
==igtd_notebooks.preprocess_tabs_heloc:[17:24]
    encode_categorical=True,
    return_extra_info=False,
    random_state=4200,
)
X_train, X_test, y_train, y_test, extra_info = data_loader.load_data()
exclude_cols = []
num_row = 6 (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==igtd_notebooks.preprocess_tabs_diabetes:[14:21]
==igtd_notebooks.preprocess_tabs_housing:[14:21]
    dataset_name,
    test_size=0.2,
    normalize_features="mean_std",
    encode_categorical=True,
    return_extra_info=False,
    random_state=4200,
) (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.CatBoostModel:[146:152]
==autodeep.modelsdefinition.XGBoostTrainer:[144:150]
        self.default_params = model_config["default_params"]
        val_size = self.default_params.get("val_size")
        early_stopping_rounds = self.default_params.get("early_stopping_rounds", 100)
        verbose = self.default_params.get("verbose", False)
        param_grid = model_config["param_grid"]
        space = infer_hyperopt_space(param_grid) (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.ResNetModel:[687:693]
==autodeep.modelsdefinition.XGBoostTrainer:[190:196]
            if self.evaluator.maximize[metric][0]:
                score = -1 * score
            return {
                "loss": score,
                "params": params,
                "status": STATUS_OK, (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.CommonStructure:[292:325]
==autodeep.modelsdefinition.MLP:[121:154]
        self.logger.debug(f"{predictions[:10]}")
        self.logger.debug("Computed predictions successfully")
        if predict_proba:
            return predictions, probabilities
        else:
            return predictions

    def hyperopt_search(
        self, X, y, model_config, metric, eval_metrics, max_evals=16, extra_info=None
    ):
        """hyperopt_search

        Args:
        self : type
            Description
        X : type
            Description
        y : type
            Description
        model_config : type
            Description
        metric : type
            Description
        eval_metrics : type
            Description
        max_evals : type
            Description
        extra_info : type
            Description

        Returns:
            type: Description
        """ (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.MLP:[100:121]
==autodeep.modelsdefinition.XGBoostTrainer:[91:112]
        self.logger.debug("Model saved successfully")

    def predict(self, X_test, predict_proba=False):
        """predict

        Args:
        self : type
            Description
        X_test : type
            Description
        predict_proba : type
            Description

        Returns:
            type: Description
        """
        self.logger.info("Computing predictions")
        predictions = self.model.predict(X_test)
        probabilities = None
        if predict_proba:
            probabilities = np.array(self.model.predict_proba(X_test))[:, 1] (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.ResNetModel:[789:818]
==autodeep.modelsdefinition.SoftOrdering1DCNN:[757:780]
        if predict_proba:
            return predictions, probabilities
        else:
            return predictions


class CustomDataset(Dataset):

    def __init__(self, data, transform=None):
        """__init__

        Args:
        self : type
            Description
        data : type
            Description
        transform : type
            Description

        Returns:
            type: Description
        """
        self.data = data (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.MLP:[195:201]
==autodeep.modelsdefinition.SoftOrdering1DCNN:[580:586]
            X,
            y,
            test_size=val_size,
            random_state=42,
            stratify=y if self.problem_type != "regression" else None,
        ) (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==igtd_notebooks.preprocess_tabs_breastcancer:[17:23]
==igtd_notebooks.preprocess_tabs_housing:[17:23]
    encode_categorical=True,
    return_extra_info=False,
    random_state=4200,
)
X_train, X_test, y_train, y_test, extra_info = data_loader.load_data()
exclude_cols = [] (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.CatBoostModel:[31:36]
==autodeep.modelsdefinition.XGBoostTrainer:[33:38]
        self.logger = logging.getLogger(__name__)
        self.logger.setLevel(logging.DEBUG)
        self.random_state = 4200
        self.script_filename = os.path.basename(__file__)
        self.problem_type = problem_type (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.CommonStructure:[293:325]
==autodeep.modelsdefinition.XGBoostTrainer:[112:144]
        self.logger.debug("Computed predictions successfully")
        if predict_proba:
            return predictions, probabilities
        else:
            return predictions

    def hyperopt_search(
        self, X, y, model_config, metric, eval_metrics, max_evals=16, extra_info=None
    ):
        """hyperopt_search

        Args:
        self : type
            Description
        X : type
            Description
        y : type
            Description
        model_config : type
            Description
        metric : type
            Description
        eval_metrics : type
            Description
        max_evals : type
            Description
        extra_info : type
            Description

        Returns:
            type: Description
        """ (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.dataloaders.dataloader:[654:659]
==autodeep.modelsdefinition.IGTD:[454:459]
        self.test_size = test_size
        self.random_state = random_state
        self.normalize_features = normalize_features
        self.return_extra_info = return_extra_info
        self.encode_categorical = encode_categorical (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.dataloaders.dataloader:[539:544]
==autodeep.modelsdefinition.IGTD:[179:184]
        self.test_size = test_size
        self.random_state = random_state
        self.normalize_features = normalize_features
        self.return_extra_info = return_extra_info
        self.encode_categorical = encode_categorical (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.dataloaders.dataloader:[159:164]
==autodeep.modelsdefinition.IGTD:[99:104]
            table_to_image(
                X,
                [self.img_rows, self.img_columns],
                config["fea_dist_method"],
                config["image_dist_method"], (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.CatBoostModel:[112:144]
==autodeep.modelsdefinition.MLP:[122:154]
        self.logger.debug("Computed predictions successfully")
        if predict_proba:
            return predictions, probabilities
        else:
            return predictions

    def hyperopt_search(
        self, X, y, model_config, metric, eval_metrics, max_evals=16, extra_info=None
    ):
        """hyperopt_search

        Args:
        self : type
            Description
        X : type
            Description
        y : type
            Description
        model_config : type
            Description
        metric : type
            Description
        eval_metrics : type
            Description
        max_evals : type
            Description
        extra_info : type
            Description

        Returns:
            type: Description
        """ (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.CatBoostModel:[58:89]
==autodeep.modelsdefinition.MLP:[68:99]
        self.num_workers = max(1, num_cpu_cores)

    def _load_best_model(self):
        """_load_best_model

        Args:
        self : type
            Description

        Returns:
            type: Description
        """
        self.logger.info("Loading model")
        self.logger.debug("Model loaded successfully")
        self.model = self.best_model

    def save_model(self, model_dir, model_name):
        """save_model

        Args:
        self : type
            Description
        model_dir : type
            Description
        model_name : type
            Description

        Returns:
            type: Description
        """
        self.logger.info(f"Saving model to {model_dir + model_name}") (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.MLP:[207:212]
==autodeep.modelsdefinition.XGBoostTrainer:[175:180]
            self.evaluator.y_pred = y_pred
            self.evaluator.y_prob = probabilities
            self.evaluator.run_metrics = eval_metrics
            metrics_for_split_val = self.evaluator.evaluate_model()
            score = metrics_for_split_val[metric] (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.CommonStructure:[216:221]
==autodeep.modelsdefinition.SoftOrdering1DCNN:[345:350]
            self.loss_fn = nn.CrossEntropyLoss(weight=class_weights, reduction="mean")
        elif self.problem_type == "regression":
            self.loss_fn = nn.MSELoss()
        else:
            raise ValueError( (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.ResNetModel:[652:657]
==autodeep.modelsdefinition.SoftOrdering1DCNN:[650:655]
                            break
                    pbar.update(1)
            if best_model_state_dict is not None:
                self.model.load_state_dict(best_model_state_dict)
                print(f"Best model loaded from epoch {best_epoch + 1}") (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.ResNetModel:[613:620]
==autodeep.modelsdefinition.SoftOrdering1DCNN:[609:616]
                batch_size=bs,
                shuffle=False,
                drop_last=False,
                num_workers=self.num_workers,
                pin_memory=True,
            )
            self.model = self.build_model( (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.ResNetModel:[605:612]
==autodeep.modelsdefinition.SoftOrdering1DCNN:[601:608]
                batch_size=bs,
                shuffle=True,
                drop_last=False,
                num_workers=self.num_workers,
                pin_memory=True,
            )
            val_loader = torch.utils.data.DataLoader( (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.ResNetModel:[599:604]
==autodeep.modelsdefinition.SoftOrdering1DCNN:[595:600]
            if X_train.shape[0] % params["batch_size"] == 1:
                bs = params["batch_size"] + 1
            else:
                bs = params["batch_size"]
            train_loader = torch.utils.data.DataLoader( (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.ResNetModel:[358:363]
==autodeep.modelsdefinition.SoftOrdering1DCNN:[377:382]
        num_samples = len(dataset)
        num_train_samples = int((1 - val_size) * num_samples)
        if num_train_samples % batch_size == 1:
            num_train_samples += 1
        num_val_samples = num_samples - num_train_samples (duplicate-code)

------------------------------------------------------------------
Your code has been rated at 5.89/10 (previous run: 5.37/10, +0.52)

