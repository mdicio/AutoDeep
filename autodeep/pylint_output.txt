************* Module autodeep.outputhandler.outputwriter
outputhandler/outputwriter.py:1:0: C0114: Missing module docstring (missing-module-docstring)
outputhandler/outputwriter.py:5:0: C0115: Missing class docstring (missing-class-docstring)
outputhandler/outputwriter.py:14:17: W1514: Using open without explicitly specifying an encoding (unspecified-encoding)
outputhandler/outputwriter.py:18:4: C0116: Missing function or method docstring (missing-function-docstring)
outputhandler/outputwriter.py:19:13: W1514: Using open without explicitly specifying an encoding (unspecified-encoding)
outputhandler/outputwriter.py:5:0: R0903: Too few public methods (1/2) (too-few-public-methods)
************* Module autodeep.outputhandler.resultanalyzer
outputhandler/resultanalyzer.py:41:0: C0301: Line too long (112/100) (line-too-long)
outputhandler/resultanalyzer.py:1:0: C0114: Missing module docstring (missing-module-docstring)
outputhandler/resultanalyzer.py:7:0: C0115: Missing class docstring (missing-class-docstring)
************* Module autodeep.factory
factory.py:1:0: C0114: Missing module docstring (missing-module-docstring)
factory.py:36:0: C0116: Missing function or method docstring (missing-function-docstring)
factory.py:45:0: C0116: Missing function or method docstring (missing-function-docstring)
factory.py:48:4: R1705: Unnecessary "elif" after "return", remove the leading "el" from "elif" (no-else-return)
factory.py:45:0: R0911: Too many return statements (13/6) (too-many-return-statements)
factory.py:45:0: R0912: Too many branches (14/12) (too-many-branches)
factory.py:93:0: C0116: Missing function or method docstring (missing-function-docstring)
factory.py:93:0: R0913: Too many arguments (15/5) (too-many-arguments)
factory.py:93:0: R0917: Too many positional arguments (15/5) (too-many-positional-arguments)
factory.py:131:0: C0116: Missing function or method docstring (missing-function-docstring)
factory.py:135:4: R1705: Unnecessary "elif" after "return", remove the leading "el" from "elif" (no-else-return)
factory.py:131:0: R0911: Too many return statements (10/6) (too-many-return-statements)
************* Module autodeep.modelutils.igtdutilities
modelutils/igtdutilities.py:32:0: C0301: Line too long (107/100) (line-too-long)
modelutils/igtdutilities.py:72:0: C0301: Line too long (104/100) (line-too-long)
modelutils/igtdutilities.py:91:0: C0301: Line too long (118/100) (line-too-long)
modelutils/igtdutilities.py:155:0: C0301: Line too long (116/100) (line-too-long)
modelutils/igtdutilities.py:156:0: C0301: Line too long (111/100) (line-too-long)
modelutils/igtdutilities.py:157:0: C0301: Line too long (104/100) (line-too-long)
modelutils/igtdutilities.py:159:0: C0301: Line too long (105/100) (line-too-long)
modelutils/igtdutilities.py:163:0: C0301: Line too long (116/100) (line-too-long)
modelutils/igtdutilities.py:394:0: C0301: Line too long (116/100) (line-too-long)
modelutils/igtdutilities.py:395:0: C0301: Line too long (111/100) (line-too-long)
modelutils/igtdutilities.py:396:0: C0301: Line too long (104/100) (line-too-long)
modelutils/igtdutilities.py:398:0: C0301: Line too long (105/100) (line-too-long)
modelutils/igtdutilities.py:402:0: C0301: Line too long (116/100) (line-too-long)
modelutils/igtdutilities.py:413:0: C0301: Line too long (103/100) (line-too-long)
modelutils/igtdutilities.py:631:0: C0301: Line too long (103/100) (line-too-long)
modelutils/igtdutilities.py:675:0: C0301: Line too long (106/100) (line-too-long)
modelutils/igtdutilities.py:687:0: C0301: Line too long (149/100) (line-too-long)
modelutils/igtdutilities.py:691:0: C0301: Line too long (112/100) (line-too-long)
modelutils/igtdutilities.py:783:0: C0301: Line too long (110/100) (line-too-long)
modelutils/igtdutilities.py:785:0: C0301: Line too long (113/100) (line-too-long)
modelutils/igtdutilities.py:787:0: C0301: Line too long (103/100) (line-too-long)
modelutils/igtdutilities.py:788:0: C0301: Line too long (105/100) (line-too-long)
modelutils/igtdutilities.py:789:0: C0301: Line too long (107/100) (line-too-long)
modelutils/igtdutilities.py:790:0: C0301: Line too long (113/100) (line-too-long)
modelutils/igtdutilities.py:794:0: C0301: Line too long (121/100) (line-too-long)
modelutils/igtdutilities.py:797:0: C0301: Line too long (113/100) (line-too-long)
modelutils/igtdutilities.py:798:0: C0301: Line too long (105/100) (line-too-long)
modelutils/igtdutilities.py:800:0: C0301: Line too long (103/100) (line-too-long)
modelutils/igtdutilities.py:801:0: C0301: Line too long (105/100) (line-too-long)
modelutils/igtdutilities.py:802:0: C0301: Line too long (106/100) (line-too-long)
modelutils/igtdutilities.py:803:0: C0301: Line too long (111/100) (line-too-long)
modelutils/igtdutilities.py:804:0: C0301: Line too long (119/100) (line-too-long)
modelutils/igtdutilities.py:807:0: C0301: Line too long (104/100) (line-too-long)
modelutils/igtdutilities.py:808:0: C0301: Line too long (119/100) (line-too-long)
modelutils/igtdutilities.py:809:0: C0301: Line too long (117/100) (line-too-long)
modelutils/igtdutilities.py:810:0: C0301: Line too long (114/100) (line-too-long)
modelutils/igtdutilities.py:812:0: C0301: Line too long (106/100) (line-too-long)
modelutils/igtdutilities.py:813:0: C0301: Line too long (107/100) (line-too-long)
modelutils/igtdutilities.py:819:0: C0301: Line too long (104/100) (line-too-long)
modelutils/igtdutilities.py:821:0: C0301: Line too long (115/100) (line-too-long)
modelutils/igtdutilities.py:1:0: C0114: Missing module docstring (missing-module-docstring)
modelutils/igtdutilities.py:18:0: C0116: Missing function or method docstring (missing-function-docstring)
modelutils/igtdutilities.py:139:12: E1136: Value 'coordinate' is unsubscriptable (unsubscriptable-object)
modelutils/igtdutilities.py:139:30: E1136: Value 'coordinate' is unsubscriptable (unsubscriptable-object)
modelutils/igtdutilities.py:142:0: C0103: Function name "IGTD_absolute_error" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtdutilities.py:142:0: R0913: Too many arguments (10/5) (too-many-arguments)
modelutils/igtdutilities.py:142:0: R0917: Too many positional arguments (10/5) (too-many-positional-arguments)
modelutils/igtdutilities.py:142:0: R0914: Too many local variables (38/15) (too-many-locals)
modelutils/igtdutilities.py:243:8: W0622: Redefining built-in 'id' (redefined-builtin)
modelutils/igtdutilities.py:179:4: E1101: Module 'numpy.random' has no 'RandomState' member (no-member)
modelutils/igtdutilities.py:142:0: R0912: Too many branches (21/12) (too-many-branches)
modelutils/igtdutilities.py:142:0: R0915: Too many statements (88/50) (too-many-statements)
modelutils/igtdutilities.py:381:0: C0103: Function name "IGTD_square_error" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtdutilities.py:381:0: R0913: Too many arguments (10/5) (too-many-arguments)
modelutils/igtdutilities.py:381:0: R0917: Too many positional arguments (10/5) (too-many-positional-arguments)
modelutils/igtdutilities.py:381:0: R0914: Too many local variables (38/15) (too-many-locals)
modelutils/igtdutilities.py:482:8: W0622: Redefining built-in 'id' (redefined-builtin)
modelutils/igtdutilities.py:418:4: E1101: Module 'numpy.random' has no 'RandomState' member (no-member)
modelutils/igtdutilities.py:381:0: R0912: Too many branches (21/12) (too-many-branches)
modelutils/igtdutilities.py:381:0: R0915: Too many statements (88/50) (too-many-statements)
modelutils/igtdutilities.py:618:0: C0103: Function name "IGTD" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtdutilities.py:618:0: R0913: Too many arguments (10/5) (too-many-arguments)
modelutils/igtdutilities.py:618:0: R0917: Too many positional arguments (10/5) (too-many-positional-arguments)
modelutils/igtdutilities.py:659:11: E0606: Possibly using variable 'index_record' before assignment (possibly-used-before-assignment)
modelutils/igtdutilities.py:659:25: E0606: Possibly using variable 'err_record' before assignment (possibly-used-before-assignment)
modelutils/igtdutilities.py:659:37: E0606: Possibly using variable 'run_time' before assignment (possibly-used-before-assignment)
modelutils/igtdutilities.py:662:0: W0102: Dangerous default value [] as argument (dangerous-default-value)
modelutils/igtdutilities.py:662:0: R0913: Too many arguments (10/5) (too-many-arguments)
modelutils/igtdutilities.py:662:0: R0917: Too many positional arguments (10/5) (too-many-positional-arguments)
modelutils/igtdutilities.py:662:0: R0914: Too many local variables (19/15) (too-many-locals)
modelutils/igtdutilities.py:672:4: W0613: Unused argument 'exclude_cols' (unused-argument)
modelutils/igtdutilities.py:770:4: C0103: Argument name "normDir" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtdutilities.py:762:0: W0102: Dangerous default value [] as argument (dangerous-default-value)
modelutils/igtdutilities.py:762:0: R0913: Too many arguments (14/5) (too-many-arguments)
modelutils/igtdutilities.py:762:0: R0917: Too many positional arguments (14/5) (too-many-positional-arguments)
modelutils/igtdutilities.py:762:0: R0914: Too many local variables (28/15) (too-many-locals)
modelutils/igtdutilities.py:855:16: W0621: Redefining name 'time' from outer scope (line 5) (redefined-outer-name)
modelutils/igtdutilities.py:915:17: R1732: Consider using 'with' for resource-allocating operations (consider-using-with)
modelutils/igtdutilities.py:921:17: R1732: Consider using 'with' for resource-allocating operations (consider-using-with)
modelutils/igtdutilities.py:831:21: W0612: Unused variable 'corr' (unused-variable)
modelutils/igtdutilities.py:1:0: W0611: Unused import json (unused-import)
modelutils/igtdutilities.py:6:0: W0611: Unused version imported from ensurepip (unused-import)
modelutils/igtdutilities.py:7:0: W0611: Unused Dict imported from typing (unused-import)
modelutils/igtdutilities.py:7:0: W0611: Unused Optional imported from typing (unused-import)
modelutils/igtdutilities.py:7:0: W0611: Unused Set imported from typing (unused-import)
modelutils/igtdutilities.py:7:0: W0611: Unused Tuple imported from typing (unused-import)
************* Module autodeep.modelutils.igtd_models
modelutils/igtd_models.py:210:0: C0301: Line too long (120/100) (line-too-long)
modelutils/igtd_models.py:353:0: C0301: Line too long (120/100) (line-too-long)
modelutils/igtd_models.py:506:0: C0301: Line too long (110/100) (line-too-long)
modelutils/igtd_models.py:509:0: C0301: Line too long (109/100) (line-too-long)
modelutils/igtd_models.py:510:0: C0301: Line too long (120/100) (line-too-long)
modelutils/igtd_models.py:717:0: C0301: Line too long (110/100) (line-too-long)
modelutils/igtd_models.py:720:0: C0301: Line too long (109/100) (line-too-long)
modelutils/igtd_models.py:721:0: C0301: Line too long (120/100) (line-too-long)
modelutils/igtd_models.py:1:0: C0114: Missing module docstring (missing-module-docstring)
modelutils/igtd_models.py:6:0: E0401: Unable to import 'keras' (import-error)
modelutils/igtd_models.py:9:0: E0401: Unable to import 'keras' (import-error)
modelutils/igtd_models.py:10:0: E0401: Unable to import 'keras.callbacks' (import-error)
modelutils/igtd_models.py:11:0: E0401: Unable to import 'keras.layers' (import-error)
modelutils/igtd_models.py:23:0: E0401: Unable to import 'keras.models' (import-error)
modelutils/igtd_models.py:35:0: C0116: Missing function or method docstring (missing-function-docstring)
modelutils/igtd_models.py:35:0: C0103: Function name "ID_mapping" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:37:4: C0200: Consider using enumerate instead of iterating with range and len (consider-using-enumerate)
modelutils/igtd_models.py:43:0: C0116: Missing function or method docstring (missing-function-docstring)
modelutils/igtd_models.py:56:4: W0622: Redefining built-in 'id' (redefined-builtin)
modelutils/igtd_models.py:57:4: C0200: Consider using enumerate instead of iterating with range and len (consider-using-enumerate)
modelutils/igtd_models.py:79:4: C0200: Consider using enumerate instead of iterating with range and len (consider-using-enumerate)
modelutils/igtd_models.py:100:0: C0116: Missing function or method docstring (missing-function-docstring)
modelutils/igtd_models.py:100:50: C0103: Argument name "sampleID" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:100:0: R0914: Too many local variables (16/15) (too-many-locals)
modelutils/igtd_models.py:101:4: C0103: Variable name "trainData" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:102:4: C0103: Variable name "valData" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:103:4: C0103: Variable name "testData" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:119:4: C0103: Variable name "trainLabel" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:120:4: C0103: Variable name "valLabel" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:121:4: C0103: Variable name "testLabel" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:147:0: C0116: Missing function or method docstring (missing-function-docstring)
modelutils/igtd_models.py:155:28: W0123: Use of eval (eval-used)
modelutils/igtd_models.py:159:0: C0116: Missing function or method docstring (missing-function-docstring)
modelutils/igtd_models.py:159:0: C0103: Function name "get_DNN_optimizer" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:182:0: C0116: Missing function or method docstring (missing-function-docstring)
modelutils/igtd_models.py:182:37: C0103: Argument name "paraDNN" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:205:0: C0115: Missing class docstring (missing-class-docstring)
modelutils/igtd_models.py:205:0: C0103: Class name "CNN2D_Regressor" doesn't conform to PascalCase naming style (invalid-name)
modelutils/igtd_models.py:208:4: R0914: Too many local variables (22/15) (too-many-locals)
modelutils/igtd_models.py:223:8: W0622: Redefining built-in 'input' (redefined-builtin)
modelutils/igtd_models.py:224:8: C0103: Variable name "input2List" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:208:4: R0912: Too many branches (18/12) (too-many-branches)
modelutils/igtd_models.py:208:4: R0915: Too many statements (51/50) (too-many-statements)
modelutils/igtd_models.py:205:0: R0903: Too few public methods (0/2) (too-few-public-methods)
modelutils/igtd_models.py:348:0: C0115: Missing class docstring (missing-class-docstring)
modelutils/igtd_models.py:348:0: C0103: Class name "CNN2D_Classifier" doesn't conform to PascalCase naming style (invalid-name)
modelutils/igtd_models.py:351:4: R0914: Too many local variables (23/15) (too-many-locals)
modelutils/igtd_models.py:367:8: W0622: Redefining built-in 'input' (redefined-builtin)
modelutils/igtd_models.py:368:8: C0103: Variable name "input2List" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:351:4: R0912: Too many branches (18/12) (too-many-branches)
modelutils/igtd_models.py:351:4: R0915: Too many statements (52/50) (too-many-statements)
modelutils/igtd_models.py:348:0: R0903: Too few public methods (0/2) (too-few-public-methods)
modelutils/igtd_models.py:493:0: C0103: Function name "CNN2D_Regression_Analysis" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:493:37: C0103: Argument name "resultFolder" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:493:0: R0914: Too many local variables (36/15) (too-many-locals)
modelutils/igtd_models.py:517:4: C0103: Variable name "trainData" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:518:4: C0103: Variable name "trainLabel" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:519:4: C0103: Variable name "trainSample" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:530:8: C0103: Variable name "valData" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:531:8: C0103: Variable name "valLabel" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:532:8: C0103: Variable name "valSample" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:534:8: C0103: Variable name "valData" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:535:8: C0103: Variable name "valLabel" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:536:8: C0103: Variable name "valSample" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:539:8: C0103: Variable name "testData" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:540:8: C0103: Variable name "testSample" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:542:12: C0103: Variable name "testLabel" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:544:12: C0103: Variable name "testLabel" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:546:8: C0103: Variable name "testData" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:547:8: C0103: Variable name "testLabel" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:548:8: C0103: Variable name "testSample" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:552:8: C0200: Consider using enumerate instead of iterating with range and len (consider-using-enumerate)
modelutils/igtd_models.py:557:4: C0103: Variable name "perM" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:567:8: C0103: Variable name "dpID" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:626:8: C0103: Variable name "numEpoch" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:630:12: C0103: Variable name "numEpoch" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:637:8: W0632: Possible unbalanced tuple unpacking with sequence defined at line 2 of : left side has 2 labels, right side has 1 value (unbalanced-tuple-unpacking)
modelutils/igtd_models.py:637:8: C0103: Variable name "dpID" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:637:14: C0103: Variable name "epID" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:641:8: W0632: Possible unbalanced tuple unpacking with sequence defined at line 2 of : left side has 2 labels, right side has 1 value (unbalanced-tuple-unpacking)
modelutils/igtd_models.py:641:8: C0103: Variable name "dpID" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:641:14: C0103: Variable name "epID" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:654:4: C0103: Variable name "predResult" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:677:12: W0123: Use of eval (eval-used)
modelutils/igtd_models.py:677:42: W0123: Use of eval (eval-used)
modelutils/igtd_models.py:679:37: W0123: Use of eval (eval-used)
modelutils/igtd_models.py:681:12: W0123: Use of eval (eval-used)
modelutils/igtd_models.py:684:12: W0123: Use of eval (eval-used)
modelutils/igtd_models.py:686:35: W0123: Use of eval (eval-used)
modelutils/igtd_models.py:689:36: W0123: Use of eval (eval-used)
modelutils/igtd_models.py:493:0: R0912: Too many branches (27/12) (too-many-branches)
modelutils/igtd_models.py:493:0: R0915: Too many statements (93/50) (too-many-statements)
modelutils/igtd_models.py:542:12: W0612: Unused variable 'testLabel' (unused-variable)
modelutils/igtd_models.py:702:0: C0103: Function name "CNN2D_Classification_Analysis" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:703:22: C0103: Argument name "resultFolder" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:702:0: R0913: Too many arguments (7/5) (too-many-arguments)
modelutils/igtd_models.py:702:0: R0917: Too many positional arguments (7/5) (too-many-positional-arguments)
modelutils/igtd_models.py:702:0: R0914: Too many local variables (37/15) (too-many-locals)
modelutils/igtd_models.py:728:4: C0103: Variable name "trainData" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:729:4: C0103: Variable name "trainLabel" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:730:4: C0103: Variable name "trainSample" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:740:8: C0103: Variable name "valData" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:741:8: C0103: Variable name "valLabel" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:742:8: C0103: Variable name "valSample" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:744:8: C0103: Variable name "valData" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:745:8: C0103: Variable name "valLabel" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:746:8: C0103: Variable name "valSample" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:749:8: C0103: Variable name "testData" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:750:8: C0103: Variable name "testSample" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:752:12: C0103: Variable name "testLabel" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:754:12: C0103: Variable name "testLabel" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:756:8: C0103: Variable name "testData" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:757:8: C0103: Variable name "testLabel" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:758:8: C0103: Variable name "testSample" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:762:8: C0200: Consider using enumerate instead of iterating with range and len (consider-using-enumerate)
modelutils/igtd_models.py:767:4: C0103: Variable name "perM" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:783:8: C0103: Variable name "dpID" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:844:8: C0103: Variable name "numEpoch" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:848:12: C0103: Variable name "numEpoch" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:855:8: W0632: Possible unbalanced tuple unpacking with sequence defined at line 2 of : left side has 2 labels, right side has 1 value (unbalanced-tuple-unpacking)
modelutils/igtd_models.py:855:8: C0103: Variable name "dpID" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:855:14: C0103: Variable name "epID" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:859:8: W0632: Possible unbalanced tuple unpacking with sequence defined at line 2 of : left side has 2 labels, right side has 1 value (unbalanced-tuple-unpacking)
modelutils/igtd_models.py:859:8: C0103: Variable name "dpID" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:859:14: C0103: Variable name "epID" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:872:4: C0103: Variable name "predResult" doesn't conform to snake_case naming style (invalid-name)
modelutils/igtd_models.py:917:12: W0123: Use of eval (eval-used)
modelutils/igtd_models.py:917:42: W0123: Use of eval (eval-used)
modelutils/igtd_models.py:920:12: W0123: Use of eval (eval-used)
modelutils/igtd_models.py:924:16: W0123: Use of eval (eval-used)
modelutils/igtd_models.py:928:43: W0123: Use of eval (eval-used)
modelutils/igtd_models.py:934:12: W0123: Use of eval (eval-used)
modelutils/igtd_models.py:702:0: R0912: Too many branches (31/12) (too-many-branches)
modelutils/igtd_models.py:702:0: R0915: Too many statements (100/50) (too-many-statements)
modelutils/igtd_models.py:752:12: W0612: Unused variable 'testLabel' (unused-variable)
modelutils/igtd_models.py:4:0: W0611: Unused Dict imported from typing (unused-import)
************* Module autodeep.modelutils.trainingutilities
modelutils/trainingutilities.py:51:0: C0301: Line too long (123/100) (line-too-long)
modelutils/trainingutilities.py:71:0: C0301: Line too long (123/100) (line-too-long)
modelutils/trainingutilities.py:1:0: C0114: Missing module docstring (missing-module-docstring)
modelutils/trainingutilities.py:13:0: C0116: Missing function or method docstring (missing-function-docstring)
modelutils/trainingutilities.py:19:28: C0103: Argument name "X_train" doesn't conform to snake_case naming style (invalid-name)
modelutils/trainingutilities.py:19:46: C0103: Argument name "X_val" doesn't conform to snake_case naming style (invalid-name)
modelutils/trainingutilities.py:38:12: C0103: Variable name "X_moved" doesn't conform to snake_case naming style (invalid-name)
modelutils/trainingutilities.py:58:12: C0103: Variable name "X_moved" doesn't conform to snake_case naming style (invalid-name)
modelutils/trainingutilities.py:81:0: C0116: Missing function or method docstring (missing-function-docstring)
modelutils/trainingutilities.py:81:0: C0103: Function name "stop_on_perfect_lossCondition" doesn't conform to snake_case naming style (invalid-name)
modelutils/trainingutilities.py:89:0: C0116: Missing function or method docstring (missing-function-docstring)
modelutils/trainingutilities.py:100:0: C0116: Missing function or method docstring (missing-function-docstring)
modelutils/trainingutilities.py:155:8: R1705: Unnecessary "elif" after "return", remove the leading "el" from "elif" (no-else-return)
modelutils/trainingutilities.py:193:8: R1705: Unnecessary "elif" after "return", remove the leading "el" from "elif" (no-else-return)
modelutils/trainingutilities.py:214:0: C0116: Missing function or method docstring (missing-function-docstring)
modelutils/trainingutilities.py:223:27: R1718: Consider using a set comprehension (consider-using-set-comprehension)
modelutils/trainingutilities.py:227:0: C0116: Missing function or method docstring (missing-function-docstring)
modelutils/trainingutilities.py:244:0: C0116: Missing function or method docstring (missing-function-docstring)
modelutils/trainingutilities.py:255:4: R1702: Too many nested blocks (6/5) (too-many-nested-blocks)
modelutils/trainingutilities.py:244:0: R0912: Too many branches (17/12) (too-many-branches)
modelutils/trainingutilities.py:384:0: C0116: Missing function or method docstring (missing-function-docstring)
modelutils/trainingutilities.py:389:4: R1702: Too many nested blocks (7/5) (too-many-nested-blocks)
modelutils/trainingutilities.py:384:0: R0912: Too many branches (23/12) (too-many-branches)
modelutils/trainingutilities.py:384:0: R0915: Too many statements (52/50) (too-many-statements)
modelutils/trainingutilities.py:486:0: C0116: Missing function or method docstring (missing-function-docstring)
modelutils/trainingutilities.py:491:4: R1702: Too many nested blocks (7/5) (too-many-nested-blocks)
modelutils/trainingutilities.py:486:0: R0912: Too many branches (23/12) (too-many-branches)
modelutils/trainingutilities.py:578:0: C0116: Missing function or method docstring (missing-function-docstring)
modelutils/trainingutilities.py:612:0: C0116: Missing function or method docstring (missing-function-docstring)
************* Module automl
myexamples/automl.py:1:0: C0114: Missing module docstring (missing-module-docstring)
************* Module igtd_notebooks.preprocess_tabs_housing
myexamples/igtd_notebooks/preprocess_tabs_housing.py:32:0: C0301: Line too long (117/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_housing.py:36:0: C0301: Line too long (119/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_housing.py:37:0: C0301: Line too long (119/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_housing.py:42:0: C0301: Line too long (105/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_housing.py:44:0: C0301: Line too long (106/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_housing.py:45:0: C0301: Line too long (110/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_housing.py:65:0: C0301: Line too long (114/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_housing.py:66:0: C0301: Line too long (113/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_housing.py:72:0: C0301: Line too long (105/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_housing.py:1:0: C0114: Missing module docstring (missing-module-docstring)
myexamples/igtd_notebooks/preprocess_tabs_housing.py:7:0: E0401: Unable to import 'dataloaders.dataloader' (import-error)
myexamples/igtd_notebooks/preprocess_tabs_housing.py:7:0: W0401: Wildcard import dataloaders.dataloader (wildcard-import)
myexamples/igtd_notebooks/preprocess_tabs_housing.py:8:0: E0401: Unable to import 'Scripts.IGTD_Functions' (import-error)
myexamples/igtd_notebooks/preprocess_tabs_housing.py:15:0: C0103: Constant name "dataset_name" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_housing.py:16:14: E1123: Unexpected keyword argument 'normalize_features' in function call (unexpected-keyword-arg)
myexamples/igtd_notebooks/preprocess_tabs_housing.py:16:14: E1123: Unexpected keyword argument 'encode_categorical' in function call (unexpected-keyword-arg)
myexamples/igtd_notebooks/preprocess_tabs_housing.py:16:14: E1123: Unexpected keyword argument 'return_extra_info' in function call (unexpected-keyword-arg)
myexamples/igtd_notebooks/preprocess_tabs_housing.py:16:14: E1123: Unexpected keyword argument 'random_state' in function call (unexpected-keyword-arg)
myexamples/igtd_notebooks/preprocess_tabs_housing.py:28:0: C0103: Constant name "num_row" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_housing.py:29:0: C0103: Constant name "num_col" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_housing.py:30:0: C0103: Constant name "num" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_housing.py:33:0: C0103: Constant name "save_image_size" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_housing.py:39:0: C0103: Constant name "fea_dist_method" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_housing.py:40:0: C0103: Constant name "image_dist_method" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_housing.py:41:0: C0103: Constant name "error" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_housing.py:42:0: C0103: Constant name "result_dir" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_housing.py:44:0: C0103: Constant name "max_step" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_housing.py:45:0: C0103: Constant name "val_step" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_housing.py:47:0: C0103: Constant name "min_gain" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_housing.py:69:0: C0103: Constant name "fea_dist_method" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_housing.py:70:0: C0103: Constant name "image_dist_method" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_housing.py:71:0: C0103: Constant name "error" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_housing.py:72:0: C0103: Constant name "result_dir" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_housing.py:8:0: C0411: third party import "Scripts.IGTD_Functions.drop_numerical_outliers" should be placed before first party imports "autodeep.factory.create_data_loader", "dataloaders.dataloader.*"  (wrong-import-order)
myexamples/igtd_notebooks/preprocess_tabs_housing.py:2:0: W0611: Unused Dict imported from typing (unused-import)
myexamples/igtd_notebooks/preprocess_tabs_housing.py:4:0: W0611: Unused numpy imported as np (unused-import)
myexamples/igtd_notebooks/preprocess_tabs_housing.py:5:0: W0611: Unused pandas imported as pd (unused-import)
myexamples/igtd_notebooks/preprocess_tabs_housing.py:8:0: W0611: Unused drop_numerical_outliers imported from Scripts.IGTD_Functions (unused-import)
myexamples/igtd_notebooks/preprocess_tabs_housing.py:8:0: W0611: Unused min_max_transform imported from Scripts.IGTD_Functions (unused-import)
************* Module igtd_notebooks.preprocess_tabs_heloc
myexamples/igtd_notebooks/preprocess_tabs_heloc.py:32:0: C0301: Line too long (117/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_heloc.py:36:0: C0301: Line too long (119/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_heloc.py:37:0: C0301: Line too long (119/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_heloc.py:42:0: C0301: Line too long (105/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_heloc.py:44:0: C0301: Line too long (106/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_heloc.py:45:0: C0301: Line too long (110/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_heloc.py:65:0: C0301: Line too long (114/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_heloc.py:66:0: C0301: Line too long (113/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_heloc.py:72:0: C0301: Line too long (105/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_heloc.py:1:0: C0114: Missing module docstring (missing-module-docstring)
myexamples/igtd_notebooks/preprocess_tabs_heloc.py:7:0: E0401: Unable to import 'dataloaders.dataloader' (import-error)
myexamples/igtd_notebooks/preprocess_tabs_heloc.py:7:0: W0401: Wildcard import dataloaders.dataloader (wildcard-import)
myexamples/igtd_notebooks/preprocess_tabs_heloc.py:8:0: E0401: Unable to import 'Scripts.IGTD_Functions' (import-error)
myexamples/igtd_notebooks/preprocess_tabs_heloc.py:15:0: C0103: Constant name "dataset_name" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_heloc.py:16:14: E1123: Unexpected keyword argument 'normalize_features' in function call (unexpected-keyword-arg)
myexamples/igtd_notebooks/preprocess_tabs_heloc.py:16:14: E1123: Unexpected keyword argument 'encode_categorical' in function call (unexpected-keyword-arg)
myexamples/igtd_notebooks/preprocess_tabs_heloc.py:16:14: E1123: Unexpected keyword argument 'return_extra_info' in function call (unexpected-keyword-arg)
myexamples/igtd_notebooks/preprocess_tabs_heloc.py:16:14: E1123: Unexpected keyword argument 'random_state' in function call (unexpected-keyword-arg)
myexamples/igtd_notebooks/preprocess_tabs_heloc.py:28:0: C0103: Constant name "num_row" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_heloc.py:29:0: C0103: Constant name "num_col" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_heloc.py:30:0: C0103: Constant name "num" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_heloc.py:33:0: C0103: Constant name "save_image_size" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_heloc.py:39:0: C0103: Constant name "fea_dist_method" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_heloc.py:40:0: C0103: Constant name "image_dist_method" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_heloc.py:41:0: C0103: Constant name "error" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_heloc.py:42:0: C0103: Constant name "result_dir" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_heloc.py:44:0: C0103: Constant name "max_step" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_heloc.py:45:0: C0103: Constant name "val_step" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_heloc.py:47:0: C0103: Constant name "min_gain" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_heloc.py:69:0: C0103: Constant name "fea_dist_method" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_heloc.py:70:0: C0103: Constant name "image_dist_method" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_heloc.py:71:0: C0103: Constant name "error" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_heloc.py:72:0: C0103: Constant name "result_dir" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_heloc.py:8:0: C0411: third party import "Scripts.IGTD_Functions.drop_numerical_outliers" should be placed before first party imports "autodeep.factory.create_data_loader", "dataloaders.dataloader.*"  (wrong-import-order)
myexamples/igtd_notebooks/preprocess_tabs_heloc.py:2:0: W0611: Unused Dict imported from typing (unused-import)
myexamples/igtd_notebooks/preprocess_tabs_heloc.py:4:0: W0611: Unused numpy imported as np (unused-import)
myexamples/igtd_notebooks/preprocess_tabs_heloc.py:5:0: W0611: Unused pandas imported as pd (unused-import)
myexamples/igtd_notebooks/preprocess_tabs_heloc.py:8:0: W0611: Unused drop_numerical_outliers imported from Scripts.IGTD_Functions (unused-import)
myexamples/igtd_notebooks/preprocess_tabs_heloc.py:8:0: W0611: Unused min_max_transform imported from Scripts.IGTD_Functions (unused-import)
************* Module igtd_notebooks.preprocess_tabs_covertype
myexamples/igtd_notebooks/preprocess_tabs_covertype.py:32:0: C0301: Line too long (117/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_covertype.py:36:0: C0301: Line too long (119/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_covertype.py:37:0: C0301: Line too long (119/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_covertype.py:42:0: C0301: Line too long (105/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_covertype.py:44:0: C0301: Line too long (106/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_covertype.py:45:0: C0301: Line too long (110/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_covertype.py:65:0: C0301: Line too long (114/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_covertype.py:66:0: C0301: Line too long (113/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_covertype.py:72:0: C0301: Line too long (105/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_covertype.py:1:0: C0114: Missing module docstring (missing-module-docstring)
myexamples/igtd_notebooks/preprocess_tabs_covertype.py:7:0: E0401: Unable to import 'dataloaders.dataloader' (import-error)
myexamples/igtd_notebooks/preprocess_tabs_covertype.py:7:0: W0401: Wildcard import dataloaders.dataloader (wildcard-import)
myexamples/igtd_notebooks/preprocess_tabs_covertype.py:8:0: E0401: Unable to import 'Scripts.IGTD_Functions' (import-error)
myexamples/igtd_notebooks/preprocess_tabs_covertype.py:15:0: C0103: Constant name "dataset_name" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_covertype.py:16:14: E1123: Unexpected keyword argument 'normalize_features' in function call (unexpected-keyword-arg)
myexamples/igtd_notebooks/preprocess_tabs_covertype.py:16:14: E1123: Unexpected keyword argument 'encode_categorical' in function call (unexpected-keyword-arg)
myexamples/igtd_notebooks/preprocess_tabs_covertype.py:16:14: E1123: Unexpected keyword argument 'return_extra_info' in function call (unexpected-keyword-arg)
myexamples/igtd_notebooks/preprocess_tabs_covertype.py:16:14: E1123: Unexpected keyword argument 'random_state' in function call (unexpected-keyword-arg)
myexamples/igtd_notebooks/preprocess_tabs_covertype.py:28:0: C0103: Constant name "num_row" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_covertype.py:29:0: C0103: Constant name "num_col" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_covertype.py:30:0: C0103: Constant name "num" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_covertype.py:33:0: C0103: Constant name "save_image_size" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_covertype.py:39:0: C0103: Constant name "fea_dist_method" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_covertype.py:40:0: C0103: Constant name "image_dist_method" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_covertype.py:41:0: C0103: Constant name "error" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_covertype.py:42:0: C0103: Constant name "result_dir" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_covertype.py:44:0: C0103: Constant name "max_step" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_covertype.py:45:0: C0103: Constant name "val_step" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_covertype.py:47:0: C0103: Constant name "min_gain" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_covertype.py:69:0: C0103: Constant name "fea_dist_method" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_covertype.py:70:0: C0103: Constant name "image_dist_method" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_covertype.py:71:0: C0103: Constant name "error" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_covertype.py:72:0: C0103: Constant name "result_dir" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_covertype.py:8:0: C0411: third party import "Scripts.IGTD_Functions.drop_numerical_outliers" should be placed before first party imports "autodeep.factory.create_data_loader", "dataloaders.dataloader.*"  (wrong-import-order)
myexamples/igtd_notebooks/preprocess_tabs_covertype.py:2:0: W0611: Unused Dict imported from typing (unused-import)
myexamples/igtd_notebooks/preprocess_tabs_covertype.py:4:0: W0611: Unused numpy imported as np (unused-import)
myexamples/igtd_notebooks/preprocess_tabs_covertype.py:5:0: W0611: Unused pandas imported as pd (unused-import)
myexamples/igtd_notebooks/preprocess_tabs_covertype.py:8:0: W0611: Unused drop_numerical_outliers imported from Scripts.IGTD_Functions (unused-import)
myexamples/igtd_notebooks/preprocess_tabs_covertype.py:8:0: W0611: Unused min_max_transform imported from Scripts.IGTD_Functions (unused-import)
************* Module igtd_notebooks.preprocess_tabs_ageconditions
myexamples/igtd_notebooks/preprocess_tabs_ageconditions.py:32:0: C0301: Line too long (117/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_ageconditions.py:36:0: C0301: Line too long (119/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_ageconditions.py:37:0: C0301: Line too long (119/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_ageconditions.py:42:0: C0301: Line too long (105/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_ageconditions.py:44:0: C0301: Line too long (106/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_ageconditions.py:45:0: C0301: Line too long (110/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_ageconditions.py:65:0: C0301: Line too long (114/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_ageconditions.py:66:0: C0301: Line too long (113/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_ageconditions.py:72:0: C0301: Line too long (105/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_ageconditions.py:1:0: C0114: Missing module docstring (missing-module-docstring)
myexamples/igtd_notebooks/preprocess_tabs_ageconditions.py:7:0: E0401: Unable to import 'dataloaders.dataloader' (import-error)
myexamples/igtd_notebooks/preprocess_tabs_ageconditions.py:7:0: W0401: Wildcard import dataloaders.dataloader (wildcard-import)
myexamples/igtd_notebooks/preprocess_tabs_ageconditions.py:8:0: E0401: Unable to import 'Scripts.IGTD_Functions' (import-error)
myexamples/igtd_notebooks/preprocess_tabs_ageconditions.py:15:0: C0103: Constant name "dataset_name" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_ageconditions.py:16:14: E1123: Unexpected keyword argument 'normalize_features' in function call (unexpected-keyword-arg)
myexamples/igtd_notebooks/preprocess_tabs_ageconditions.py:16:14: E1123: Unexpected keyword argument 'encode_categorical' in function call (unexpected-keyword-arg)
myexamples/igtd_notebooks/preprocess_tabs_ageconditions.py:16:14: E1123: Unexpected keyword argument 'return_extra_info' in function call (unexpected-keyword-arg)
myexamples/igtd_notebooks/preprocess_tabs_ageconditions.py:16:14: E1123: Unexpected keyword argument 'random_state' in function call (unexpected-keyword-arg)
myexamples/igtd_notebooks/preprocess_tabs_ageconditions.py:28:0: C0103: Constant name "num_row" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_ageconditions.py:29:0: C0103: Constant name "num_col" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_ageconditions.py:30:0: C0103: Constant name "num" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_ageconditions.py:33:0: C0103: Constant name "save_image_size" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_ageconditions.py:39:0: C0103: Constant name "fea_dist_method" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_ageconditions.py:40:0: C0103: Constant name "image_dist_method" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_ageconditions.py:41:0: C0103: Constant name "error" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_ageconditions.py:42:0: C0103: Constant name "result_dir" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_ageconditions.py:44:0: C0103: Constant name "max_step" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_ageconditions.py:45:0: C0103: Constant name "val_step" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_ageconditions.py:47:0: C0103: Constant name "min_gain" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_ageconditions.py:69:0: C0103: Constant name "fea_dist_method" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_ageconditions.py:70:0: C0103: Constant name "image_dist_method" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_ageconditions.py:71:0: C0103: Constant name "error" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_ageconditions.py:72:0: C0103: Constant name "result_dir" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_ageconditions.py:8:0: C0411: third party import "Scripts.IGTD_Functions.drop_numerical_outliers" should be placed before first party imports "autodeep.factory.create_data_loader", "dataloaders.dataloader.*"  (wrong-import-order)
myexamples/igtd_notebooks/preprocess_tabs_ageconditions.py:2:0: W0611: Unused Dict imported from typing (unused-import)
myexamples/igtd_notebooks/preprocess_tabs_ageconditions.py:4:0: W0611: Unused numpy imported as np (unused-import)
myexamples/igtd_notebooks/preprocess_tabs_ageconditions.py:5:0: W0611: Unused pandas imported as pd (unused-import)
myexamples/igtd_notebooks/preprocess_tabs_ageconditions.py:8:0: W0611: Unused drop_numerical_outliers imported from Scripts.IGTD_Functions (unused-import)
myexamples/igtd_notebooks/preprocess_tabs_ageconditions.py:8:0: W0611: Unused min_max_transform imported from Scripts.IGTD_Functions (unused-import)
************* Module igtd_notebooks.preprocess_tabs_adult
myexamples/igtd_notebooks/preprocess_tabs_adult.py:32:0: C0301: Line too long (117/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_adult.py:36:0: C0301: Line too long (119/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_adult.py:37:0: C0301: Line too long (119/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_adult.py:42:0: C0301: Line too long (105/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_adult.py:44:0: C0301: Line too long (106/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_adult.py:45:0: C0301: Line too long (110/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_adult.py:65:0: C0301: Line too long (114/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_adult.py:66:0: C0301: Line too long (113/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_adult.py:72:0: C0301: Line too long (105/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_adult.py:1:0: C0114: Missing module docstring (missing-module-docstring)
myexamples/igtd_notebooks/preprocess_tabs_adult.py:7:0: E0401: Unable to import 'dataloaders.dataloader' (import-error)
myexamples/igtd_notebooks/preprocess_tabs_adult.py:7:0: W0401: Wildcard import dataloaders.dataloader (wildcard-import)
myexamples/igtd_notebooks/preprocess_tabs_adult.py:8:0: E0401: Unable to import 'Scripts.IGTD_Functions' (import-error)
myexamples/igtd_notebooks/preprocess_tabs_adult.py:15:0: C0103: Constant name "dataset_name" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_adult.py:16:14: E1123: Unexpected keyword argument 'normalize_features' in function call (unexpected-keyword-arg)
myexamples/igtd_notebooks/preprocess_tabs_adult.py:16:14: E1123: Unexpected keyword argument 'encode_categorical' in function call (unexpected-keyword-arg)
myexamples/igtd_notebooks/preprocess_tabs_adult.py:16:14: E1123: Unexpected keyword argument 'return_extra_info' in function call (unexpected-keyword-arg)
myexamples/igtd_notebooks/preprocess_tabs_adult.py:16:14: E1123: Unexpected keyword argument 'random_state' in function call (unexpected-keyword-arg)
myexamples/igtd_notebooks/preprocess_tabs_adult.py:28:0: C0103: Constant name "num_row" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_adult.py:29:0: C0103: Constant name "num_col" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_adult.py:30:0: C0103: Constant name "num" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_adult.py:33:0: C0103: Constant name "save_image_size" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_adult.py:39:0: C0103: Constant name "fea_dist_method" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_adult.py:40:0: C0103: Constant name "image_dist_method" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_adult.py:41:0: C0103: Constant name "error" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_adult.py:42:0: C0103: Constant name "result_dir" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_adult.py:44:0: C0103: Constant name "max_step" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_adult.py:45:0: C0103: Constant name "val_step" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_adult.py:47:0: C0103: Constant name "min_gain" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_adult.py:69:0: C0103: Constant name "fea_dist_method" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_adult.py:70:0: C0103: Constant name "image_dist_method" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_adult.py:71:0: C0103: Constant name "error" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_adult.py:72:0: C0103: Constant name "result_dir" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_adult.py:8:0: C0411: third party import "Scripts.IGTD_Functions.drop_numerical_outliers" should be placed before first party imports "autodeep.factory.create_data_loader", "dataloaders.dataloader.*"  (wrong-import-order)
myexamples/igtd_notebooks/preprocess_tabs_adult.py:2:0: W0611: Unused Dict imported from typing (unused-import)
myexamples/igtd_notebooks/preprocess_tabs_adult.py:4:0: W0611: Unused numpy imported as np (unused-import)
myexamples/igtd_notebooks/preprocess_tabs_adult.py:5:0: W0611: Unused pandas imported as pd (unused-import)
myexamples/igtd_notebooks/preprocess_tabs_adult.py:8:0: W0611: Unused drop_numerical_outliers imported from Scripts.IGTD_Functions (unused-import)
myexamples/igtd_notebooks/preprocess_tabs_adult.py:8:0: W0611: Unused min_max_transform imported from Scripts.IGTD_Functions (unused-import)
************* Module igtd_notebooks.preprocess_tabs_breastcancer
myexamples/igtd_notebooks/preprocess_tabs_breastcancer.py:32:0: C0301: Line too long (117/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_breastcancer.py:36:0: C0301: Line too long (119/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_breastcancer.py:37:0: C0301: Line too long (119/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_breastcancer.py:42:0: C0301: Line too long (105/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_breastcancer.py:44:0: C0301: Line too long (106/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_breastcancer.py:45:0: C0301: Line too long (110/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_breastcancer.py:65:0: C0301: Line too long (114/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_breastcancer.py:66:0: C0301: Line too long (113/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_breastcancer.py:72:0: C0301: Line too long (105/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_breastcancer.py:1:0: C0114: Missing module docstring (missing-module-docstring)
myexamples/igtd_notebooks/preprocess_tabs_breastcancer.py:7:0: E0401: Unable to import 'dataloaders.dataloader' (import-error)
myexamples/igtd_notebooks/preprocess_tabs_breastcancer.py:7:0: W0401: Wildcard import dataloaders.dataloader (wildcard-import)
myexamples/igtd_notebooks/preprocess_tabs_breastcancer.py:8:0: E0401: Unable to import 'Scripts.IGTD_Functions' (import-error)
myexamples/igtd_notebooks/preprocess_tabs_breastcancer.py:15:0: C0103: Constant name "dataset_name" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_breastcancer.py:16:14: E1123: Unexpected keyword argument 'normalize_features' in function call (unexpected-keyword-arg)
myexamples/igtd_notebooks/preprocess_tabs_breastcancer.py:16:14: E1123: Unexpected keyword argument 'encode_categorical' in function call (unexpected-keyword-arg)
myexamples/igtd_notebooks/preprocess_tabs_breastcancer.py:16:14: E1123: Unexpected keyword argument 'return_extra_info' in function call (unexpected-keyword-arg)
myexamples/igtd_notebooks/preprocess_tabs_breastcancer.py:16:14: E1123: Unexpected keyword argument 'random_state' in function call (unexpected-keyword-arg)
myexamples/igtd_notebooks/preprocess_tabs_breastcancer.py:28:0: C0103: Constant name "num_row" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_breastcancer.py:29:0: C0103: Constant name "num_col" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_breastcancer.py:30:0: C0103: Constant name "num" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_breastcancer.py:33:0: C0103: Constant name "save_image_size" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_breastcancer.py:39:0: C0103: Constant name "fea_dist_method" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_breastcancer.py:40:0: C0103: Constant name "image_dist_method" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_breastcancer.py:41:0: C0103: Constant name "error" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_breastcancer.py:42:0: C0103: Constant name "result_dir" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_breastcancer.py:44:0: C0103: Constant name "max_step" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_breastcancer.py:45:0: C0103: Constant name "val_step" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_breastcancer.py:47:0: C0103: Constant name "min_gain" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_breastcancer.py:69:0: C0103: Constant name "fea_dist_method" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_breastcancer.py:70:0: C0103: Constant name "image_dist_method" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_breastcancer.py:71:0: C0103: Constant name "error" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_breastcancer.py:72:0: C0103: Constant name "result_dir" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_breastcancer.py:8:0: C0411: third party import "Scripts.IGTD_Functions.drop_numerical_outliers" should be placed before first party imports "autodeep.factory.create_data_loader", "dataloaders.dataloader.*"  (wrong-import-order)
myexamples/igtd_notebooks/preprocess_tabs_breastcancer.py:2:0: W0611: Unused Dict imported from typing (unused-import)
myexamples/igtd_notebooks/preprocess_tabs_breastcancer.py:4:0: W0611: Unused numpy imported as np (unused-import)
myexamples/igtd_notebooks/preprocess_tabs_breastcancer.py:5:0: W0611: Unused pandas imported as pd (unused-import)
myexamples/igtd_notebooks/preprocess_tabs_breastcancer.py:8:0: W0611: Unused drop_numerical_outliers imported from Scripts.IGTD_Functions (unused-import)
myexamples/igtd_notebooks/preprocess_tabs_breastcancer.py:8:0: W0611: Unused min_max_transform imported from Scripts.IGTD_Functions (unused-import)
************* Module igtd_notebooks.preprocess_tabs_iris
myexamples/igtd_notebooks/preprocess_tabs_iris.py:32:0: C0301: Line too long (117/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_iris.py:36:0: C0301: Line too long (119/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_iris.py:37:0: C0301: Line too long (119/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_iris.py:42:0: C0301: Line too long (105/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_iris.py:44:0: C0301: Line too long (106/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_iris.py:45:0: C0301: Line too long (110/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_iris.py:65:0: C0301: Line too long (114/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_iris.py:66:0: C0301: Line too long (113/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_iris.py:72:0: C0301: Line too long (105/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_iris.py:1:0: C0114: Missing module docstring (missing-module-docstring)
myexamples/igtd_notebooks/preprocess_tabs_iris.py:7:0: E0401: Unable to import 'dataloaders.dataloader' (import-error)
myexamples/igtd_notebooks/preprocess_tabs_iris.py:7:0: W0401: Wildcard import dataloaders.dataloader (wildcard-import)
myexamples/igtd_notebooks/preprocess_tabs_iris.py:8:0: E0401: Unable to import 'Scripts.IGTD_Functions' (import-error)
myexamples/igtd_notebooks/preprocess_tabs_iris.py:15:0: C0103: Constant name "dataset_name" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_iris.py:16:14: E1123: Unexpected keyword argument 'normalize_features' in function call (unexpected-keyword-arg)
myexamples/igtd_notebooks/preprocess_tabs_iris.py:16:14: E1123: Unexpected keyword argument 'encode_categorical' in function call (unexpected-keyword-arg)
myexamples/igtd_notebooks/preprocess_tabs_iris.py:16:14: E1123: Unexpected keyword argument 'return_extra_info' in function call (unexpected-keyword-arg)
myexamples/igtd_notebooks/preprocess_tabs_iris.py:16:14: E1123: Unexpected keyword argument 'random_state' in function call (unexpected-keyword-arg)
myexamples/igtd_notebooks/preprocess_tabs_iris.py:28:0: C0103: Constant name "num_row" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_iris.py:29:0: C0103: Constant name "num_col" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_iris.py:30:0: C0103: Constant name "num" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_iris.py:33:0: C0103: Constant name "save_image_size" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_iris.py:39:0: C0103: Constant name "fea_dist_method" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_iris.py:40:0: C0103: Constant name "image_dist_method" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_iris.py:41:0: C0103: Constant name "error" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_iris.py:42:0: C0103: Constant name "result_dir" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_iris.py:44:0: C0103: Constant name "max_step" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_iris.py:45:0: C0103: Constant name "val_step" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_iris.py:47:0: C0103: Constant name "min_gain" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_iris.py:69:0: C0103: Constant name "fea_dist_method" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_iris.py:70:0: C0103: Constant name "image_dist_method" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_iris.py:71:0: C0103: Constant name "error" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_iris.py:72:0: C0103: Constant name "result_dir" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_iris.py:8:0: C0411: third party import "Scripts.IGTD_Functions.drop_numerical_outliers" should be placed before first party imports "autodeep.factory.create_data_loader", "dataloaders.dataloader.*"  (wrong-import-order)
myexamples/igtd_notebooks/preprocess_tabs_iris.py:2:0: W0611: Unused Dict imported from typing (unused-import)
myexamples/igtd_notebooks/preprocess_tabs_iris.py:4:0: W0611: Unused numpy imported as np (unused-import)
myexamples/igtd_notebooks/preprocess_tabs_iris.py:5:0: W0611: Unused pandas imported as pd (unused-import)
myexamples/igtd_notebooks/preprocess_tabs_iris.py:8:0: W0611: Unused drop_numerical_outliers imported from Scripts.IGTD_Functions (unused-import)
myexamples/igtd_notebooks/preprocess_tabs_iris.py:8:0: W0611: Unused min_max_transform imported from Scripts.IGTD_Functions (unused-import)
************* Module igtd_notebooks.preprocess_tabs_titanic
myexamples/igtd_notebooks/preprocess_tabs_titanic.py:32:0: C0301: Line too long (117/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_titanic.py:36:0: C0301: Line too long (119/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_titanic.py:37:0: C0301: Line too long (119/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_titanic.py:42:0: C0301: Line too long (105/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_titanic.py:44:0: C0301: Line too long (106/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_titanic.py:45:0: C0301: Line too long (110/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_titanic.py:65:0: C0301: Line too long (114/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_titanic.py:66:0: C0301: Line too long (113/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_titanic.py:72:0: C0301: Line too long (105/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_titanic.py:1:0: C0114: Missing module docstring (missing-module-docstring)
myexamples/igtd_notebooks/preprocess_tabs_titanic.py:7:0: E0401: Unable to import 'dataloaders.dataloader' (import-error)
myexamples/igtd_notebooks/preprocess_tabs_titanic.py:7:0: W0401: Wildcard import dataloaders.dataloader (wildcard-import)
myexamples/igtd_notebooks/preprocess_tabs_titanic.py:8:0: E0401: Unable to import 'Scripts.IGTD_Functions' (import-error)
myexamples/igtd_notebooks/preprocess_tabs_titanic.py:15:0: C0103: Constant name "dataset_name" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_titanic.py:16:14: E1123: Unexpected keyword argument 'normalize_features' in function call (unexpected-keyword-arg)
myexamples/igtd_notebooks/preprocess_tabs_titanic.py:16:14: E1123: Unexpected keyword argument 'encode_categorical' in function call (unexpected-keyword-arg)
myexamples/igtd_notebooks/preprocess_tabs_titanic.py:16:14: E1123: Unexpected keyword argument 'return_extra_info' in function call (unexpected-keyword-arg)
myexamples/igtd_notebooks/preprocess_tabs_titanic.py:16:14: E1123: Unexpected keyword argument 'random_state' in function call (unexpected-keyword-arg)
myexamples/igtd_notebooks/preprocess_tabs_titanic.py:28:0: C0103: Constant name "num_row" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_titanic.py:29:0: C0103: Constant name "num_col" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_titanic.py:30:0: C0103: Constant name "num" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_titanic.py:33:0: C0103: Constant name "save_image_size" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_titanic.py:39:0: C0103: Constant name "fea_dist_method" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_titanic.py:40:0: C0103: Constant name "image_dist_method" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_titanic.py:41:0: C0103: Constant name "error" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_titanic.py:42:0: C0103: Constant name "result_dir" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_titanic.py:44:0: C0103: Constant name "max_step" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_titanic.py:45:0: C0103: Constant name "val_step" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_titanic.py:47:0: C0103: Constant name "min_gain" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_titanic.py:69:0: C0103: Constant name "fea_dist_method" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_titanic.py:70:0: C0103: Constant name "image_dist_method" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_titanic.py:71:0: C0103: Constant name "error" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_titanic.py:72:0: C0103: Constant name "result_dir" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_titanic.py:8:0: C0411: third party import "Scripts.IGTD_Functions.drop_numerical_outliers" should be placed before first party imports "autodeep.factory.create_data_loader", "dataloaders.dataloader.*"  (wrong-import-order)
myexamples/igtd_notebooks/preprocess_tabs_titanic.py:2:0: W0611: Unused Dict imported from typing (unused-import)
myexamples/igtd_notebooks/preprocess_tabs_titanic.py:4:0: W0611: Unused numpy imported as np (unused-import)
myexamples/igtd_notebooks/preprocess_tabs_titanic.py:5:0: W0611: Unused pandas imported as pd (unused-import)
myexamples/igtd_notebooks/preprocess_tabs_titanic.py:8:0: W0611: Unused drop_numerical_outliers imported from Scripts.IGTD_Functions (unused-import)
myexamples/igtd_notebooks/preprocess_tabs_titanic.py:8:0: W0611: Unused min_max_transform imported from Scripts.IGTD_Functions (unused-import)
************* Module igtd_notebooks.preprocess_tabs_diabetes
myexamples/igtd_notebooks/preprocess_tabs_diabetes.py:33:0: C0301: Line too long (117/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_diabetes.py:37:0: C0301: Line too long (119/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_diabetes.py:38:0: C0301: Line too long (119/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_diabetes.py:43:0: C0301: Line too long (105/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_diabetes.py:45:0: C0301: Line too long (106/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_diabetes.py:46:0: C0301: Line too long (110/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_diabetes.py:66:0: C0301: Line too long (114/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_diabetes.py:67:0: C0301: Line too long (113/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_diabetes.py:73:0: C0301: Line too long (105/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_diabetes.py:1:0: C0114: Missing module docstring (missing-module-docstring)
myexamples/igtd_notebooks/preprocess_tabs_diabetes.py:6:0: E0611: No name 'create_full_data_loader' in module 'autodeep.factory' (no-name-in-module)
myexamples/igtd_notebooks/preprocess_tabs_diabetes.py:7:0: E0401: Unable to import 'dataloaders.fulldataloader' (import-error)
myexamples/igtd_notebooks/preprocess_tabs_diabetes.py:7:0: W0401: Wildcard import dataloaders.fulldataloader (wildcard-import)
myexamples/igtd_notebooks/preprocess_tabs_diabetes.py:8:0: E0401: Unable to import 'Scripts.IGTD_Functions' (import-error)
myexamples/igtd_notebooks/preprocess_tabs_diabetes.py:15:0: C0103: Constant name "dataset_name" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_diabetes.py:26:0: W0104: Statement seems to have no effect (pointless-statement)
myexamples/igtd_notebooks/preprocess_tabs_diabetes.py:29:0: C0103: Constant name "num_row" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_diabetes.py:30:0: C0103: Constant name "num_col" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_diabetes.py:31:0: C0103: Constant name "num" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_diabetes.py:34:0: C0103: Constant name "save_image_size" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_diabetes.py:40:0: C0103: Constant name "fea_dist_method" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_diabetes.py:41:0: C0103: Constant name "image_dist_method" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_diabetes.py:42:0: C0103: Constant name "error" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_diabetes.py:43:0: C0103: Constant name "result_dir" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_diabetes.py:45:0: C0103: Constant name "max_step" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_diabetes.py:46:0: C0103: Constant name "val_step" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_diabetes.py:48:0: C0103: Constant name "min_gain" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_diabetes.py:70:0: C0103: Constant name "fea_dist_method" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_diabetes.py:71:0: C0103: Constant name "image_dist_method" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_diabetes.py:72:0: C0103: Constant name "error" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_diabetes.py:73:0: C0103: Constant name "result_dir" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_diabetes.py:8:0: C0411: third party import "Scripts.IGTD_Functions.drop_numerical_outliers" should be placed before first party imports "autodeep.factory.create_full_data_loader", "dataloaders.fulldataloader.*"  (wrong-import-order)
myexamples/igtd_notebooks/preprocess_tabs_diabetes.py:2:0: W0611: Unused Dict imported from typing (unused-import)
myexamples/igtd_notebooks/preprocess_tabs_diabetes.py:4:0: W0611: Unused numpy imported as np (unused-import)
myexamples/igtd_notebooks/preprocess_tabs_diabetes.py:5:0: W0611: Unused pandas imported as pd (unused-import)
myexamples/igtd_notebooks/preprocess_tabs_diabetes.py:8:0: W0611: Unused drop_numerical_outliers imported from Scripts.IGTD_Functions (unused-import)
myexamples/igtd_notebooks/preprocess_tabs_diabetes.py:8:0: W0611: Unused min_max_transform imported from Scripts.IGTD_Functions (unused-import)
************* Module igtd_notebooks.preprocess_tabs_creditcard
myexamples/igtd_notebooks/preprocess_tabs_creditcard.py:32:0: C0301: Line too long (117/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_creditcard.py:36:0: C0301: Line too long (119/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_creditcard.py:37:0: C0301: Line too long (119/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_creditcard.py:42:0: C0301: Line too long (105/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_creditcard.py:44:0: C0301: Line too long (106/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_creditcard.py:45:0: C0301: Line too long (110/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_creditcard.py:65:0: C0301: Line too long (114/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_creditcard.py:66:0: C0301: Line too long (113/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_creditcard.py:72:0: C0301: Line too long (105/100) (line-too-long)
myexamples/igtd_notebooks/preprocess_tabs_creditcard.py:1:0: C0114: Missing module docstring (missing-module-docstring)
myexamples/igtd_notebooks/preprocess_tabs_creditcard.py:7:0: E0401: Unable to import 'dataloaders.dataloader' (import-error)
myexamples/igtd_notebooks/preprocess_tabs_creditcard.py:7:0: W0401: Wildcard import dataloaders.dataloader (wildcard-import)
myexamples/igtd_notebooks/preprocess_tabs_creditcard.py:8:0: E0401: Unable to import 'Scripts.IGTD_Functions' (import-error)
myexamples/igtd_notebooks/preprocess_tabs_creditcard.py:15:0: C0103: Constant name "dataset_name" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_creditcard.py:16:14: E1123: Unexpected keyword argument 'normalize_features' in function call (unexpected-keyword-arg)
myexamples/igtd_notebooks/preprocess_tabs_creditcard.py:16:14: E1123: Unexpected keyword argument 'encode_categorical' in function call (unexpected-keyword-arg)
myexamples/igtd_notebooks/preprocess_tabs_creditcard.py:16:14: E1123: Unexpected keyword argument 'return_extra_info' in function call (unexpected-keyword-arg)
myexamples/igtd_notebooks/preprocess_tabs_creditcard.py:16:14: E1123: Unexpected keyword argument 'random_state' in function call (unexpected-keyword-arg)
myexamples/igtd_notebooks/preprocess_tabs_creditcard.py:28:0: C0103: Constant name "num_row" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_creditcard.py:29:0: C0103: Constant name "num_col" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_creditcard.py:30:0: C0103: Constant name "num" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_creditcard.py:33:0: C0103: Constant name "save_image_size" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_creditcard.py:39:0: C0103: Constant name "fea_dist_method" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_creditcard.py:40:0: C0103: Constant name "image_dist_method" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_creditcard.py:41:0: C0103: Constant name "error" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_creditcard.py:42:0: C0103: Constant name "result_dir" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_creditcard.py:44:0: C0103: Constant name "max_step" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_creditcard.py:45:0: C0103: Constant name "val_step" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_creditcard.py:47:0: C0103: Constant name "min_gain" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_creditcard.py:69:0: C0103: Constant name "fea_dist_method" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_creditcard.py:70:0: C0103: Constant name "image_dist_method" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_creditcard.py:71:0: C0103: Constant name "error" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_creditcard.py:72:0: C0103: Constant name "result_dir" doesn't conform to UPPER_CASE naming style (invalid-name)
myexamples/igtd_notebooks/preprocess_tabs_creditcard.py:8:0: C0411: third party import "Scripts.IGTD_Functions.drop_numerical_outliers" should be placed before first party imports "autodeep.factory.create_data_loader", "dataloaders.dataloader.*"  (wrong-import-order)
myexamples/igtd_notebooks/preprocess_tabs_creditcard.py:2:0: W0611: Unused Dict imported from typing (unused-import)
myexamples/igtd_notebooks/preprocess_tabs_creditcard.py:4:0: W0611: Unused numpy imported as np (unused-import)
myexamples/igtd_notebooks/preprocess_tabs_creditcard.py:5:0: W0611: Unused pandas imported as pd (unused-import)
myexamples/igtd_notebooks/preprocess_tabs_creditcard.py:8:0: W0611: Unused drop_numerical_outliers imported from Scripts.IGTD_Functions (unused-import)
myexamples/igtd_notebooks/preprocess_tabs_creditcard.py:8:0: W0611: Unused min_max_transform imported from Scripts.IGTD_Functions (unused-import)
************* Module autodeep.modelsdefinition.FTTransformerModel
modelsdefinition/FTTransformerModel.py:1:0: C0114: Missing module docstring (missing-module-docstring)
modelsdefinition/FTTransformerModel.py:1:0: C0103: Module name "FTTransformerModel" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/FTTransformerModel.py:10:0: C0115: Missing class docstring (missing-class-docstring)
modelsdefinition/FTTransformerModel.py:20:4: C0116: Missing function or method docstring (missing-function-docstring)
modelsdefinition/FTTransformerModel.py:47:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/FTTransformerModel.py:54:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
************* Module autodeep.modelsdefinition.SoftOrdering1DCNN
modelsdefinition/SoftOrdering1DCNN.py:191:0: C0301: Line too long (107/100) (line-too-long)
modelsdefinition/SoftOrdering1DCNN.py:213:0: C0301: Line too long (107/100) (line-too-long)
modelsdefinition/SoftOrdering1DCNN.py:276:0: C0301: Line too long (102/100) (line-too-long)
modelsdefinition/SoftOrdering1DCNN.py:524:0: C0301: Line too long (117/100) (line-too-long)
modelsdefinition/SoftOrdering1DCNN.py:528:0: C0301: Line too long (109/100) (line-too-long)
modelsdefinition/SoftOrdering1DCNN.py:642:0: C0301: Line too long (128/100) (line-too-long)
modelsdefinition/SoftOrdering1DCNN.py:1:0: C0114: Missing module docstring (missing-module-docstring)
modelsdefinition/SoftOrdering1DCNN.py:1:0: C0103: Module name "SoftOrdering1DCNN" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/SoftOrdering1DCNN.py:7:0: R0402: Use 'from torch import nn' instead (consider-using-from-import)
modelsdefinition/SoftOrdering1DCNN.py:9:0: R0402: Use 'from torch import optim' instead (consider-using-from-import)
modelsdefinition/SoftOrdering1DCNN.py:25:0: C0115: Missing class docstring (missing-class-docstring)
modelsdefinition/SoftOrdering1DCNN.py:25:0: R0902: Too many instance attributes (27/7) (too-many-instance-attributes)
modelsdefinition/SoftOrdering1DCNN.py:27:8: R1725: Consider using Python 3 style super() without arguments (super-with-arguments)
modelsdefinition/SoftOrdering1DCNN.py:86:4: C0116: Missing function or method docstring (missing-function-docstring)
modelsdefinition/SoftOrdering1DCNN.py:124:0: C0115: Missing class docstring (missing-class-docstring)
modelsdefinition/SoftOrdering1DCNN.py:124:0: R0902: Too many instance attributes (21/7) (too-many-instance-attributes)
modelsdefinition/SoftOrdering1DCNN.py:161:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/SoftOrdering1DCNN.py:173:4: C0116: Missing function or method docstring (missing-function-docstring)
modelsdefinition/SoftOrdering1DCNN.py:177:4: C0116: Missing function or method docstring (missing-function-docstring)
modelsdefinition/SoftOrdering1DCNN.py:196:4: C0116: Missing function or method docstring (missing-function-docstring)
modelsdefinition/SoftOrdering1DCNN.py:210:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/SoftOrdering1DCNN.py:222:4: C0116: Missing function or method docstring (missing-function-docstring)
modelsdefinition/SoftOrdering1DCNN.py:224:12: W0612: Unused variable 'i' (unused-variable)
modelsdefinition/SoftOrdering1DCNN.py:238:4: C0116: Missing function or method docstring (missing-function-docstring)
modelsdefinition/SoftOrdering1DCNN.py:279:40: C0103: Argument name "X_train" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/SoftOrdering1DCNN.py:280:8: C0103: Variable name "X_train_tensor" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/SoftOrdering1DCNN.py:300:52: C0103: Argument name "X_train" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/SoftOrdering1DCNN.py:301:8: C0103: Variable name "X_train_tensor" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/SoftOrdering1DCNN.py:346:48: W0613: Unused argument 'default_params' (unused-argument)
modelsdefinition/SoftOrdering1DCNN.py:395:8: C0103: Argument name "X" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/SoftOrdering1DCNN.py:393:4: R0913: Too many arguments (8/5) (too-many-arguments)
modelsdefinition/SoftOrdering1DCNN.py:393:4: R0917: Too many positional arguments (8/5) (too-many-positional-arguments)
modelsdefinition/SoftOrdering1DCNN.py:393:4: R0914: Too many local variables (27/15) (too-many-locals)
modelsdefinition/SoftOrdering1DCNN.py:444:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/SoftOrdering1DCNN.py:447:8: C0103: Variable name "X_train" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/SoftOrdering1DCNN.py:447:17: C0103: Variable name "X_val" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/SoftOrdering1DCNN.py:464:8: R0914: Too many local variables (19/15) (too-many-locals)
modelsdefinition/SoftOrdering1DCNN.py:465:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/SoftOrdering1DCNN.py:555:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/SoftOrdering1DCNN.py:556:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/SoftOrdering1DCNN.py:464:8: R0915: Too many statements (52/50) (too-many-statements)
modelsdefinition/SoftOrdering1DCNN.py:596:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/SoftOrdering1DCNN.py:597:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/SoftOrdering1DCNN.py:601:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/SoftOrdering1DCNN.py:602:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/SoftOrdering1DCNN.py:393:4: R0915: Too many statements (91/50) (too-many-statements)
modelsdefinition/SoftOrdering1DCNN.py:606:4: C0116: Missing function or method docstring (missing-function-docstring)
modelsdefinition/SoftOrdering1DCNN.py:606:22: C0103: Argument name "X_test" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/SoftOrdering1DCNN.py:651:8: R1705: Unnecessary "else" after "return", remove the "else" and de-indent the code inside it (no-else-return)
modelsdefinition/SoftOrdering1DCNN.py:171:8: W0201: Attribute 'model' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/SoftOrdering1DCNN.py:489:12: W0201: Attribute 'model' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/SoftOrdering1DCNN.py:259:12: W0201: Attribute 'loss_fn' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/SoftOrdering1DCNN.py:271:12: W0201: Attribute 'loss_fn' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/SoftOrdering1DCNN.py:273:12: W0201: Attribute 'loss_fn' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/SoftOrdering1DCNN.py:353:12: W0201: Attribute 'optimizer' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/SoftOrdering1DCNN.py:360:12: W0201: Attribute 'optimizer' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/SoftOrdering1DCNN.py:366:12: W0201: Attribute 'optimizer' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/SoftOrdering1DCNN.py:372:12: W0201: Attribute 'scheduler' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/SoftOrdering1DCNN.py:379:12: W0201: Attribute 'scheduler' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/SoftOrdering1DCNN.py:384:12: W0201: Attribute 'scheduler' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/SoftOrdering1DCNN.py:423:8: W0201: Attribute 'default_params' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/SoftOrdering1DCNN.py:430:8: W0201: Attribute 'num_features' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/SoftOrdering1DCNN.py:434:12: W0201: Attribute 'num_targets' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/SoftOrdering1DCNN.py:436:12: W0201: Attribute 'num_targets' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/SoftOrdering1DCNN.py:440:12: W0201: Attribute 'num_targets' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/SoftOrdering1DCNN.py:456:8: W0201: Attribute 'torch_dataset_train' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/SoftOrdering1DCNN.py:459:8: W0201: Attribute 'torch_dataset_val' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/SoftOrdering1DCNN.py:573:8: W0201: Attribute 'evaluator' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/SoftOrdering1DCNN.py:598:8: W0201: Attribute 'best_model' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/SoftOrdering1DCNN.py:657:0: C0115: Missing class docstring (missing-class-docstring)
************* Module autodeep.modelsdefinition.MLP
modelsdefinition/MLP.py:140:0: C0301: Line too long (137/100) (line-too-long)
modelsdefinition/MLP.py:1:0: C0114: Missing module docstring (missing-module-docstring)
modelsdefinition/MLP.py:1:0: C0103: Module name "MLP" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/MLP.py:18:0: W0223: Method 'train' is abstract in class 'BaseModel' but is not overridden in child class 'MLP' (abstract-method)
modelsdefinition/MLP.py:18:0: R0902: Too many instance attributes (12/7) (too-many-instance-attributes)
modelsdefinition/MLP.py:21:4: W0231: __init__ method from base class 'BaseModel' is not called (super-init-not-called)
modelsdefinition/MLP.py:76:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/MLP.py:103:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/MLP.py:105:8: R1705: Unnecessary "else" after "return", remove the "else" and de-indent the code inside it (no-else-return)
modelsdefinition/MLP.py:112:8: C0103: Argument name "X" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/MLP.py:110:4: R0913: Too many arguments (8/5) (too-many-arguments)
modelsdefinition/MLP.py:110:4: R0917: Too many positional arguments (8/5) (too-many-positional-arguments)
modelsdefinition/MLP.py:110:4: R0914: Too many local variables (20/15) (too-many-locals)
modelsdefinition/MLP.py:155:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/MLP.py:161:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/MLP.py:200:12: C0103: Variable name "X_train" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/MLP.py:200:21: C0103: Variable name "X_test" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/MLP.py:279:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/MLP.py:280:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/MLP.py:110:4: R0915: Too many statements (55/50) (too-many-statements)
modelsdefinition/MLP.py:118:8: W0613: Unused argument 'extra_info' (unused-argument)
modelsdefinition/MLP.py:148:8: W0201: Attribute 'default_params' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/MLP.py:255:8: W0201: Attribute 'evaluator' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/MLP.py:282:8: W0201: Attribute 'best_model' defined outside __init__ (attribute-defined-outside-init)
************* Module autodeep.modelsdefinition.IGTD
modelsdefinition/IGTD.py:129:0: C0301: Line too long (103/100) (line-too-long)
modelsdefinition/IGTD.py:383:0: C0301: Line too long (103/100) (line-too-long)
modelsdefinition/IGTD.py:468:0: C0301: Line too long (118/100) (line-too-long)
modelsdefinition/IGTD.py:474:0: C0301: Line too long (114/100) (line-too-long)
modelsdefinition/IGTD.py:1:0: C0114: Missing module docstring (missing-module-docstring)
modelsdefinition/IGTD.py:1:0: C0103: Module name "IGTD" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/IGTD.py:7:0: E0401: Unable to import 'Scripts.IGTD_Functions' (import-error)
modelsdefinition/IGTD.py:10:0: R0902: Too many instance attributes (8/7) (too-many-instance-attributes)
modelsdefinition/IGTD.py:27:4: R0913: Too many arguments (8/5) (too-many-arguments)
modelsdefinition/IGTD.py:27:4: R0917: Too many positional arguments (8/5) (too-many-positional-arguments)
modelsdefinition/IGTD.py:53:14: C0103: Argument name "X" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/IGTD.py:76:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/IGTD.py:10:0: R0903: Too few public methods (1/2) (too-few-public-methods)
modelsdefinition/IGTD.py:105:0: E0401: Unable to import 'dataloaders.dataloader' (import-error)
modelsdefinition/IGTD.py:105:0: C0413: Import "from dataloaders.dataloader import DataLoader" should be placed at the top of the module (wrong-import-position)
modelsdefinition/IGTD.py:108:0: C0413: Import "from sklearn.model_selection import train_test_split" should be placed at the top of the module (wrong-import-position)
modelsdefinition/IGTD.py:111:0: C0115: Missing class docstring (missing-class-docstring)
modelsdefinition/IGTD.py:111:0: R0902: Too many instance attributes (13/7) (too-many-instance-attributes)
modelsdefinition/IGTD.py:112:4: R0913: Too many arguments (14/5) (too-many-arguments)
modelsdefinition/IGTD.py:112:4: R0917: Too many positional arguments (14/5) (too-many-positional-arguments)
modelsdefinition/IGTD.py:114:8: W0621: Redefining name 'dataset_path' from outer scope (line 236) (redefined-outer-name)
modelsdefinition/IGTD.py:124:8: W0621: Redefining name 'igtd_preprocessor' from outer scope (line 222) (redefined-outer-name)
modelsdefinition/IGTD.py:125:8: W0621: Redefining name 'igtd_configs' from outer scope (line 547) (redefined-outer-name)
modelsdefinition/IGTD.py:126:8: W0621: Redefining name 'igtd_result_base_dir' from outer scope (line 233) (redefined-outer-name)
modelsdefinition/IGTD.py:148:4: C0116: Missing function or method docstring (missing-function-docstring)
modelsdefinition/IGTD.py:173:12: W0621: Redefining name 'X_train' from outer scope (line 251) (redefined-outer-name)
modelsdefinition/IGTD.py:173:21: W0621: Redefining name 'X_test' from outer scope (line 251) (redefined-outer-name)
modelsdefinition/IGTD.py:174:12: W0621: Redefining name 'y_train' from outer scope (line 251) (redefined-outer-name)
modelsdefinition/IGTD.py:174:21: W0621: Redefining name 'y_test' from outer scope (line 251) (redefined-outer-name)
modelsdefinition/IGTD.py:202:8: W0621: Redefining name 'extra_info' from outer scope (line 251) (redefined-outer-name)
modelsdefinition/IGTD.py:158:8: C0103: Variable name "X" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/IGTD.py:163:12: C0103: Variable name "X" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/IGTD.py:173:12: C0103: Variable name "X_train" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/IGTD.py:173:21: C0103: Variable name "X_test" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/IGTD.py:176:12: C0103: Variable name "X_train" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/IGTD.py:176:21: C0103: Variable name "X_test" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/IGTD.py:186:12: C0103: Variable name "X_train" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/IGTD.py:186:21: C0103: Variable name "X_test" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/IGTD.py:111:0: R0903: Too few public methods (1/2) (too-few-public-methods)
modelsdefinition/IGTD.py:233:4: C0103: Constant name "igtd_result_base_dir" doesn't conform to UPPER_CASE naming style (invalid-name)
modelsdefinition/IGTD.py:236:4: C0103: Constant name "dataset_path" doesn't conform to UPPER_CASE naming style (invalid-name)
modelsdefinition/IGTD.py:246:21: E0601: Using variable 'igtd_configs' before assignment (used-before-assignment)
modelsdefinition/IGTD.py:257:0: W0404: Reimport 'logging' (imported line 1) (reimported)
modelsdefinition/IGTD.py:257:0: C0413: Import "import logging" should be placed at the top of the module (wrong-import-position)
modelsdefinition/IGTD.py:258:0: W0404: Reimport 'os' (imported line 2) (reimported)
modelsdefinition/IGTD.py:258:0: C0413: Import "import os" should be placed at the top of the module (wrong-import-position)
modelsdefinition/IGTD.py:259:0: W0404: Reimport 'Dict' (imported line 3) (reimported)
modelsdefinition/IGTD.py:259:0: W0404: Reimport 'Optional' (imported line 3) (reimported)
modelsdefinition/IGTD.py:259:0: C0413: Import "from typing import Dict, Optional" should be placed at the top of the module (wrong-import-position)
modelsdefinition/IGTD.py:261:0: W0404: Reimport 'numpy' (imported line 5) (reimported)
modelsdefinition/IGTD.py:261:0: C0413: Import "import numpy as np" should be placed at the top of the module (wrong-import-position)
modelsdefinition/IGTD.py:262:0: W0404: Reimport 'pandas' (imported line 6) (reimported)
modelsdefinition/IGTD.py:262:0: C0413: Import "import pandas as pd" should be placed at the top of the module (wrong-import-position)
modelsdefinition/IGTD.py:263:0: E0401: Unable to import 'dataloaders.dataloader' (import-error)
modelsdefinition/IGTD.py:263:0: W0404: Reimport 'DataLoader' (imported line 105) (reimported)
modelsdefinition/IGTD.py:263:0: C0413: Import "from dataloaders.dataloader import DataLoader" should be placed at the top of the module (wrong-import-position)
modelsdefinition/IGTD.py:266:0: E0401: Unable to import 'Scripts.IGTD_Functions' (import-error)
modelsdefinition/IGTD.py:266:0: W0404: Reimport 'table_to_image' (imported line 7) (reimported)
modelsdefinition/IGTD.py:266:0: C0413: Import "from Scripts.IGTD_Functions import table_to_image" should be placed at the top of the module (wrong-import-position)
modelsdefinition/IGTD.py:267:0: W0404: Reimport 'train_test_split' (imported line 108) (reimported)
modelsdefinition/IGTD.py:267:0: C0413: Import "from sklearn.model_selection import train_test_split" should be placed at the top of the module (wrong-import-position)
modelsdefinition/IGTD.py:270:0: E0102: class already defined line 10 (function-redefined)
modelsdefinition/IGTD.py:270:0: R0902: Too many instance attributes (9/7) (too-many-instance-attributes)
modelsdefinition/IGTD.py:287:4: R0913: Too many arguments (9/5) (too-many-arguments)
modelsdefinition/IGTD.py:287:4: R0917: Too many positional arguments (9/5) (too-many-positional-arguments)
modelsdefinition/IGTD.py:315:14: C0103: Argument name "X" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/IGTD.py:340:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/IGTD.py:270:0: R0903: Too few public methods (1/2) (too-few-public-methods)
modelsdefinition/IGTD.py:365:0: C0115: Missing class docstring (missing-class-docstring)
modelsdefinition/IGTD.py:365:0: E0102: class already defined line 111 (function-redefined)
modelsdefinition/IGTD.py:365:0: R0902: Too many instance attributes (14/7) (too-many-instance-attributes)
modelsdefinition/IGTD.py:366:4: R0913: Too many arguments (14/5) (too-many-arguments)
modelsdefinition/IGTD.py:366:4: R0917: Too many positional arguments (14/5) (too-many-positional-arguments)
modelsdefinition/IGTD.py:366:4: R0914: Too many local variables (16/15) (too-many-locals)
modelsdefinition/IGTD.py:368:8: W0621: Redefining name 'dataset_path' from outer scope (line 236) (redefined-outer-name)
modelsdefinition/IGTD.py:378:8: W0621: Redefining name 'igtd_preprocessor' from outer scope (line 222) (redefined-outer-name)
modelsdefinition/IGTD.py:379:8: W0621: Redefining name 'igtd_configs' from outer scope (line 547) (redefined-outer-name)
modelsdefinition/IGTD.py:380:8: W0621: Redefining name 'igtd_result_base_dir' from outer scope (line 233) (redefined-outer-name)
modelsdefinition/IGTD.py:411:4: C0116: Missing function or method docstring (missing-function-docstring)
modelsdefinition/IGTD.py:411:4: R0914: Too many local variables (16/15) (too-many-locals)
modelsdefinition/IGTD.py:436:12: W0621: Redefining name 'X_train' from outer scope (line 251) (redefined-outer-name)
modelsdefinition/IGTD.py:436:21: W0621: Redefining name 'X_test' from outer scope (line 251) (redefined-outer-name)
modelsdefinition/IGTD.py:437:12: W0621: Redefining name 'y_train' from outer scope (line 251) (redefined-outer-name)
modelsdefinition/IGTD.py:437:21: W0621: Redefining name 'y_test' from outer scope (line 251) (redefined-outer-name)
modelsdefinition/IGTD.py:466:8: W0621: Redefining name 'extra_info' from outer scope (line 251) (redefined-outer-name)
modelsdefinition/IGTD.py:421:8: C0103: Variable name "X" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/IGTD.py:426:12: C0103: Variable name "X" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/IGTD.py:436:12: C0103: Variable name "X_train" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/IGTD.py:436:21: C0103: Variable name "X_test" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/IGTD.py:439:12: C0103: Variable name "X_train" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/IGTD.py:439:21: C0103: Variable name "X_test" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/IGTD.py:449:12: C0103: Variable name "X_train" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/IGTD.py:449:21: C0103: Variable name "X_test" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/IGTD.py:463:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/IGTD.py:509:8: W0621: Redefining name 'extra_info' from outer scope (line 251) (redefined-outer-name)
modelsdefinition/IGTD.py:513:17: W1514: Using open without explicitly specifying an encoding (unspecified-encoding)
modelsdefinition/IGTD.py:526:4: C0116: Missing function or method docstring (missing-function-docstring)
modelsdefinition/IGTD.py:526:39: C0103: Argument name "X" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/IGTD.py:530:4: C0116: Missing function or method docstring (missing-function-docstring)
modelsdefinition/IGTD.py:530:29: C0103: Argument name "X_train" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/IGTD.py:530:52: C0103: Argument name "X_test" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/IGTD.py:530:29: W0621: Redefining name 'X_train' from outer scope (line 251) (redefined-outer-name)
modelsdefinition/IGTD.py:530:52: W0621: Redefining name 'X_test' from outer scope (line 251) (redefined-outer-name)
modelsdefinition/IGTD.py:561:24: E1120: No value for argument 'dataset_name' in constructor call (no-value-for-parameter)
modelsdefinition/IGTD.py:572:4: C0103: Constant name "igtd_result_base_dir" doesn't conform to UPPER_CASE naming style (invalid-name)
modelsdefinition/IGTD.py:575:4: C0103: Constant name "dataset_path" doesn't conform to UPPER_CASE naming style (invalid-name)
modelsdefinition/IGTD.py:108:0: C0411: third party import "sklearn.model_selection.train_test_split" should be placed before first party import "dataloaders.dataloader.DataLoader"  (wrong-import-order)
modelsdefinition/IGTD.py:257:0: C0411: standard import "logging" should be placed before third party imports "numpy", "pandas", "Scripts.IGTD_Functions.table_to_image", "sklearn.model_selection.train_test_split" and first party import "dataloaders.dataloader.DataLoader"  (wrong-import-order)
modelsdefinition/IGTD.py:258:0: C0411: standard import "os" should be placed before third party imports "numpy", "pandas", "Scripts.IGTD_Functions.table_to_image", "sklearn.model_selection.train_test_split" and first party import "dataloaders.dataloader.DataLoader"  (wrong-import-order)
modelsdefinition/IGTD.py:259:0: C0411: standard import "typing.Dict" should be placed before third party imports "numpy", "pandas", "Scripts.IGTD_Functions.table_to_image", "sklearn.model_selection.train_test_split" and first party import "dataloaders.dataloader.DataLoader"  (wrong-import-order)
modelsdefinition/IGTD.py:261:0: C0411: third party import "numpy" should be placed before first party import "dataloaders.dataloader.DataLoader"  (wrong-import-order)
modelsdefinition/IGTD.py:262:0: C0411: third party import "pandas" should be placed before first party import "dataloaders.dataloader.DataLoader"  (wrong-import-order)
modelsdefinition/IGTD.py:266:0: C0411: third party import "Scripts.IGTD_Functions.table_to_image" should be placed before first party imports "dataloaders.dataloader.DataLoader", "dataloaders.dataloader.DataLoader"  (wrong-import-order)
modelsdefinition/IGTD.py:267:0: C0411: third party import "sklearn.model_selection.train_test_split" should be placed before first party imports "dataloaders.dataloader.DataLoader", "dataloaders.dataloader.DataLoader"  (wrong-import-order)
modelsdefinition/IGTD.py:257:0: C0412: Imports from package logging are not grouped (ungrouped-imports)
modelsdefinition/IGTD.py:258:0: C0412: Imports from package os are not grouped (ungrouped-imports)
modelsdefinition/IGTD.py:259:0: C0412: Imports from package typing are not grouped (ungrouped-imports)
modelsdefinition/IGTD.py:261:0: C0412: Imports from package numpy are not grouped (ungrouped-imports)
modelsdefinition/IGTD.py:262:0: C0412: Imports from package pandas are not grouped (ungrouped-imports)
modelsdefinition/IGTD.py:263:0: C0412: Imports from package dataloaders are not grouped (ungrouped-imports)
modelsdefinition/IGTD.py:266:0: C0412: Imports from package Scripts are not grouped (ungrouped-imports)
modelsdefinition/IGTD.py:267:0: C0412: Imports from package sklearn are not grouped (ungrouped-imports)
************* Module autodeep.modelsdefinition.TabTransformerModel
modelsdefinition/TabTransformerModel.py:1:0: C0114: Missing module docstring (missing-module-docstring)
modelsdefinition/TabTransformerModel.py:1:0: C0103: Module name "TabTransformerModel" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/TabTransformerModel.py:10:0: C0115: Missing class docstring (missing-class-docstring)
modelsdefinition/TabTransformerModel.py:20:4: C0116: Missing function or method docstring (missing-function-docstring)
modelsdefinition/TabTransformerModel.py:48:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/TabTransformerModel.py:55:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
************* Module autodeep.modelsdefinition.XGBoostTrainer
modelsdefinition/XGBoostTrainer.py:246:0: C0301: Line too long (110/100) (line-too-long)
modelsdefinition/XGBoostTrainer.py:1:0: C0114: Missing module docstring (missing-module-docstring)
modelsdefinition/XGBoostTrainer.py:1:0: C0103: Module name "XGBoostTrainer" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/XGBoostTrainer.py:18:0: C0115: Missing class docstring (missing-class-docstring)
modelsdefinition/XGBoostTrainer.py:18:0: W0223: Method 'train' is abstract in class 'BaseModel' but is not overridden in child class 'XGBoostTrainer' (abstract-method)
modelsdefinition/XGBoostTrainer.py:18:0: R0902: Too many instance attributes (13/7) (too-many-instance-attributes)
modelsdefinition/XGBoostTrainer.py:19:4: W0231: __init__ method from base class 'BaseModel' is not called (super-init-not-called)
modelsdefinition/XGBoostTrainer.py:65:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/XGBoostTrainer.py:95:8: R1705: Unnecessary "else" after "return", remove the "else" and de-indent the code inside it (no-else-return)
modelsdefinition/XGBoostTrainer.py:102:8: C0103: Argument name "X" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/XGBoostTrainer.py:100:4: R0913: Too many arguments (8/5) (too-many-arguments)
modelsdefinition/XGBoostTrainer.py:100:4: R0917: Too many positional arguments (8/5) (too-many-positional-arguments)
modelsdefinition/XGBoostTrainer.py:100:4: R0914: Too many local variables (27/15) (too-many-locals)
modelsdefinition/XGBoostTrainer.py:141:8: C0103: Variable name "X_train" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/XGBoostTrainer.py:141:17: C0103: Variable name "X_val" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/XGBoostTrainer.py:153:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/XGBoostTrainer.py:186:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/XGBoostTrainer.py:199:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/XGBoostTrainer.py:244:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/XGBoostTrainer.py:245:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/XGBoostTrainer.py:100:4: R0915: Too many statements (53/50) (too-many-statements)
modelsdefinition/XGBoostTrainer.py:108:8: W0613: Unused argument 'extra_info' (unused-argument)
modelsdefinition/XGBoostTrainer.py:132:8: W0201: Attribute 'default_params' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/XGBoostTrainer.py:217:8: W0201: Attribute 'evaluator' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/XGBoostTrainer.py:241:8: W0201: Attribute 'best_model' defined outside __init__ (attribute-defined-outside-init)
************* Module autodeep.modelsdefinition.CategoryEmbeddingModel
modelsdefinition/CategoryEmbeddingModel.py:1:0: C0114: Missing module docstring (missing-module-docstring)
modelsdefinition/CategoryEmbeddingModel.py:1:0: C0103: Module name "CategoryEmbeddingModel" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/CategoryEmbeddingModel.py:10:0: C0115: Missing class docstring (missing-class-docstring)
modelsdefinition/CategoryEmbeddingModel.py:20:4: C0116: Missing function or method docstring (missing-function-docstring)
modelsdefinition/CategoryEmbeddingModel.py:41:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/CategoryEmbeddingModel.py:48:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
************* Module autodeep.modelsdefinition.GANDALF
modelsdefinition/GANDALF.py:1:0: C0114: Missing module docstring (missing-module-docstring)
modelsdefinition/GANDALF.py:1:0: C0103: Module name "GANDALF" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/GANDALF.py:12:0: C0115: Missing class docstring (missing-class-docstring)
modelsdefinition/GANDALF.py:22:4: C0116: Missing function or method docstring (missing-function-docstring)
modelsdefinition/GANDALF.py:43:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/GANDALF.py:50:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/GANDALF.py:67:4: C0116: Missing function or method docstring (missing-function-docstring)
modelsdefinition/GANDALF.py:69:8: W0201: Attribute 'target_scaler' defined outside __init__ (attribute-defined-outside-init)
************* Module autodeep.modelsdefinition.ResNetModel
modelsdefinition/ResNetModel.py:61:0: C0301: Line too long (120/100) (line-too-long)
modelsdefinition/ResNetModel.py:151:0: C0301: Line too long (107/100) (line-too-long)
modelsdefinition/ResNetModel.py:173:0: C0301: Line too long (107/100) (line-too-long)
modelsdefinition/ResNetModel.py:234:0: C0301: Line too long (102/100) (line-too-long)
modelsdefinition/ResNetModel.py:614:0: C0301: Line too long (110/100) (line-too-long)
modelsdefinition/ResNetModel.py:666:0: C0301: Line too long (128/100) (line-too-long)
modelsdefinition/ResNetModel.py:1:0: C0114: Missing module docstring (missing-module-docstring)
modelsdefinition/ResNetModel.py:1:0: C0103: Module name "ResNetModel" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/ResNetModel.py:8:0: R0402: Use 'from torch import nn' instead (consider-using-from-import)
modelsdefinition/ResNetModel.py:9:0: R0402: Use 'from torch import optim' instead (consider-using-from-import)
modelsdefinition/ResNetModel.py:10:0: R0402: Use 'from torchvision import transforms' instead (consider-using-from-import)
modelsdefinition/ResNetModel.py:25:0: C0115: Missing class docstring (missing-class-docstring)
modelsdefinition/ResNetModel.py:33:8: R1725: Consider using Python 3 style super() without arguments (super-with-arguments)
modelsdefinition/ResNetModel.py:66:4: C0116: Missing function or method docstring (missing-function-docstring)
modelsdefinition/ResNetModel.py:72:0: C0115: Missing class docstring (missing-class-docstring)
modelsdefinition/ResNetModel.py:72:0: R0902: Too many instance attributes (25/7) (too-many-instance-attributes)
modelsdefinition/ResNetModel.py:95:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/ResNetModel.py:125:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/ResNetModel.py:133:4: C0116: Missing function or method docstring (missing-function-docstring)
modelsdefinition/ResNetModel.py:137:4: C0116: Missing function or method docstring (missing-function-docstring)
modelsdefinition/ResNetModel.py:156:4: C0116: Missing function or method docstring (missing-function-docstring)
modelsdefinition/ResNetModel.py:170:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/ResNetModel.py:182:4: C0116: Missing function or method docstring (missing-function-docstring)
modelsdefinition/ResNetModel.py:184:12: W0612: Unused variable 'i' (unused-variable)
modelsdefinition/ResNetModel.py:198:4: C0116: Missing function or method docstring (missing-function-docstring)
modelsdefinition/ResNetModel.py:239:8: C0103: Argument name "X_train" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/ResNetModel.py:237:4: R0913: Too many arguments (8/5) (too-many-arguments)
modelsdefinition/ResNetModel.py:237:4: R0917: Too many positional arguments (8/5) (too-many-positional-arguments)
modelsdefinition/ResNetModel.py:267:4: C0116: Missing function or method docstring (missing-function-docstring)
modelsdefinition/ResNetModel.py:268:14: C0103: Argument name "X_train" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/ResNetModel.py:267:4: R0913: Too many arguments (6/5) (too-many-arguments)
modelsdefinition/ResNetModel.py:267:4: R0917: Too many positional arguments (6/5) (too-many-positional-arguments)
modelsdefinition/ResNetModel.py:317:48: W0613: Unused argument 'default_params' (unused-argument)
modelsdefinition/ResNetModel.py:362:8: C0103: Argument name "X" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/ResNetModel.py:360:4: R0913: Too many arguments (8/5) (too-many-arguments)
modelsdefinition/ResNetModel.py:360:4: R0917: Too many positional arguments (8/5) (too-many-positional-arguments)
modelsdefinition/ResNetModel.py:360:4: R0914: Too many local variables (25/15) (too-many-locals)
modelsdefinition/ResNetModel.py:405:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/ResNetModel.py:433:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/ResNetModel.py:438:8: R0914: Too many local variables (28/15) (too-many-locals)
modelsdefinition/ResNetModel.py:439:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/ResNetModel.py:441:12: C0103: Variable name "X_train" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/ResNetModel.py:441:21: C0103: Variable name "X_val" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/ResNetModel.py:569:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/ResNetModel.py:438:8: R0915: Too many statements (69/50) (too-many-statements)
modelsdefinition/ResNetModel.py:608:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/ResNetModel.py:612:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/ResNetModel.py:613:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/ResNetModel.py:360:4: R0915: Too many statements (115/50) (too-many-statements)
modelsdefinition/ResNetModel.py:619:4: C0116: Missing function or method docstring (missing-function-docstring)
modelsdefinition/ResNetModel.py:619:22: C0103: Argument name "X_test" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/ResNetModel.py:677:8: R1705: Unnecessary "else" after "return", remove the "else" and de-indent the code inside it (no-else-return)
modelsdefinition/ResNetModel.py:95:16: E0203: Access to member 'logger' before its definition line 97 (access-member-before-definition)
modelsdefinition/ResNetModel.py:130:8: W0201: Attribute 'model' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/ResNetModel.py:484:12: W0201: Attribute 'model' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/ResNetModel.py:219:12: W0201: Attribute 'loss_fn' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/ResNetModel.py:229:12: W0201: Attribute 'loss_fn' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/ResNetModel.py:231:12: W0201: Attribute 'loss_fn' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/ResNetModel.py:319:12: W0201: Attribute 'optimizer' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/ResNetModel.py:326:12: W0201: Attribute 'optimizer' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/ResNetModel.py:332:12: W0201: Attribute 'optimizer' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/ResNetModel.py:338:12: W0201: Attribute 'scheduler' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/ResNetModel.py:345:12: W0201: Attribute 'scheduler' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/ResNetModel.py:350:12: W0201: Attribute 'scheduler' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/ResNetModel.py:398:8: W0201: Attribute 'default_params' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/ResNetModel.py:411:8: W0201: Attribute 'extra_info' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/ResNetModel.py:413:8: W0201: Attribute 'img_rows' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/ResNetModel.py:624:8: W0201: Attribute 'img_rows' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/ResNetModel.py:414:8: W0201: Attribute 'img_columns' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/ResNetModel.py:625:8: W0201: Attribute 'img_columns' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/ResNetModel.py:416:8: W0201: Attribute 'new_column_ordering' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/ResNetModel.py:628:8: W0201: Attribute 'new_column_ordering' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/ResNetModel.py:420:8: W0201: Attribute 'num_features' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/ResNetModel.py:423:12: W0201: Attribute 'num_targets' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/ResNetModel.py:425:12: W0201: Attribute 'num_targets' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/ResNetModel.py:429:12: W0201: Attribute 'num_targets' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/ResNetModel.py:584:8: W0201: Attribute 'evaluator' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/ResNetModel.py:609:8: W0201: Attribute 'best_model' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/ResNetModel.py:683:0: C0115: Missing class docstring (missing-class-docstring)
modelsdefinition/ResNetModel.py:684:4: R0913: Too many arguments (6/5) (too-many-arguments)
modelsdefinition/ResNetModel.py:684:4: R0917: Too many positional arguments (6/5) (too-many-positional-arguments)
modelsdefinition/ResNetModel.py:702:8: R1705: Unnecessary "else" after "return", remove the "else" and de-indent the code inside it (no-else-return)
************* Module autodeep.modelsdefinition.CommonStructure
modelsdefinition/CommonStructure.py:91:0: C0301: Line too long (109/100) (line-too-long)
modelsdefinition/CommonStructure.py:167:0: C0301: Line too long (132/100) (line-too-long)
modelsdefinition/CommonStructure.py:476:0: C0301: Line too long (110/100) (line-too-long)
modelsdefinition/CommonStructure.py:1:0: C0114: Missing module docstring (missing-module-docstring)
modelsdefinition/CommonStructure.py:1:0: C0103: Module name "CommonStructure" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/CommonStructure.py:10:0: R0402: Use 'from torch import nn' instead (consider-using-from-import)
modelsdefinition/CommonStructure.py:34:8: R1725: Consider using Python 3 style super() without arguments (super-with-arguments)
modelsdefinition/CommonStructure.py:35:8: W0105: String statement has no effect (pointless-string-statement)
modelsdefinition/CommonStructure.py:47:20: C0103: Argument name "X_train" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/CommonStructure.py:60:22: C0103: Argument name "X_test" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/CommonStructure.py:77:0: R0902: Too many instance attributes (18/7) (too-many-instance-attributes)
modelsdefinition/CommonStructure.py:113:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/CommonStructure.py:126:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/CommonStructure.py:142:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/CommonStructure.py:147:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/CommonStructure.py:234:22: C0103: Argument name "X_test" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/CommonStructure.py:258:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/CommonStructure.py:261:8: R1705: Unnecessary "else" after "return", remove the "else" and de-indent the code inside it (no-else-return)
modelsdefinition/CommonStructure.py:266:4: C0116: Missing function or method docstring (missing-function-docstring)
modelsdefinition/CommonStructure.py:268:8: C0103: Argument name "X" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/CommonStructure.py:266:4: R0913: Too many arguments (8/5) (too-many-arguments)
modelsdefinition/CommonStructure.py:266:4: R0917: Too many positional arguments (8/5) (too-many-positional-arguments)
modelsdefinition/CommonStructure.py:266:4: R0914: Too many local variables (30/15) (too-many-locals)
modelsdefinition/CommonStructure.py:276:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/CommonStructure.py:304:8: C0103: Variable name "X_train" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/CommonStructure.py:304:17: C0103: Variable name "X_val" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/CommonStructure.py:308:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/CommonStructure.py:309:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/CommonStructure.py:311:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/CommonStructure.py:313:30: C0103: Argument name "X_train" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/CommonStructure.py:313:39: C0103: Argument name "X_val" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/CommonStructure.py:313:8: R0914: Too many local variables (17/15) (too-many-locals)
modelsdefinition/CommonStructure.py:317:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/CommonStructure.py:325:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/CommonStructure.py:326:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/CommonStructure.py:327:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/CommonStructure.py:328:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/CommonStructure.py:330:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/CommonStructure.py:332:20: E1101: Instance of 'PytorchTabularTrainer' has no 'prepare_tabular_model' member (no-member)
modelsdefinition/CommonStructure.py:337:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/CommonStructure.py:340:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/CommonStructure.py:348:19: W0718: Catching too general exception Exception (broad-exception-caught)
modelsdefinition/CommonStructure.py:352:21: W1514: Using open without explicitly specifying an encoding (unspecified-encoding)
modelsdefinition/CommonStructure.py:368:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/CommonStructure.py:458:47: E1101: Instance of 'PytorchTabularTrainer' has no 'model_name' member (no-member)
modelsdefinition/CommonStructure.py:468:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/CommonStructure.py:470:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/CommonStructure.py:474:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/CommonStructure.py:475:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/CommonStructure.py:266:4: R0915: Too many statements (95/50) (too-many-statements)
modelsdefinition/CommonStructure.py:162:12: W0201: Attribute 'loss_fn' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/CommonStructure.py:164:12: W0201: Attribute 'loss_fn' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/CommonStructure.py:280:8: W0201: Attribute 'default_params' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/CommonStructure.py:296:12: W0201: Attribute 'target_range' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/CommonStructure.py:398:8: W0201: Attribute 'evaluator' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/CommonStructure.py:471:8: W0201: Attribute 'best_model' defined outside __init__ (attribute-defined-outside-init)
************* Module autodeep.modelsdefinition.TabNetModel
modelsdefinition/TabNetModel.py:1:0: C0114: Missing module docstring (missing-module-docstring)
modelsdefinition/TabNetModel.py:1:0: C0103: Module name "TabNetModel" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/TabNetModel.py:10:0: C0115: Missing class docstring (missing-class-docstring)
modelsdefinition/TabNetModel.py:20:4: C0116: Missing function or method docstring (missing-function-docstring)
modelsdefinition/TabNetModel.py:41:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/TabNetModel.py:48:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
************* Module autodeep.modelsdefinition.CatBoostModel
modelsdefinition/CatBoostModel.py:166:0: C0301: Line too long (106/100) (line-too-long)
modelsdefinition/CatBoostModel.py:246:0: C0301: Line too long (110/100) (line-too-long)
modelsdefinition/CatBoostModel.py:1:0: C0114: Missing module docstring (missing-module-docstring)
modelsdefinition/CatBoostModel.py:1:0: C0103: Module name "CatBoostModel" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/CatBoostModel.py:18:0: C0115: Missing class docstring (missing-class-docstring)
modelsdefinition/CatBoostModel.py:18:0: W0223: Method 'train' is abstract in class 'BaseModel' but is not overridden in child class 'CatBoostTrainer' (abstract-method)
modelsdefinition/CatBoostModel.py:18:0: R0902: Too many instance attributes (14/7) (too-many-instance-attributes)
modelsdefinition/CatBoostModel.py:19:4: W0231: __init__ method from base class 'BaseModel' is not called (super-init-not-called)
modelsdefinition/CatBoostModel.py:68:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/CatBoostModel.py:80:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/CatBoostModel.py:84:8: R1705: Unnecessary "else" after "return", remove the "else" and de-indent the code inside it (no-else-return)
modelsdefinition/CatBoostModel.py:91:8: C0103: Argument name "X" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/CatBoostModel.py:89:4: R0913: Too many arguments (8/5) (too-many-arguments)
modelsdefinition/CatBoostModel.py:89:4: R0917: Too many positional arguments (8/5) (too-many-positional-arguments)
modelsdefinition/CatBoostModel.py:89:4: R0914: Too many local variables (27/15) (too-many-locals)
modelsdefinition/CatBoostModel.py:134:8: C0103: Variable name "X_train" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/CatBoostModel.py:134:17: C0103: Variable name "X_val" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/CatBoostModel.py:141:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/CatBoostModel.py:190:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/CatBoostModel.py:203:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/CatBoostModel.py:244:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/CatBoostModel.py:245:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/CatBoostModel.py:89:4: R0915: Too many statements (61/50) (too-many-statements)
modelsdefinition/CatBoostModel.py:122:8: W0201: Attribute 'cat_features' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/CatBoostModel.py:125:8: W0201: Attribute 'default_params' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/CatBoostModel.py:132:8: W0201: Attribute 'num_targets' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/CatBoostModel.py:220:8: W0201: Attribute 'evaluator' defined outside __init__ (attribute-defined-outside-init)
modelsdefinition/CatBoostModel.py:238:8: W0201: Attribute 'best_model' defined outside __init__ (attribute-defined-outside-init)
************* Module autodeep.modelsdefinition.NodeModel
modelsdefinition/NodeModel.py:1:0: C0114: Missing module docstring (missing-module-docstring)
modelsdefinition/NodeModel.py:1:0: C0103: Module name "NodeModel" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/NodeModel.py:10:0: C0115: Missing class docstring (missing-class-docstring)
modelsdefinition/NodeModel.py:20:4: C0116: Missing function or method docstring (missing-function-docstring)
modelsdefinition/NodeModel.py:41:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/NodeModel.py:48:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
************* Module autodeep.modelsdefinition.AutomaticFeatureInteractionModel
modelsdefinition/AutomaticFeatureInteractionModel.py:1:0: C0114: Missing module docstring (missing-module-docstring)
modelsdefinition/AutomaticFeatureInteractionModel.py:1:0: C0103: Module name "AutomaticFeatureInteractionModel" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/AutomaticFeatureInteractionModel.py:10:0: C0115: Missing class docstring (missing-class-docstring)
modelsdefinition/AutomaticFeatureInteractionModel.py:20:4: C0116: Missing function or method docstring (missing-function-docstring)
modelsdefinition/AutomaticFeatureInteractionModel.py:47:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/AutomaticFeatureInteractionModel.py:54:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
************* Module autodeep.modelsdefinition.GATE
modelsdefinition/GATE.py:1:0: C0114: Missing module docstring (missing-module-docstring)
modelsdefinition/GATE.py:1:0: C0103: Module name "GATE" doesn't conform to snake_case naming style (invalid-name)
modelsdefinition/GATE.py:10:0: C0115: Missing class docstring (missing-class-docstring)
modelsdefinition/GATE.py:20:4: C0116: Missing function or method docstring (missing-function-docstring)
modelsdefinition/GATE.py:41:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
modelsdefinition/GATE.py:48:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
************* Module autodeep.automl
automl.py:1:0: C0114: Missing module docstring (missing-module-docstring)
automl.py:49:0: C0115: Missing class docstring (missing-class-docstring)
automl.py:49:0: R0902: Too many instance attributes (11/7) (too-many-instance-attributes)
automl.py:50:4: W0102: Dangerous default value DEFAULT_MODELS (builtins.list) as argument (dangerous-default-value)
automl.py:50:4: W0102: Dangerous default value DEFAULT_IGTD_CONFIG (builtins.dict) as argument (dangerous-default-value)
automl.py:50:4: R0913: Too many arguments (11/5) (too-many-arguments)
automl.py:50:4: R0917: Too many positional arguments (11/5) (too-many-positional-arguments)
automl.py:81:13: W1514: Using open without explicitly specifying an encoding (unspecified-encoding)
automl.py:89:4: C0116: Missing function or method docstring (missing-function-docstring)
automl.py:89:4: R0914: Too many local variables (22/15) (too-many-locals)
automl.py:127:16: C0103: Variable name "X_train" doesn't conform to snake_case naming style (invalid-name)
automl.py:127:25: C0103: Variable name "X_test" doesn't conform to snake_case naming style (invalid-name)
automl.py:157:21: C0103: Argument name "X_train" doesn't conform to snake_case naming style (invalid-name)
automl.py:156:4: R0913: Too many arguments (7/5) (too-many-arguments)
automl.py:156:4: R0917: Too many positional arguments (7/5) (too-many-positional-arguments)
automl.py:160:8: R1720: Unnecessary "elif" after "raise", remove the leading "el" from "elif" (no-else-raise)
automl.py:176:38: C0103: Argument name "X_test" doesn't conform to snake_case naming style (invalid-name)
automl.py:192:4: R0913: Too many arguments (9/5) (too-many-arguments)
automl.py:192:4: R0917: Too many positional arguments (9/5) (too-many-positional-arguments)
automl.py:49:0: R0903: Too few public methods (1/2) (too-few-public-methods)
************* Module autodeep.evaluation.generalevaluator
evaluation/generalevaluator.py:1:0: C0114: Missing module docstring (missing-module-docstring)
evaluation/generalevaluator.py:16:0: C0115: Missing class docstring (missing-class-docstring)
evaluation/generalevaluator.py:17:4: R0913: Too many arguments (7/5) (too-many-arguments)
evaluation/generalevaluator.py:17:4: R0917: Too many positional arguments (7/5) (too-many-positional-arguments)
evaluation/generalevaluator.py:46:4: C0116: Missing function or method docstring (missing-function-docstring)
evaluation/generalevaluator.py:55:4: C0116: Missing function or method docstring (missing-function-docstring)
evaluation/generalevaluator.py:66:4: C0116: Missing function or method docstring (missing-function-docstring)
evaluation/generalevaluator.py:69:4: C0116: Missing function or method docstring (missing-function-docstring)
evaluation/generalevaluator.py:72:4: C0116: Missing function or method docstring (missing-function-docstring)
evaluation/generalevaluator.py:75:4: C0116: Missing function or method docstring (missing-function-docstring)
evaluation/generalevaluator.py:78:4: C0116: Missing function or method docstring (missing-function-docstring)
evaluation/generalevaluator.py:79:8: R1705: Unnecessary "elif" after "return", remove the leading "el" from "elif" (no-else-return)
evaluation/generalevaluator.py:91:4: C0116: Missing function or method docstring (missing-function-docstring)
evaluation/generalevaluator.py:100:4: C0116: Missing function or method docstring (missing-function-docstring)
evaluation/generalevaluator.py:101:8: R1705: Unnecessary "else" after "return", remove the "else" and de-indent the code inside it (no-else-return)
evaluation/generalevaluator.py:106:4: C0116: Missing function or method docstring (missing-function-docstring)
evaluation/generalevaluator.py:117:4: C0116: Missing function or method docstring (missing-function-docstring)
evaluation/generalevaluator.py:121:4: C0116: Missing function or method docstring (missing-function-docstring)
evaluation/generalevaluator.py:122:8: R1705: Unnecessary "elif" after "return", remove the leading "el" from "elif" (no-else-return)
evaluation/generalevaluator.py:129:4: C0116: Missing function or method docstring (missing-function-docstring)
evaluation/generalevaluator.py:129:4: R0912: Too many branches (14/12) (too-many-branches)
evaluation/generalevaluator.py:180:4: C0116: Missing function or method docstring (missing-function-docstring)
evaluation/generalevaluator.py:215:8: R1705: Unnecessary "else" after "return", remove the "else" and de-indent the code inside it (no-else-return)
evaluation/generalevaluator.py:180:4: R0911: Too many return statements (10/6) (too-many-return-statements)
************* Module autodeep.dataloaders.dataloader
dataloaders/dataloader.py:91:0: C0301: Line too long (118/100) (line-too-long)
dataloaders/dataloader.py:182:0: C0301: Line too long (110/100) (line-too-long)
dataloaders/dataloader.py:183:0: C0301: Line too long (118/100) (line-too-long)
dataloaders/dataloader.py:426:0: C0301: Line too long (137/100) (line-too-long)
dataloaders/dataloader.py:524:0: C0301: Line too long (107/100) (line-too-long)
dataloaders/dataloader.py:661:0: C0301: Line too long (101/100) (line-too-long)
dataloaders/dataloader.py:717:0: C0301: Line too long (106/100) (line-too-long)
dataloaders/dataloader.py:778:0: C0301: Line too long (104/100) (line-too-long)
dataloaders/dataloader.py:892:0: C0301: Line too long (101/100) (line-too-long)
dataloaders/dataloader.py:1039:0: C0301: Line too long (103/100) (line-too-long)
dataloaders/dataloader.py:1:0: C0302: Too many lines in module (1109/1000) (too-many-lines)
dataloaders/dataloader.py:1:0: C0114: Missing module docstring (missing-module-docstring)
dataloaders/dataloader.py:16:0: C0115: Missing class docstring (missing-class-docstring)
dataloaders/dataloader.py:16:0: R0902: Too many instance attributes (10/7) (too-many-instance-attributes)
dataloaders/dataloader.py:72:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
dataloaders/dataloader.py:80:39: C0103: Argument name "X" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:89:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
dataloaders/dataloader.py:95:4: C0116: Missing function or method docstring (missing-function-docstring)
dataloaders/dataloader.py:95:18: C0103: Argument name "X" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:115:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
dataloaders/dataloader.py:119:12: W0201: Attribute 'result_file_name' defined outside __init__ (attribute-defined-outside-init)
dataloaders/dataloader.py:16:0: R0903: Too few public methods (1/2) (too-few-public-methods)
dataloaders/dataloader.py:136:0: C0115: Missing class docstring (missing-class-docstring)
dataloaders/dataloader.py:147:4: C0116: Missing function or method docstring (missing-function-docstring)
dataloaders/dataloader.py:198:24: W0212: Access to a protected member _auto_determine_img_size of a client class (protected-access)
dataloaders/dataloader.py:203:17: W1514: Using open without explicitly specifying an encoding (unspecified-encoding)
dataloaders/dataloader.py:147:50: W0613: Unused argument 'dataset_name' (unused-argument)
dataloaders/dataloader.py:136:0: R0903: Too few public methods (1/2) (too-few-public-methods)
dataloaders/dataloader.py:218:0: C0115: Missing class docstring (missing-class-docstring)
dataloaders/dataloader.py:218:0: R0902: Too many instance attributes (8/7) (too-many-instance-attributes)
dataloaders/dataloader.py:219:4: R0913: Too many arguments (9/5) (too-many-arguments)
dataloaders/dataloader.py:219:4: R0917: Too many positional arguments (9/5) (too-many-positional-arguments)
dataloaders/dataloader.py:240:4: C0116: Missing function or method docstring (missing-function-docstring)
dataloaders/dataloader.py:243:4: C0116: Missing function or method docstring (missing-function-docstring)
dataloaders/dataloader.py:256:19: R1721: Unnecessary use of a comprehension, use list(range(bins)) instead. (unnecessary-comprehension)
dataloaders/dataloader.py:264:19: R1721: Unnecessary use of a comprehension, use list(range(bins)) instead. (unnecessary-comprehension)
dataloaders/dataloader.py:286:41: C0103: Argument name "X" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:291:8: C0415: Import outside toplevel (collections.Counter) (import-outside-toplevel)
dataloaders/dataloader.py:295:8: C0103: Variable name "balanced_X" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:300:12: C0103: Variable name "balanced_X" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:301:8: C0103: Variable name "balanced_X" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:306:4: C0116: Missing function or method docstring (missing-function-docstring)
dataloaders/dataloader.py:306:29: C0103: Argument name "X_train" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:306:38: C0103: Argument name "X_test" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:323:4: C0116: Missing function or method docstring (missing-function-docstring)
dataloaders/dataloader.py:323:4: W0102: Dangerous default value [] as argument (dangerous-default-value)
dataloaders/dataloader.py:337:0: C0115: Missing class docstring (missing-class-docstring)
dataloaders/dataloader.py:337:0: R0902: Too many instance attributes (16/7) (too-many-instance-attributes)
dataloaders/dataloader.py:338:4: W0231: __init__ method from base class 'DataLoader' is not called (super-init-not-called)
dataloaders/dataloader.py:338:4: R0913: Too many arguments (16/5) (too-many-arguments)
dataloaders/dataloader.py:338:4: R0917: Too many positional arguments (16/5) (too-many-positional-arguments)
dataloaders/dataloader.py:338:4: R0914: Too many local variables (16/15) (too-many-locals)
dataloaders/dataloader.py:412:8: C0103: Variable name "X" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:416:12: C0103: Variable name "X" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:430:12: C0103: Variable name "X_train" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:430:21: C0103: Variable name "X_test" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:434:12: C0103: Variable name "X_train" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:434:21: C0103: Variable name "X_test" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:443:12: C0103: Variable name "X_train" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:443:21: C0103: Variable name "X_test" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:457:0: C0115: Missing class docstring (missing-class-docstring)
dataloaders/dataloader.py:458:4: W0231: __init__ method from base class 'DataLoader' is not called (super-init-not-called)
dataloaders/dataloader.py:458:4: R0913: Too many arguments (7/5) (too-many-arguments)
dataloaders/dataloader.py:458:4: R0917: Too many positional arguments (7/5) (too-many-positional-arguments)
dataloaders/dataloader.py:511:8: C0103: Variable name "X_train" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:512:8: C0103: Variable name "X_test" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:516:8: C0103: Variable name "X_train" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:516:17: C0103: Variable name "X_test" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:520:25: E1101: Instance of 'KaggleAgeConditionsLoader' has no 'create_extra_info' member (no-member)
dataloaders/dataloader.py:530:0: C0115: Missing class docstring (missing-class-docstring)
dataloaders/dataloader.py:531:4: W0231: __init__ method from base class 'DataLoader' is not called (super-init-not-called)
dataloaders/dataloader.py:531:4: R0913: Too many arguments (7/5) (too-many-arguments)
dataloaders/dataloader.py:531:4: R0917: Too many positional arguments (7/5) (too-many-positional-arguments)
dataloaders/dataloader.py:569:8: C0103: Variable name "X_train" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:570:8: C0103: Variable name "X_test" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:575:8: C0103: Variable name "X_train" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:575:17: C0103: Variable name "X_test" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:581:25: E1101: Instance of 'BufixDataLoader' has no 'create_extra_info' member (no-member)
dataloaders/dataloader.py:591:0: C0115: Missing class docstring (missing-class-docstring)
dataloaders/dataloader.py:592:4: W0231: __init__ method from base class 'DataLoader' is not called (super-init-not-called)
dataloaders/dataloader.py:592:4: R0913: Too many arguments (7/5) (too-many-arguments)
dataloaders/dataloader.py:592:4: R0917: Too many positional arguments (7/5) (too-many-positional-arguments)
dataloaders/dataloader.py:645:8: C0103: Variable name "X_train" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:647:8: C0103: Variable name "X_test" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:651:8: C0103: Variable name "X_train" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:651:17: C0103: Variable name "X_test" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:657:25: E1101: Instance of 'TitanicDataLoader' has no 'create_extra_info' member (no-member)
dataloaders/dataloader.py:666:0: C0115: Missing class docstring (missing-class-docstring)
dataloaders/dataloader.py:667:4: W0231: __init__ method from base class 'DataLoader' is not called (super-init-not-called)
dataloaders/dataloader.py:667:4: R0913: Too many arguments (7/5) (too-many-arguments)
dataloaders/dataloader.py:667:4: R0917: Too many positional arguments (7/5) (too-many-positional-arguments)
dataloaders/dataloader.py:689:26: E1101: Instance of 'tuple' has no 'data' member (no-member)
dataloaders/dataloader.py:689:45: E1101: Instance of 'tuple' has no 'feature_names' member (no-member)
dataloaders/dataloader.py:690:33: E1101: Instance of 'tuple' has no 'target' member (no-member)
dataloaders/dataloader.py:701:8: C0103: Variable name "X_train" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:703:8: C0103: Variable name "X_test" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:707:8: C0103: Variable name "X_train" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:707:17: C0103: Variable name "X_test" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:713:25: E1101: Instance of 'BreastCancerDataLoader' has no 'create_extra_info' member (no-member)
dataloaders/dataloader.py:722:0: C0115: Missing class docstring (missing-class-docstring)
dataloaders/dataloader.py:723:4: W0231: __init__ method from base class 'DataLoader' is not called (super-init-not-called)
dataloaders/dataloader.py:723:4: R0913: Too many arguments (7/5) (too-many-arguments)
dataloaders/dataloader.py:723:4: R0917: Too many positional arguments (7/5) (too-many-positional-arguments)
dataloaders/dataloader.py:762:8: C0103: Variable name "X_train" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:764:8: C0103: Variable name "X_test" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:768:8: C0103: Variable name "X_train" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:768:17: C0103: Variable name "X_test" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:774:25: E1101: Instance of 'CreditDataLoader' has no 'create_extra_info' member (no-member)
dataloaders/dataloader.py:784:0: C0115: Missing class docstring (missing-class-docstring)
dataloaders/dataloader.py:785:4: W0231: __init__ method from base class 'DataLoader' is not called (super-init-not-called)
dataloaders/dataloader.py:785:4: R0913: Too many arguments (7/5) (too-many-arguments)
dataloaders/dataloader.py:785:4: R0917: Too many positional arguments (7/5) (too-many-positional-arguments)
dataloaders/dataloader.py:807:26: E1101: Instance of 'tuple' has no 'data' member (no-member)
dataloaders/dataloader.py:807:45: E1101: Instance of 'tuple' has no 'feature_names' member (no-member)
dataloaders/dataloader.py:808:33: E1101: Instance of 'tuple' has no 'target' member (no-member)
dataloaders/dataloader.py:819:8: C0103: Variable name "X_train" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:821:8: C0103: Variable name "X_test" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:825:8: C0103: Variable name "X_train" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:825:17: C0103: Variable name "X_test" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:831:25: E1101: Instance of 'IrisDataLoader' has no 'create_extra_info' member (no-member)
dataloaders/dataloader.py:841:0: C0115: Missing class docstring (missing-class-docstring)
dataloaders/dataloader.py:842:4: W0231: __init__ method from base class 'DataLoader' is not called (super-init-not-called)
dataloaders/dataloader.py:842:4: R0913: Too many arguments (7/5) (too-many-arguments)
dataloaders/dataloader.py:842:4: R0917: Too many positional arguments (7/5) (too-many-positional-arguments)
dataloaders/dataloader.py:863:26: E1101: Instance of 'tuple' has no 'data' member (no-member)
dataloaders/dataloader.py:863:45: E1101: Instance of 'tuple' has no 'feature_names' member (no-member)
dataloaders/dataloader.py:866:33: E1101: Instance of 'tuple' has no 'target' member (no-member)
dataloaders/dataloader.py:876:8: C0103: Variable name "X_train" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:878:8: C0103: Variable name "X_test" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:882:8: C0103: Variable name "X_train" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:882:17: C0103: Variable name "X_test" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:888:25: E1101: Instance of 'CaliforniaHousingDataLoader' has no 'create_extra_info' member (no-member)
dataloaders/dataloader.py:898:0: C0115: Missing class docstring (missing-class-docstring)
dataloaders/dataloader.py:899:4: W0231: __init__ method from base class 'DataLoader' is not called (super-init-not-called)
dataloaders/dataloader.py:899:4: R0913: Too many arguments (7/5) (too-many-arguments)
dataloaders/dataloader.py:899:4: R0917: Too many positional arguments (7/5) (too-many-positional-arguments)
dataloaders/dataloader.py:962:8: C0103: Variable name "X_train" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:964:8: C0103: Variable name "X_test" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:968:8: C0103: Variable name "X_train" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:968:17: C0103: Variable name "X_test" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:974:25: E1101: Instance of 'AdultDataLoader' has no 'create_extra_info' member (no-member)
dataloaders/dataloader.py:984:0: C0115: Missing class docstring (missing-class-docstring)
dataloaders/dataloader.py:985:4: W0231: __init__ method from base class 'DataLoader' is not called (super-init-not-called)
dataloaders/dataloader.py:985:4: R0913: Too many arguments (7/5) (too-many-arguments)
dataloaders/dataloader.py:985:4: R0917: Too many positional arguments (7/5) (too-many-positional-arguments)
dataloaders/dataloader.py:1020:8: C0103: Variable name "X_train" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:1022:8: C0103: Variable name "X_test" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:1026:8: C0103: Variable name "X_train" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:1026:17: C0103: Variable name "X_test" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:1035:25: E1101: Instance of 'CoverTypeDataLoader' has no 'create_extra_info' member (no-member)
dataloaders/dataloader.py:1045:0: C0115: Missing class docstring (missing-class-docstring)
dataloaders/dataloader.py:1046:4: W0231: __init__ method from base class 'DataLoader' is not called (super-init-not-called)
dataloaders/dataloader.py:1046:4: R0913: Too many arguments (7/5) (too-many-arguments)
dataloaders/dataloader.py:1046:4: R0917: Too many positional arguments (7/5) (too-many-positional-arguments)
dataloaders/dataloader.py:1090:8: C0103: Variable name "X_train" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:1092:8: C0103: Variable name "X_test" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:1096:8: C0103: Variable name "X_train" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:1096:17: C0103: Variable name "X_test" doesn't conform to snake_case naming style (invalid-name)
dataloaders/dataloader.py:1102:25: E1101: Instance of 'HelocDataLoader' has no 'create_extra_info' member (no-member)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.ResNetModel:[134:217]
==autodeep.modelsdefinition.SoftOrdering1DCNN:[174:257]
        return model

    def process_inputs_labels_training(self, inputs, labels):
        inputs, labels = inputs.to(self.device), labels.to(self.device)
        if self.problem_type == "binary_classification":
            # outputs = torch.sigmoid(self.model(inputs)).reshape(-1)
            outputs = self.model(inputs).reshape(-1)
            labels = labels.float()
        elif self.problem_type == "regression":
            outputs = self.model(inputs).reshape(-1)
            labels = labels.float()
        elif self.problem_type == "multiclass_classification":
            labels = labels.long()
            outputs = self.model(inputs)
        else:
            raise ValueError(
                "Invalid problem_type. Supported options: binary_classification, multiclass_classification"
            )

        return outputs, labels

    def process_inputs_labels_prediction(self, inputs, labels):
        inputs, labels = inputs.to(self.device), labels.to(self.device)
        probabilities = None
        if self.problem_type == "binary_classification":
            probabilities = torch.sigmoid(self.model(inputs)).reshape(-1)
            predictions = (probabilities >= 0.5).float()
            probabilities = probabilities.cpu().numpy()
            labels = labels.float()
        elif self.problem_type == "regression":
            predictions = self.model(inputs).reshape(-1)
            labels = labels.float()
        elif self.problem_type == "multiclass_classification":
            labels = labels.long()
            _, predictions = torch.max(self.model(inputs), dim=1)
            self.logger.debug(f"multiclass predictions {predictions[:10]}")
        else:
            raise ValueError(
                "Invalid problem_type. Supported options: binary_classification, multiclass_classification"
            )

        return (
            predictions.cpu().numpy(),
            labels.cpu().numpy(),
            probabilities,
        )

    def train_step(self, train_loader):
        running_loss = 0.0
        for i, (inputs, labels) in enumerate(train_loader):
            # print("inputs, labels", inputs.shape, labels.shape)
            outputs, labels = self.process_inputs_labels_training(inputs, labels)

            # print("inputs, labels, outputs", inputs.shape, labels.shape, outputs.shape)

            self.optimizer.zero_grad()
            loss = self.loss_fn(outputs, labels)
            loss.backward()
            self.optimizer.step()

            running_loss += loss.item()
        return running_loss / len(train_loader)

    def validate_step(self, validation_loader):
        self.model.eval()

        val_loss = 0.0
        total_samples = 0

        with torch.no_grad():
            for inputs, labels in validation_loader:
                outputs, labels = self.process_inputs_labels_training(inputs, labels)

                loss = self.loss_fn(outputs, labels)
                val_loss += loss.item() * inputs.size(0)
                total_samples += inputs.size(0)

        return val_loss / total_samples

    def _set_loss_function(self, y_train):
        if self.problem_type == "binary_classification":
            num_positives = y_train.sum()
            num_negatives = len(y_train) - num_positives (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==igtd_notebooks.preprocess_tabs_ageconditions:[28:85]
==igtd_notebooks.preprocess_tabs_titanic:[28:85]
num_col = 7  # Number of pixel columns in image representation
num = (
    num_row * num_col
)  # Number of features to be included for analysis, which is also the total number of pixels in image representation
save_image_size = (
    3  # Size of pictures (in inches) saved during the execution of IGTD algorithm.
)
# Run the IGTD algorithm using (1) the Euclidean distance for calculating pairwise feature distances and pariwise pixel
# distances and (2) the absolute function for evaluating the difference between the feature distance ranking matrix and
# the pixel distance ranking matrix. Save the result in Test_1 folder.
fea_dist_method = "Euclidean"
image_dist_method = "Euclidean"
error = "abs"
result_dir = f"./modelsdefinition/IGTD/results/{dataset_name}_igtd_{fea_dist_method}_{image_dist_method}"

max_step = 1000000  # The maximum number of iterations to run the IGTD algorithm, if it does not converge.
val_step = 1000  # The number of iterations for determining algorithm convergence. If the error reduction rate
# is smaller than a pre-set threshold for val_step itertions, the algorithm converges.
min_gain = 0.01

os.makedirs(name=result_dir, exist_ok=True)
table_to_image(
    X_train,
    [num_row, num_col],
    fea_dist_method,
    image_dist_method,
    save_image_size,
    max_step,
    val_step,
    result_dir,
    error,
    min_gain=min_gain,
    save_mode="bulk",
    exclude_cols=exclude_cols,
)

# Run the IGTD algorithm using (1) the Pearson correlation coefficient for calculating pairwise feature distances,
# (2) the Manhattan distance for calculating pariwise pixel distances, and (3) the square function for evaluating
# the difference between the feature distance ranking matrix and the pixel distance ranking matrix.
# Save the result in Test_2 folder.
fea_dist_method = "Pearson"
image_dist_method = "Manhattan"
error = "squared"
result_dir = f"./modelsdefinition/IGTD/results/{dataset_name}_igtd_{fea_dist_method}_{image_dist_method}"
os.makedirs(name=result_dir, exist_ok=True)
table_to_image(
    X_train,
    [num_row, num_col],
    fea_dist_method,
    image_dist_method,
    save_image_size,
    max_step,
    val_step,
    result_dir,
    error,
    min_gain=min_gain,
) (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==igtd_notebooks.preprocess_tabs_creditcard:[29:85]
==igtd_notebooks.preprocess_tabs_diabetes:[30:86]
num = (
    num_row * num_col
)  # Number of features to be included for analysis, which is also the total number of pixels in image representation
save_image_size = (
    3  # Size of pictures (in inches) saved during the execution of IGTD algorithm.
)
# Run the IGTD algorithm using (1) the Euclidean distance for calculating pairwise feature distances and pariwise pixel
# distances and (2) the absolute function for evaluating the difference between the feature distance ranking matrix and
# the pixel distance ranking matrix. Save the result in Test_1 folder.
fea_dist_method = "Euclidean"
image_dist_method = "Euclidean"
error = "abs"
result_dir = f"./modelsdefinition/IGTD/results/{dataset_name}_igtd_{fea_dist_method}_{image_dist_method}"

max_step = 1000000  # The maximum number of iterations to run the IGTD algorithm, if it does not converge.
val_step = 1000  # The number of iterations for determining algorithm convergence. If the error reduction rate
# is smaller than a pre-set threshold for val_step itertions, the algorithm converges.
min_gain = 0.01

os.makedirs(name=result_dir, exist_ok=True)
table_to_image(
    X_train,
    [num_row, num_col],
    fea_dist_method,
    image_dist_method,
    save_image_size,
    max_step,
    val_step,
    result_dir,
    error,
    min_gain=min_gain,
    save_mode="bulk",
    exclude_cols=exclude_cols,
)

# Run the IGTD algorithm using (1) the Pearson correlation coefficient for calculating pairwise feature distances,
# (2) the Manhattan distance for calculating pariwise pixel distances, and (3) the square function for evaluating
# the difference between the feature distance ranking matrix and the pixel distance ranking matrix.
# Save the result in Test_2 folder.
fea_dist_method = "Pearson"
image_dist_method = "Manhattan"
error = "squared"
result_dir = f"./modelsdefinition/IGTD/results/{dataset_name}_igtd_{fea_dist_method}_{image_dist_method}"
os.makedirs(name=result_dir, exist_ok=True)
table_to_image(
    X_train,
    [num_row, num_col],
    fea_dist_method,
    image_dist_method,
    save_image_size,
    max_step,
    val_step,
    result_dir,
    error,
    min_gain=min_gain,
) (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==igtd_notebooks.preprocess_tabs_iris:[29:85]
==igtd_notebooks.preprocess_tabs_titanic:[29:85]
num = (
    num_row * num_col
)  # Number of features to be included for analysis, which is also the total number of pixels in image representation
save_image_size = (
    3  # Size of pictures (in inches) saved during the execution of IGTD algorithm.
)
# Run the IGTD algorithm using (1) the Euclidean distance for calculating pairwise feature distances and pariwise pixel
# distances and (2) the absolute function for evaluating the difference between the feature distance ranking matrix and
# the pixel distance ranking matrix. Save the result in Test_1 folder.
fea_dist_method = "Euclidean"
image_dist_method = "Euclidean"
error = "abs"
result_dir = f"./modelsdefinition/IGTD/results/{dataset_name}_igtd_{fea_dist_method}_{image_dist_method}"

max_step = 1000000  # The maximum number of iterations to run the IGTD algorithm, if it does not converge.
val_step = 1000  # The number of iterations for determining algorithm convergence. If the error reduction rate
# is smaller than a pre-set threshold for val_step itertions, the algorithm converges.
min_gain = 0.01

os.makedirs(name=result_dir, exist_ok=True)
table_to_image(
    X_train,
    [num_row, num_col],
    fea_dist_method,
    image_dist_method,
    save_image_size,
    max_step,
    val_step,
    result_dir,
    error,
    min_gain=min_gain,
    save_mode="bulk",
    exclude_cols=exclude_cols,
)

# Run the IGTD algorithm using (1) the Pearson correlation coefficient for calculating pairwise feature distances,
# (2) the Manhattan distance for calculating pariwise pixel distances, and (3) the square function for evaluating
# the difference between the feature distance ranking matrix and the pixel distance ranking matrix.
# Save the result in Test_2 folder.
fea_dist_method = "Pearson"
image_dist_method = "Manhattan"
error = "squared"
result_dir = f"./modelsdefinition/IGTD/results/{dataset_name}_igtd_{fea_dist_method}_{image_dist_method}"
os.makedirs(name=result_dir, exist_ok=True)
table_to_image(
    X_train,
    [num_row, num_col],
    fea_dist_method,
    image_dist_method,
    save_image_size,
    max_step,
    val_step,
    result_dir,
    error,
    min_gain=min_gain,
) (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==igtd_notebooks.preprocess_tabs_adult:[29:85]
==igtd_notebooks.preprocess_tabs_breastcancer:[29:85]
num = (
    num_row * num_col
)  # Number of features to be included for analysis, which is also the total number of pixels in image representation
save_image_size = (
    3  # Size of pictures (in inches) saved during the execution of IGTD algorithm.
)
# Run the IGTD algorithm using (1) the Euclidean distance for calculating pairwise feature distances and pariwise pixel
# distances and (2) the absolute function for evaluating the difference between the feature distance ranking matrix and
# the pixel distance ranking matrix. Save the result in Test_1 folder.
fea_dist_method = "Euclidean"
image_dist_method = "Euclidean"
error = "abs"
result_dir = f"./modelsdefinition/IGTD/results/{dataset_name}_igtd_{fea_dist_method}_{image_dist_method}"

max_step = 1000000  # The maximum number of iterations to run the IGTD algorithm, if it does not converge.
val_step = 1000  # The number of iterations for determining algorithm convergence. If the error reduction rate
# is smaller than a pre-set threshold for val_step itertions, the algorithm converges.
min_gain = 0.01

os.makedirs(name=result_dir, exist_ok=True)
table_to_image(
    X_train,
    [num_row, num_col],
    fea_dist_method,
    image_dist_method,
    save_image_size,
    max_step,
    val_step,
    result_dir,
    error,
    min_gain=min_gain,
    save_mode="bulk",
    exclude_cols=exclude_cols,
)

# Run the IGTD algorithm using (1) the Pearson correlation coefficient for calculating pairwise feature distances,
# (2) the Manhattan distance for calculating pariwise pixel distances, and (3) the square function for evaluating
# the difference between the feature distance ranking matrix and the pixel distance ranking matrix.
# Save the result in Test_2 folder.
fea_dist_method = "Pearson"
image_dist_method = "Manhattan"
error = "squared"
result_dir = f"./modelsdefinition/IGTD/results/{dataset_name}_igtd_{fea_dist_method}_{image_dist_method}"
os.makedirs(name=result_dir, exist_ok=True)
table_to_image(
    X_train,
    [num_row, num_col],
    fea_dist_method,
    image_dist_method,
    save_image_size,
    max_step,
    val_step,
    result_dir,
    error,
    min_gain=min_gain,
) (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==igtd_notebooks.preprocess_tabs_ageconditions:[29:85]
==igtd_notebooks.preprocess_tabs_covertype:[29:85]
num = (
    num_row * num_col
)  # Number of features to be included for analysis, which is also the total number of pixels in image representation
save_image_size = (
    3  # Size of pictures (in inches) saved during the execution of IGTD algorithm.
)
# Run the IGTD algorithm using (1) the Euclidean distance for calculating pairwise feature distances and pariwise pixel
# distances and (2) the absolute function for evaluating the difference between the feature distance ranking matrix and
# the pixel distance ranking matrix. Save the result in Test_1 folder.
fea_dist_method = "Euclidean"
image_dist_method = "Euclidean"
error = "abs"
result_dir = f"./modelsdefinition/IGTD/results/{dataset_name}_igtd_{fea_dist_method}_{image_dist_method}"

max_step = 1000000  # The maximum number of iterations to run the IGTD algorithm, if it does not converge.
val_step = 1000  # The number of iterations for determining algorithm convergence. If the error reduction rate
# is smaller than a pre-set threshold for val_step itertions, the algorithm converges.
min_gain = 0.01

os.makedirs(name=result_dir, exist_ok=True)
table_to_image(
    X_train,
    [num_row, num_col],
    fea_dist_method,
    image_dist_method,
    save_image_size,
    max_step,
    val_step,
    result_dir,
    error,
    min_gain=min_gain,
    save_mode="bulk",
    exclude_cols=exclude_cols,
)

# Run the IGTD algorithm using (1) the Pearson correlation coefficient for calculating pairwise feature distances,
# (2) the Manhattan distance for calculating pariwise pixel distances, and (3) the square function for evaluating
# the difference between the feature distance ranking matrix and the pixel distance ranking matrix.
# Save the result in Test_2 folder.
fea_dist_method = "Pearson"
image_dist_method = "Manhattan"
error = "squared"
result_dir = f"./modelsdefinition/IGTD/results/{dataset_name}_igtd_{fea_dist_method}_{image_dist_method}"
os.makedirs(name=result_dir, exist_ok=True)
table_to_image(
    X_train,
    [num_row, num_col],
    fea_dist_method,
    image_dist_method,
    save_image_size,
    max_step,
    val_step,
    result_dir,
    error,
    min_gain=min_gain,
) (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==igtd_notebooks.preprocess_tabs_heloc:[29:85]
==igtd_notebooks.preprocess_tabs_housing:[29:85]
num = (
    num_row * num_col
)  # Number of features to be included for analysis, which is also the total number of pixels in image representation
save_image_size = (
    3  # Size of pictures (in inches) saved during the execution of IGTD algorithm.
)
# Run the IGTD algorithm using (1) the Euclidean distance for calculating pairwise feature distances and pariwise pixel
# distances and (2) the absolute function for evaluating the difference between the feature distance ranking matrix and
# the pixel distance ranking matrix. Save the result in Test_1 folder.
fea_dist_method = "Euclidean"
image_dist_method = "Euclidean"
error = "abs"
result_dir = f"./modelsdefinition/IGTD/results/{dataset_name}_igtd_{fea_dist_method}_{image_dist_method}"

max_step = 1000000  # The maximum number of iterations to run the IGTD algorithm, if it does not converge.
val_step = 1000  # The number of iterations for determining algorithm convergence. If the error reduction rate
# is smaller than a pre-set threshold for val_step itertions, the algorithm converges.
min_gain = 0.01

os.makedirs(name=result_dir, exist_ok=True)
table_to_image(
    X_train,
    [num_row, num_col],
    fea_dist_method,
    image_dist_method,
    save_image_size,
    max_step,
    val_step,
    result_dir,
    error,
    min_gain=min_gain,
    save_mode="bulk",
    exclude_cols=exclude_cols,
)

# Run the IGTD algorithm using (1) the Pearson correlation coefficient for calculating pairwise feature distances,
# (2) the Manhattan distance for calculating pariwise pixel distances, and (3) the square function for evaluating
# the difference between the feature distance ranking matrix and the pixel distance ranking matrix.
# Save the result in Test_2 folder.
fea_dist_method = "Pearson"
image_dist_method = "Manhattan"
error = "squared"
result_dir = f"./modelsdefinition/IGTD/results/{dataset_name}_igtd_{fea_dist_method}_{image_dist_method}"
os.makedirs(name=result_dir, exist_ok=True)
table_to_image(
    X_train,
    [num_row, num_col],
    fea_dist_method,
    image_dist_method,
    save_image_size,
    max_step,
    val_step,
    result_dir,
    error,
    min_gain=min_gain,
) (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.CatBoostModel:[192:237]
==autodeep.modelsdefinition.XGBoostTrainer:[188:234]
            probabilities = None

            if self.problem_type != "regression":
                probabilities = model.predict_proba(X_train)[:, 1]

            # Calculate the score using the specified metric
            self.evaluator.y_true = y_train
            self.evaluator.y_pred = y_pred
            self.evaluator.y_prob = probabilities
            metrics_for_split_train = self.evaluator.evaluate_model()
            self.logger.info(f"Train metrics: {metrics_for_split_val}")

            if self.evaluator.maximize[metric][0]:
                score = -1 * score

            # Return the negative score (to minimize)
            return {
                "loss": score,
                "params": params,
                "status": STATUS_OK,
                "trained_model": model,
                "train_metrics": metrics_for_split_train,
                "validation_metrics": metrics_for_split_val,
            }

        # Perform the hyperparameter search
        trials = Trials()

        self.evaluator = Evaluator(problem_type=self.problem_type)
        threshold = float(-1.0 * self.evaluator.maximize[metric][1])

        # Run the hyperopt search
        best = fmin(
            objective,
            space=space,
            algo=tpe.suggest,
            max_evals=max_evals,
            trials=trials,
            rstate=np.random.default_rng(self.random_state),
            early_stop_fn=lambda x: stop_on_perfect_lossCondition(x, threshold),
        )

        best_params = space_eval(space, best)
        best_params["default_params"] = self.default_params
        best_trial = trials.best_trial
        best_score = best_trial["result"]["loss"] (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.ResNetModel:[636:672]
==autodeep.modelsdefinition.SoftOrdering1DCNN:[612:648]
        )

        test_loader = DataLoader(
            test_dataset,
            batch_size=batch_size,
            shuffle=False,
            num_workers=self.num_workers,
            pin_memory=True,
        )

        predictions = []
        probabilities = []
        with torch.no_grad():
            for inputs in test_loader:
                inputs = inputs.to(self.device)
                outputs = self.model(inputs)

                if self.problem_type == "binary_classification":
                    probs = torch.sigmoid(outputs).cpu().numpy().reshape(-1)
                    preds = (probs >= 0.5).astype(int)
                    probabilities.extend(probs)

                elif self.problem_type == "multiclass_classification":
                    _, preds = torch.max(outputs, 1)
                    preds = preds.cpu().numpy()
                elif self.problem_type == "regression":
                    preds = outputs.cpu().numpy()
                else:
                    raise ValueError(
                        "Invalid problem_type. Supported options: binary_classification, multiclass_classification, regression."
                    )

                predictions.extend(preds)

        self.logger.debug("Model predicting success")
        predictions = np.array(predictions).squeeze() (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.MLP:[243:278]
==autodeep.modelsdefinition.XGBoostTrainer:[204:240]
            return {
                "loss": score,
                "params": params,
                "status": STATUS_OK,
                "trained_model": model,
                "train_metrics": metrics_for_split_train,
                "validation_metrics": metrics_for_split_val,
            }

        # Run hyperopt search
        trials = Trials()
        self.evaluator = Evaluator(problem_type=self.problem_type)
        threshold = float(-1.0 * self.evaluator.maximize[metric][1])

        best = fmin(
            objective,
            space=space,
            algo=tpe.suggest,
            max_evals=max_evals,
            trials=trials,
            rstate=np.random.default_rng(self.random_state),
            early_stop_fn=lambda x: stop_on_perfect_lossCondition(x, threshold),
        )

        # Retrieve best hyperparameters and model performance
        best_params = space_eval(space, best)
        best_params["default_params"] = self.default_params

        best_trial = trials.best_trial
        best_score = best_trial["result"]["loss"]
        if self.evaluator.maximize[metric][0]:
            best_score = -1 * best_score
        train_metrics = best_trial["result"]["train_metrics"]
        validation_metrics = best_trial["result"]["validation_metrics"]
 (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.ResNetModel:[276:317]
==autodeep.modelsdefinition.SoftOrdering1DCNN:[308:347]
        return dataset

    def _torch_image_datasets_to_dataloaders(
        self, train_dataset, val_dataset, batch_size
    ):
        train_loader = DataLoader(
            train_dataset,
            batch_size=batch_size,
            shuffle=True,
            drop_last=False,
            num_workers=self.num_workers,
            pin_memory=True,
        )

        val_loader = DataLoader(
            val_dataset,
            batch_size=batch_size,
            shuffle=False,
            drop_last=False,
            num_workers=self.num_workers,
            pin_memory=True,
        )

        return train_loader, val_loader

    def _load_model(self, model_path):
        """Load a trained model from a given path"""
        if not os.path.isfile(model_path):
            raise FileNotFoundError(f"Model file not found at {model_path}")

        self.model.load_state_dict(torch.load(model_path, map_location=self.device))
        self.model.eval()
        print(f"Model loaded successfully from {model_path}")

    def _save_model(self, model_dir, model_name):
        """Save the trained model to a given directory with the specified name"""
        save_path = os.path.join(model_dir, model_name)
        torch.save(self.model.state_dict(), save_path)
        print(f"Model saved successfully at {save_path}")

    def _set_optimizer_schedulers(self, params, default_params: Optional[Dict] = None): (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.CatBoostModel:[207:237]
==autodeep.modelsdefinition.MLP:[243:273]
            return {
                "loss": score,
                "params": params,
                "status": STATUS_OK,
                "trained_model": model,
                "train_metrics": metrics_for_split_train,
                "validation_metrics": metrics_for_split_val,
            }

        # Run hyperopt search
        trials = Trials()
        self.evaluator = Evaluator(problem_type=self.problem_type)
        threshold = float(-1.0 * self.evaluator.maximize[metric][1])

        best = fmin(
            objective,
            space=space,
            algo=tpe.suggest,
            max_evals=max_evals,
            trials=trials,
            rstate=np.random.default_rng(self.random_state),
            early_stop_fn=lambda x: stop_on_perfect_lossCondition(x, threshold),
        )

        # Retrieve best hyperparameters and model performance
        best_params = space_eval(space, best)
        best_params["default_params"] = self.default_params

        best_trial = trials.best_trial
        best_score = best_trial["result"]["loss"] (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.MLP:[248:278]
==autodeep.modelsdefinition.ResNetModel:[578:607]
                "train_metrics": metrics_for_split_train,
                "validation_metrics": metrics_for_split_val,
            }

        trials = Trials()
        self.evaluator = Evaluator(problem_type=self.problem_type)
        threshold = float(-1.0 * self.evaluator.maximize[metric][1])

        best = fmin(
            objective,
            space=space,
            algo=tpe.suggest,
            max_evals=max_evals,
            trials=trials,
            rstate=np.random.default_rng(self.random_state),
            early_stop_fn=lambda x: stop_on_perfect_lossCondition(x, threshold),
        )

        best_params = space_eval(space, best)
        best_params["default_params"] = self.default_params

        best_trial = trials.best_trial
        best_score = best_trial["result"]["loss"]
        if self.evaluator.maximize[metric][0]:
            best_score = -1 * best_score

        train_metrics = best_trial["result"]["train_metrics"]
        validation_metrics = best_trial["result"]["validation_metrics"]
 (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.ResNetModel:[95:122]
==autodeep.modelsdefinition.SoftOrdering1DCNN:[132:159]
        self.transformation = None
        self.logger = logging.getLogger(__name__)
        self.logger.setLevel(logging.DEBUG)
        self.random_state = 4200
        # Get the filename of the current Python script
        self.script_filename = os.path.basename(__file__)
        formatter = logging.Formatter(
            f"%(asctime)s - %(levelname)s - {self.script_filename} - %(message)s"
        )
        console_handler = logging.StreamHandler()
        console_handler.setLevel(logging.INFO)
        console_handler.setFormatter(formatter)
        if not any(
            isinstance(handler, logging.StreamHandler)
            for handler in self.logger.handlers
        ):
            self.logger.addHandler(console_handler)

        # Add file handler
        file_handler = logging.FileHandler("logfile.log")
        file_handler.setLevel(logging.DEBUG)  # Set log level to INFO
        file_handler.setFormatter(formatter)
        if not any(
            isinstance(handler, logging.FileHandler) for handler in self.logger.handlers
        ):
            self.logger.addHandler(file_handler)
 (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.MLP:[27:52]
==autodeep.modelsdefinition.SoftOrdering1DCNN:[133:159]
        self.logger = logging.getLogger(__name__)
        self.logger.setLevel(logging.DEBUG)
        self.random_state = 4200
        # Get the filename of the current Python script
        self.script_filename = os.path.basename(__file__)
        formatter = logging.Formatter(
            f"%(asctime)s - %(levelname)s - {self.script_filename} - %(message)s"
        )
        console_handler = logging.StreamHandler()
        console_handler.setLevel(logging.INFO)
        console_handler.setFormatter(formatter)
        if not any(
            isinstance(handler, logging.StreamHandler)
            for handler in self.logger.handlers
        ):
            self.logger.addHandler(console_handler)

        # Add file handler
        file_handler = logging.FileHandler("logfile.log")
        file_handler.setLevel(logging.DEBUG)  # Set log level to INFO
        file_handler.setFormatter(formatter)
        if not any(
            isinstance(handler, logging.FileHandler) for handler in self.logger.handlers
        ):
            self.logger.addHandler(file_handler)
 (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.CatBoostModel:[212:237]
==autodeep.modelsdefinition.ResNetModel:[578:601]
                "train_metrics": metrics_for_split_train,
                "validation_metrics": metrics_for_split_val,
            }

        trials = Trials()
        self.evaluator = Evaluator(problem_type=self.problem_type)
        threshold = float(-1.0 * self.evaluator.maximize[metric][1])

        best = fmin(
            objective,
            space=space,
            algo=tpe.suggest,
            max_evals=max_evals,
            trials=trials,
            rstate=np.random.default_rng(self.random_state),
            early_stop_fn=lambda x: stop_on_perfect_lossCondition(x, threshold),
        )

        best_params = space_eval(space, best)
        best_params["default_params"] = self.default_params

        best_trial = trials.best_trial
        best_score = best_trial["result"]["loss"] (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.MLP:[32:53]
==autodeep.modelsdefinition.XGBoostTrainer:[28:51]
        formatter = logging.Formatter(
            f"%(asctime)s - %(levelname)s - {self.script_filename} - %(message)s"
        )
        console_handler = logging.StreamHandler()
        console_handler.setLevel(logging.INFO)
        console_handler.setFormatter(formatter)
        if not any(
            isinstance(handler, logging.StreamHandler)
            for handler in self.logger.handlers
        ):
            self.logger.addHandler(console_handler)

        # Add file handler
        file_handler = logging.FileHandler("logfile.log")
        file_handler.setLevel(logging.DEBUG)  # Set log level to INFO
        file_handler.setFormatter(formatter)
        if not any(
            isinstance(handler, logging.FileHandler) for handler in self.logger.handlers
        ):
            self.logger.addHandler(file_handler)

        # extra_info used in case it is needed and specific to the dataset we are training on
        self.extra_info = None (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.MLP:[250:275]
==autodeep.modelsdefinition.SoftOrdering1DCNN:[569:592]
            }

        # Run hyperopt search
        trials = Trials()
        self.evaluator = Evaluator(problem_type=self.problem_type)
        threshold = float(-1.0 * self.evaluator.maximize[metric][1])

        best = fmin(
            objective,
            space=space,
            algo=tpe.suggest,
            max_evals=max_evals,
            trials=trials,
            rstate=np.random.default_rng(self.random_state),
            early_stop_fn=lambda x: stop_on_perfect_lossCondition(x, threshold),
        )

        # Retrieve best hyperparameters and model performance
        best_params = space_eval(space, best)
        best_params["default_params"] = self.default_params

        best_trial = trials.best_trial
        best_score = best_trial["result"]["loss"]
        if self.evaluator.maximize[metric][0]:
            best_score = -1 * best_score (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.automl:[27:45]
==autodeep.dataloaders.dataloader:[25:43]
    "img_size": "auto",
    "save_image_size": 3,
    "max_step": 1_000_000,
    "val_step": 1_000,
    "min_gain": 0.01,
    "ordering_methods": {
        "Euclidean_Euclidean": {
            "fea_dist_method": "Euclidean",
            "image_dist_method": "Euclidean",
            "error": "abs",
        },
        "Pearson_Manhattan": {
            "fea_dist_method": "Pearson",
            "image_dist_method": "Manhattan",
            "error": "squared",
        },
    },
} (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.CatBoostModel:[31:52]
==autodeep.modelsdefinition.MLP:[32:52]
        formatter = logging.Formatter(
            f"%(asctime)s - %(levelname)s - {self.script_filename} - %(message)s"
        )
        console_handler = logging.StreamHandler()
        console_handler.setLevel(logging.INFO)
        console_handler.setFormatter(formatter)
        if not any(
            isinstance(handler, logging.StreamHandler)
            for handler in self.logger.handlers
        ):
            self.logger.addHandler(console_handler)

        # Add file handler
        file_handler = logging.FileHandler("logfile.log")
        file_handler.setLevel(logging.DEBUG)  # Set log level to INFO
        file_handler.setFormatter(formatter)
        if not any(
            isinstance(handler, logging.FileHandler) for handler in self.logger.handlers
        ):
            self.logger.addHandler(file_handler) (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.SoftOrdering1DCNN:[138:159]
==autodeep.modelsdefinition.XGBoostTrainer:[28:50]
        formatter = logging.Formatter(
            f"%(asctime)s - %(levelname)s - {self.script_filename} - %(message)s"
        )
        console_handler = logging.StreamHandler()
        console_handler.setLevel(logging.INFO)
        console_handler.setFormatter(formatter)
        if not any(
            isinstance(handler, logging.StreamHandler)
            for handler in self.logger.handlers
        ):
            self.logger.addHandler(console_handler)

        # Add file handler
        file_handler = logging.FileHandler("logfile.log")
        file_handler.setLevel(logging.DEBUG)  # Set log level to INFO
        file_handler.setFormatter(formatter)
        if not any(
            isinstance(handler, logging.FileHandler) for handler in self.logger.handlers
        ):
            self.logger.addHandler(file_handler)
 (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.CatBoostModel:[214:237]
==autodeep.modelsdefinition.SoftOrdering1DCNN:[569:590]
            }

        trials = Trials()
        self.evaluator = Evaluator(problem_type=self.problem_type)
        threshold = float(-1.0 * self.evaluator.maximize[metric][1])

        best = fmin(
            objective,
            space=space,
            algo=tpe.suggest,
            max_evals=max_evals,
            trials=trials,
            rstate=np.random.default_rng(self.random_state),
            early_stop_fn=lambda x: stop_on_perfect_lossCondition(x, threshold),
        )

        best_params = space_eval(space, best)
        best_params["default_params"] = self.default_params

        best_trial = trials.best_trial
        best_score = best_trial["result"]["loss"] (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.CommonStructure:[406:428]
==autodeep.modelsdefinition.MLP:[259:278]
            space=space,
            algo=tpe.suggest,
            max_evals=max_evals,
            trials=trials,
            rstate=np.random.default_rng(self.random_state),
            early_stop_fn=lambda x: stop_on_perfect_lossCondition(x, threshold),
        )

        # Retrieve best hyperparameters and model performance
        best_params = space_eval(space, best)
        best_params["default_params"] = self.default_params

        best_trial = trials.best_trial
        best_score = best_trial["result"]["loss"]
        if self.evaluator.maximize[metric][0]:
            best_score = -1 * best_score
        train_metrics = best_trial["result"]["train_metrics"]
        validation_metrics = best_trial["result"]["validation_metrics"]
 (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.FTTransformerModel:[20:39]
==autodeep.modelsdefinition.TabTransformerModel:[20:40]
        print("tabular model params")
        print(params)
        print("tabular model outer params")
        print(default_params)

        data_config, trainer_config, optimizer_config, learning_rate = (
            self.prepare_shared_tabular_configs(
                params=params,
                default_params=default_params,
                extra_info=self.extra_info,
            )
        )
        # input_dim' (input_embed_dim) must be multiples of 'num_heads'
        input_embed_dim_multiplier = params.get("input_embed_dim_multiplier", None)
        num_heads = params.get("num_heads", None)

        if num_heads is not None and input_embed_dim_multiplier is not None:
            params["input_embed_dim"] = input_embed_dim_multiplier * num_heads
 (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.ResNetModel:[501:517]
==autodeep.modelsdefinition.SoftOrdering1DCNN:[507:523]
                    if early_stopping and val_size > 0:
                        val_loss = self.validate_step(val_loader)
                        self.scheduler.step(val_loss)

                        if (
                            val_loss + self.default_params.get("tol", 0.0)
                            < best_val_loss
                        ):
                            best_val_loss = val_loss
                            best_epoch = epoch
                            current_patience = 0
                            best_model_state_dict = self.model.state_dict()
                        else:
                            current_patience += 1

                        print( (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.CommonStructure:[406:421]
==autodeep.modelsdefinition.SoftOrdering1DCNN:[577:592]
            space=space,
            algo=tpe.suggest,
            max_evals=max_evals,
            trials=trials,
            rstate=np.random.default_rng(self.random_state),
            early_stop_fn=lambda x: stop_on_perfect_lossCondition(x, threshold),
        )

        best_params = space_eval(space, best)
        best_params["default_params"] = self.default_params

        best_trial = trials.best_trial
        best_score = best_trial["result"]["loss"]
        if self.evaluator.maximize[metric][0]:
            best_score = -1 * best_score (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.AutomaticFeatureInteractionModel:[63:77]
==autodeep.modelsdefinition.NodeModel:[57:71]
            optimizer_config = OptimizerConfig()

        print(data_config)
        print(model_config)
        print(optimizer_config)
        print(trainer_config)

        tabular_model = TabularModel(
            data_config=data_config,
            model_config=model_config,
            optimizer_config=optimizer_config,
            trainer_config=trainer_config,
        )
        return tabular_model (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.AutomaticFeatureInteractionModel:[40:55]
==autodeep.modelsdefinition.NodeModel:[34:49]
        compatible_params = {
            param: value for param, value in params.items() if param in valid_params
        }
        invalid_params = {
            param: value for param, value in params.items() if param not in valid_params
        }
        self.logger.warning(
            f"You are passing some invalid parameters to the model {invalid_params}"
        )

        if self.task == "regression":
            compatible_params["target_range"] = self.target_range

        self.logger.debug(f"compatible parameters: {compatible_params}")
 (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.CategoryEmbeddingModel:[58:72]
==autodeep.modelsdefinition.TabNetModel:[57:71]
            optimizer_config = OptimizerConfig()

        print(data_config)
        print(model_config)
        print(optimizer_config)
        print(trainer_config)

        tabular_model = TabularModel(
            data_config=data_config,
            model_config=model_config,
            optimizer_config=optimizer_config,
            trainer_config=trainer_config,
        )
        return tabular_model (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.CategoryEmbeddingModel:[34:49]
==autodeep.modelsdefinition.TabNetModel:[34:49]
        compatible_params = {
            param: value for param, value in params.items() if param in valid_params
        }
        invalid_params = {
            param: value for param, value in params.items() if param not in valid_params
        }
        self.logger.warning(
            f"You are passing some invalid parameters to the model {invalid_params}"
        )

        if self.task == "regression":
            compatible_params["target_range"] = self.target_range

        self.logger.debug(f"compatible parameters: {compatible_params}")
 (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.FTTransformerModel:[63:77]
==autodeep.modelsdefinition.TabTransformerModel:[64:78]
            optimizer_config = OptimizerConfig()

        print(data_config)
        print(model_config)
        print(optimizer_config)
        print(trainer_config)

        tabular_model = TabularModel(
            data_config=data_config,
            model_config=model_config,
            optimizer_config=optimizer_config,
            trainer_config=trainer_config,
        )
        return tabular_model (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.FTTransformerModel:[40:55]
==autodeep.modelsdefinition.TabTransformerModel:[41:56]
        compatible_params = {
            param: value for param, value in params.items() if param in valid_params
        }
        invalid_params = {
            param: value for param, value in params.items() if param not in valid_params
        }
        self.logger.warning(
            f"You are passing some invalid parameters to the model {invalid_params}"
        )

        if self.task == "regression":
            compatible_params["target_range"] = self.target_range

        self.logger.debug(f"compatible parameters: {compatible_params}")
 (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==igtd_notebooks.preprocess_tabs_creditcard:[48:60]
==igtd_notebooks.preprocess_tabs_diabetes:[73:85]
os.makedirs(name=result_dir, exist_ok=True)
table_to_image(
    X_train,
    [num_row, num_col],
    fea_dist_method,
    image_dist_method,
    save_image_size,
    max_step,
    val_step,
    result_dir,
    error,
    min_gain=min_gain, (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==igtd_notebooks.preprocess_tabs_creditcard:[72:84]
==igtd_notebooks.preprocess_tabs_diabetes:[49:61]
os.makedirs(name=result_dir, exist_ok=True)
table_to_image(
    X_train,
    [num_row, num_col],
    fea_dist_method,
    image_dist_method,
    save_image_size,
    max_step,
    val_step,
    result_dir,
    error,
    min_gain=min_gain, (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==igtd_notebooks.preprocess_tabs_iris:[72:84]
==igtd_notebooks.preprocess_tabs_titanic:[48:60]
os.makedirs(name=result_dir, exist_ok=True)
table_to_image(
    X_train,
    [num_row, num_col],
    fea_dist_method,
    image_dist_method,
    save_image_size,
    max_step,
    val_step,
    result_dir,
    error,
    min_gain=min_gain, (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==igtd_notebooks.preprocess_tabs_iris:[48:60]
==igtd_notebooks.preprocess_tabs_titanic:[72:84]
os.makedirs(name=result_dir, exist_ok=True)
table_to_image(
    X_train,
    [num_row, num_col],
    fea_dist_method,
    image_dist_method,
    save_image_size,
    max_step,
    val_step,
    result_dir,
    error,
    min_gain=min_gain, (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==igtd_notebooks.preprocess_tabs_adult:[72:84]
==igtd_notebooks.preprocess_tabs_breastcancer:[48:60]
os.makedirs(name=result_dir, exist_ok=True)
table_to_image(
    X_train,
    [num_row, num_col],
    fea_dist_method,
    image_dist_method,
    save_image_size,
    max_step,
    val_step,
    result_dir,
    error,
    min_gain=min_gain, (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==igtd_notebooks.preprocess_tabs_adult:[48:60]
==igtd_notebooks.preprocess_tabs_breastcancer:[72:84]
os.makedirs(name=result_dir, exist_ok=True)
table_to_image(
    X_train,
    [num_row, num_col],
    fea_dist_method,
    image_dist_method,
    save_image_size,
    max_step,
    val_step,
    result_dir,
    error,
    min_gain=min_gain, (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==igtd_notebooks.preprocess_tabs_ageconditions:[48:60]
==igtd_notebooks.preprocess_tabs_covertype:[72:84]
os.makedirs(name=result_dir, exist_ok=True)
table_to_image(
    X_train,
    [num_row, num_col],
    fea_dist_method,
    image_dist_method,
    save_image_size,
    max_step,
    val_step,
    result_dir,
    error,
    min_gain=min_gain, (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==igtd_notebooks.preprocess_tabs_ageconditions:[72:84]
==igtd_notebooks.preprocess_tabs_covertype:[48:60]
os.makedirs(name=result_dir, exist_ok=True)
table_to_image(
    X_train,
    [num_row, num_col],
    fea_dist_method,
    image_dist_method,
    save_image_size,
    max_step,
    val_step,
    result_dir,
    error,
    min_gain=min_gain, (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==igtd_notebooks.preprocess_tabs_heloc:[48:60]
==igtd_notebooks.preprocess_tabs_housing:[72:84]
os.makedirs(name=result_dir, exist_ok=True)
table_to_image(
    X_train,
    [num_row, num_col],
    fea_dist_method,
    image_dist_method,
    save_image_size,
    max_step,
    val_step,
    result_dir,
    error,
    min_gain=min_gain, (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==igtd_notebooks.preprocess_tabs_heloc:[72:84]
==igtd_notebooks.preprocess_tabs_housing:[48:60]
os.makedirs(name=result_dir, exist_ok=True)
table_to_image(
    X_train,
    [num_row, num_col],
    fea_dist_method,
    image_dist_method,
    save_image_size,
    max_step,
    val_step,
    result_dir,
    error,
    min_gain=min_gain, (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.AutomaticFeatureInteractionModel:[20:33]
==autodeep.modelsdefinition.GATE:[20:33]
        print("tabular model params")
        print(params)
        print("tabular model outer params")
        print(default_params)

        data_config, trainer_config, optimizer_config, learning_rate = (
            self.prepare_shared_tabular_configs(
                params=params,
                default_params=default_params,
                extra_info=self.extra_info,
            )
        )
        # embed_dim (attn_embed_dim) must be divisible by num_heads (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.NodeModel:[20:33]
==autodeep.modelsdefinition.TabNetModel:[20:33]
        print("tabular model params")
        print(params)
        print("tabular model outer params")
        print(default_params)

        data_config, trainer_config, optimizer_config, learning_rate = (
            self.prepare_shared_tabular_configs(
                params=params,
                default_params=default_params,
                extra_info=self.extra_info,
            )
        )
 (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.CatBoostModel:[225:237]
==autodeep.modelsdefinition.CommonStructure:[406:419]
            space=space,
            algo=tpe.suggest,
            max_evals=max_evals,
            trials=trials,
            rstate=np.random.default_rng(self.random_state),
            early_stop_fn=lambda x: stop_on_perfect_lossCondition(x, threshold),
        )

        best_params = space_eval(space, best)
        best_params["default_params"] = self.default_params

        best_trial = trials.best_trial
        best_score = best_trial["result"]["loss"] (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.GANDALF:[22:35]
==autodeep.modelsdefinition.TabTransformerModel:[20:34]
        print("tabular model params")
        print(params)
        print("tabular model outer params")
        print(default_params)

        data_config, trainer_config, optimizer_config, learning_rate = (
            self.prepare_shared_tabular_configs(
                params=params,
                default_params=default_params,
                extra_info=self.extra_info,
            )
        )
 (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.dataloaders.dataloader:[426:438]
==autodeep.modelsdefinition.IGTD:[169:180]
                )
            train_mask = df[self.split_col] == self.train_value
            test_mask = df[self.split_col] == self.test_value
            X_train, X_test = X[train_mask], X[test_mask]
            y_train, y_test = y[train_mask], y[test_mask]
        else:
            X_train, X_test, y_train, y_test = train_test_split(
                X,
                y,
                test_size=self.test_size,
                random_state=self.random_state, (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.ResNetModel:[421:434]
==autodeep.modelsdefinition.SoftOrdering1DCNN:[432:446]
        if self.problem_type == "regression":
            self.num_targets = 1  # Or y.shape[1] for multi-output regression
        elif self.problem_type == "binary_classification":
            self.num_targets = (
                1  # Output will be a single logit (use sigmoid in loss function)
            )
        elif self.problem_type == "multiclass_classification":
            self.num_targets = len(np.unique(y))  # Number of unique classes
        else:
            raise ValueError("Unsupported task type")

        self.logger.debug(f"Training on {self.device} for dataset")

        # Splitting data into training and validation sets (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.FTTransformerModel:[40:53]
==autodeep.modelsdefinition.GANDALF:[36:49]
        compatible_params = {
            param: value for param, value in params.items() if param in valid_params
        }
        invalid_params = {
            param: value for param, value in params.items() if param not in valid_params
        }
        self.logger.warning(
            f"You are passing some invalid parameters to the model {invalid_params}"
        )

        if self.task == "regression":
            compatible_params["target_range"] = self.target_range
 (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.CategoryEmbeddingModel:[20:33]
==autodeep.modelsdefinition.FTTransformerModel:[20:33]
        print("tabular model params")
        print(params)
        print("tabular model outer params")
        print(default_params)

        data_config, trainer_config, optimizer_config, learning_rate = (
            self.prepare_shared_tabular_configs(
                params=params,
                default_params=default_params,
                extra_info=self.extra_info,
            )
        )
        # input_dim' (input_embed_dim) must be multiples of 'num_heads' (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==igtd_notebooks.preprocess_tabs_covertype:[15:28]
==igtd_notebooks.preprocess_tabs_heloc:[15:28]
data_loader = create_data_loader(
    dataset_name,
    test_size=0.2,
    normalize_features="mean_std",
    encode_categorical=True,
    return_extra_info=False,
    random_state=4200,
)
X_train, X_test, y_train, y_test, extra_info = data_loader.load_data()

exclude_cols = []

num_row = 6  # Number of pixel rows in image representation (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.CatBoostModel:[177:191]
==autodeep.modelsdefinition.XGBoostTrainer:[173:187]
            probabilities = None

            if self.problem_type != "regression":
                probabilities = model.predict_proba(X_val)[:, 1]

            # Calculate the score using the specified metric
            self.evaluator.y_true = y_val
            self.evaluator.y_pred = y_pred
            self.evaluator.y_prob = probabilities
            self.evaluator.run_metrics = eval_metrics
            metrics_for_split_val = self.evaluator.evaluate_model()
            score = metrics_for_split_val[metric]
            self.logger.info(f"Validation metrics: {metrics_for_split_val}")
 (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.automl:[33:43]
==autodeep.modelsdefinition.IGTD:[547:557]
        "Euclidean_Euclidean": {
            "fea_dist_method": "Euclidean",
            "image_dist_method": "Euclidean",
            "error": "abs",
        },
        "Pearson_Manhattan": {
            "fea_dist_method": "Pearson",
            "image_dist_method": "Manhattan",
            "error": "squared",
        }, (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.ResNetModel:[487:499]
==autodeep.modelsdefinition.SoftOrdering1DCNN:[493:505]
            self.model.to(self.device)
            self.model.train()

            best_val_loss = float("inf")
            best_epoch = 0
            current_patience = 0
            best_model_state_dict = None

            with tqdm(
                total=max_epochs, desc="Training", unit="epoch", ncols=80
            ) as pbar:
                for epoch in range(max_epochs): (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==igtd_notebooks.preprocess_tabs_creditcard:[15:27]
==igtd_notebooks.preprocess_tabs_titanic:[15:27]
data_loader = create_data_loader(
    dataset_name,
    test_size=0.2,
    normalize_features="mean_std",
    encode_categorical=True,
    return_extra_info=False,
    random_state=4200,
)
X_train, X_test, y_train, y_test, extra_info = data_loader.load_data()

exclude_cols = []
 (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==igtd_notebooks.preprocess_tabs_adult:[15:27]
==igtd_notebooks.preprocess_tabs_iris:[15:27]
data_loader = create_data_loader(
    dataset_name,
    test_size=0.2,
    normalize_features="mean_std",
    encode_categorical=True,
    return_extra_info=False,
    random_state=4200,
)
X_train, X_test, y_train, y_test, extra_info = data_loader.load_data()

exclude_cols = []
 (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==igtd_notebooks.preprocess_tabs_ageconditions:[15:27]
==igtd_notebooks.preprocess_tabs_covertype:[15:27]
data_loader = create_data_loader(
    dataset_name,
    test_size=0.2,
    normalize_features="mean_std",
    encode_categorical=True,
    return_extra_info=False,
    random_state=4200,
)
X_train, X_test, y_train, y_test, extra_info = data_loader.load_data()

exclude_cols = []
 (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==igtd_notebooks.preprocess_tabs_heloc:[15:27]
==igtd_notebooks.preprocess_tabs_housing:[15:27]
data_loader = create_data_loader(
    dataset_name,
    test_size=0.2,
    normalize_features="mean_std",
    encode_categorical=True,
    return_extra_info=False,
    random_state=4200,
)
X_train, X_test, y_train, y_test, extra_info = data_loader.load_data()

exclude_cols = []
 (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.dataloaders.dataloader:[408:420]
==autodeep.modelsdefinition.IGTD:[154:168]
        )

        # Split into features and target
        X = df.drop(columns=[self.target_column])
        y = df[self.target_column]

        if self.encode_categorical:
            X = self.force_encode_categorical(X)

        if self.split_col and self.split_col in df.columns:
            if self.train_value is None or self.test_value is None:
                raise ValueError( (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.CatBoostModel:[61:74]
==autodeep.modelsdefinition.XGBoostTrainer:[58:86]
        self.logger.info("Loading model")
        self.logger.debug("Model loaded successfully")
        self.model = self.best_model

    def save_model(self, model_dir, model_name):
        """Load a trained model from a given path"""
        self.logger.info(f"Saving model to {model_dir+model_name}")
        self.model.save_model(model_dir + model_name)
        self.logger.debug("Model saved successfully")

    def predict(self, X_test, predict_proba=False):
        """
        Method to generate predictions on test data using the XGBoost model.

        Parameters
        ----------
        X_test : ndarray
            Test data input.

        Returns
        -------
        ndarray
            Array of model predictions.
        """
        self.logger.info("Computing predictions")
        # Create a DMatrix from the test data

        # Generate predictions using the XGBoost model (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.ResNetModel:[608:619]
==autodeep.modelsdefinition.XGBoostTrainer:[240:249]
        self.best_model = best_trial["result"]["trained_model"]
        self._load_best_model()

        self.logger.info(f"Best hyperparameters: {best_params}")
        self.logger.info(
            f"The best possible score for metric {metric} is {-threshold}, we reached {metric} = {best_score}"
        )

        return best_params, best_score, train_metrics, validation_metrics

    def predict(self, X_test, predict_proba=False, batch_size=4096): (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.dataloaders.dataloader:[50:58]
==autodeep.modelsdefinition.IGTD:[43:70]
        self.logger = logging.getLogger(self.__class__.__name__)
        if not self.logger.handlers:
            ch = logging.StreamHandler()
            ch.setLevel(logging.INFO)
            formatter = logging.Formatter("%(asctime)s - %(levelname)s - %(message)s")
            ch.setFormatter(formatter)
            self.logger.addHandler(ch)

    def run(
        self, X: pd.DataFrame, base_result_dir: str, ordering_configs: Dict[str, Dict]
    ) -> Dict[str, str]:
        """
        Run the IGTD algorithm on the provided DataFrame for each ordering configuration.

        Args:
            X (pd.DataFrame): The training data (features only) on which to run IGTD.
            base_result_dir (str): The base directory where IGTD results will be saved.
            ordering_configs (Dict[str, Dict]): A dictionary mapping configuration names to
                their parameters. Each configuration dict should contain:
                  - "fea_dist_method": (str) method for feature distance calculation.
                  - "image_dist_method": (str) method for pixel distance calculation.
                  - "error": (str) error function (e.g., "abs", "squared").

        Returns:
            Dict[str, str]: A mapping from configuration name to the folder where the IGTD
            result was saved.
        """ (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.CommonStructure:[386:393]
==autodeep.modelsdefinition.MLP:[243:250]
            return {
                "loss": score,
                "params": params,
                "status": STATUS_OK,
                "trained_model": model,
                "train_metrics": metrics_for_split_train,
                "validation_metrics": metrics_for_split_val, (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.MLP:[103:149]
==autodeep.modelsdefinition.XGBoostTrainer:[92:134]
        self.logger.debug("Computed predictions successfully")

        if predict_proba:
            return predictions, probabilities
        else:
            return predictions

    def hyperopt_search(
        self,
        X,
        y,
        model_config,
        metric,
        eval_metrics,
        max_evals=16,
        extra_info=None,
    ):
        """
        Method to perform hyperparameter search on the XGBoost model using Hyperopt.

        Parameters
        ----------
        X : ndarray
            Data input.
        y : ndarray
            Data labels.
        max_evals : int, optional
            Maximum number of evaluations to perform during the search (default is 100).
        random_state : int, optional
            Random state to use for the search (default is 42).
        val_size : float, optional
            Proportion of the data to use for validation (default is 0.2).

        Returns
        -------
        tuple
            Tuple containing the best hyperparameters and the corresponding best score.
        """
        # Split the data into training and validation sets
        self.default_params = model_config["default_params"]
        val_size = self.default_params.get("val_size")
        # Set the number of boosting rounds (iterations) to default or use value from config (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.ResNetModel:[440:448]
==autodeep.modelsdefinition.SoftOrdering1DCNN:[446:455]
            X_train, X_val, y_train, y_val = train_test_split(
                X,
                y,
                test_size=val_size,
                random_state=42,
                stratify=y if self.problem_type != "regression" else None,
            )
 (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.ResNetModel:[228:246]
==autodeep.modelsdefinition.SoftOrdering1DCNN:[270:279]
            self.loss_fn = nn.CrossEntropyLoss(weight=class_weights, reduction="mean")
        elif self.problem_type == "regression":
            self.loss_fn = nn.MSELoss()
        else:
            raise ValueError(
                "Invalid problem_type. Supported values are 'binary', 'multiclass', and 'regression'."
            )

    def _pandas_to_torch_datasets(self, X_train, y_train, val_size, batch_size): (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.FTTransformerModel:[70:77]
==autodeep.modelsdefinition.GANDALF:[58:67]
        tabular_model = TabularModel(
            data_config=data_config,
            model_config=model_config,
            optimizer_config=optimizer_config,
            trainer_config=trainer_config,
        )
        return tabular_model (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==igtd_notebooks.preprocess_tabs_breastcancer:[19:28]
==igtd_notebooks.preprocess_tabs_heloc:[19:28]
    encode_categorical=True,
    return_extra_info=False,
    random_state=4200,
)
X_train, X_test, y_train, y_test, extra_info = data_loader.load_data()

exclude_cols = []

num_row = 6  # Number of pixel rows in image representation (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==igtd_notebooks.preprocess_tabs_diabetes:[16:23]
==igtd_notebooks.preprocess_tabs_housing:[16:23]
    dataset_name,
    test_size=0.2,
    normalize_features="mean_std",
    encode_categorical=True,
    return_extra_info=False,
    random_state=4200,
) (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.CatBoostModel:[124:131]
==autodeep.modelsdefinition.XGBoostTrainer:[131:140]
        self.default_params = model_config["default_params"]
        val_size = self.default_params.get("val_size")
        # Set the number of boosting rounds (iterations) to default or use value from config
        early_stopping_rounds = self.default_params.get("early_stopping_rounds", 100)
        verbose = self.default_params.get("verbose", False)
        param_grid = model_config["param_grid"]
        # Define the hyperparameter search space
        space = infer_hyperopt_space(param_grid)
 (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.ResNetModel:[570:577]
==autodeep.modelsdefinition.XGBoostTrainer:[200:208]
            if self.evaluator.maximize[metric][0]:
                score = -1 * score

            # Return the negative score (to minimize)
            return {
                "loss": score,
                "params": params,
                "status": STATUS_OK, (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.CommonStructure:[257:275]
==autodeep.modelsdefinition.MLP:[102:147]
        self.logger.debug(f"{predictions[:10]}")
        self.logger.debug("Computed predictions successfully")
        if predict_proba:
            return predictions, probabilities
        else:
            return predictions

    def hyperopt_search(
        self,
        X,
        y,
        model_config,
        metric,
        eval_metrics,
        max_evals=16,
        extra_info=None,
    ):
        """
        Perform hyperopt search on the MLP model using train-test split.

        Parameters
        ----------
        X : ndarray
            Input data for training/testing.
        y : ndarray
            Labels for input data.
        model_config : dict
            Contains default parameters and parameter grid.
        metric : str
            The main metric to optimize.
        eval_metrics : list
            Other evaluation metrics to track.
        val_size : float, optional
            Proportion of data used for testing (default: 0.2).
        max_evals : int, optional
            Maximum number of evaluations for hyperopt (default: 16).
        problem_type : str, optional
            Type of ML problem: 'binary_classification', 'multiclass_classification', or 'regression' (default: 'binary_classification').

        Returns
        -------
        dict
            Best hyperparameters, best score, standard deviation of scores, and full metric results.
        """
 (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.MLP:[77:102]
==autodeep.modelsdefinition.XGBoostTrainer:[66:92]
        self.logger.debug("Model saved successfully")

    def predict(self, X_test, predict_proba=False):
        """
        Method to generate predictions on test data using the XGBoost model.

        Parameters
        ----------
        X_test : ndarray
            Test data input.

        Returns
        -------
        ndarray
            Array of model predictions.
        """
        self.logger.info("Computing predictions")
        # Create a DMatrix from the test data

        # Generate predictions using the XGBoost model
        predictions = self.model.predict(X_test)

        probabilities = None
        if predict_proba:
            probabilities = np.array(self.model.predict_proba(X_test))[:, 1]
 (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.ResNetModel:[676:692]
==autodeep.modelsdefinition.SoftOrdering1DCNN:[650:659]
        if predict_proba:
            return predictions, probabilities
        else:
            return predictions


class CustomDataset(Dataset):
    def __init__(
        self,
        data,
        img_rows,
        img_columns,
        transform=None,
        labels=None,
    ):
        self.data = data (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.MLP:[200:208]
==autodeep.modelsdefinition.SoftOrdering1DCNN:[447:455]
                X,
                y,
                test_size=val_size,
                random_state=42,
                stratify=y if self.problem_type != "regression" else None,
            )

            # Train the model (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==igtd_notebooks.preprocess_tabs_breastcancer:[19:27]
==igtd_notebooks.preprocess_tabs_housing:[19:27]
    encode_categorical=True,
    return_extra_info=False,
    random_state=4200,
)
X_train, X_test, y_train, y_test, extra_info = data_loader.load_data()

exclude_cols = []
 (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.CatBoostModel:[23:29]
==autodeep.modelsdefinition.XGBoostTrainer:[21:28]
        self.logger = logging.getLogger(__name__)
        self.logger.setLevel(logging.DEBUG)
        self.random_state = 4200
        # Get the filename of the current Python script
        self.script_filename = os.path.basename(__file__)
        self.problem_type = problem_type
 (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.CommonStructure:[258:275]
==autodeep.modelsdefinition.XGBoostTrainer:[92:131]
        self.logger.debug("Computed predictions successfully")

        if predict_proba:
            return predictions, probabilities
        else:
            return predictions

    def hyperopt_search(
        self,
        X,
        y,
        model_config,
        metric,
        eval_metrics,
        max_evals=16,
        extra_info=None,
    ): (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.dataloaders.dataloader:[468:474]
==autodeep.modelsdefinition.IGTD:[390:397]
        self.test_size = test_size
        self.random_state = random_state
        self.normalize_features = normalize_features
        self.return_extra_info = return_extra_info
        self.encode_categorical = encode_categorical

        # IGTD related parameters (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.dataloaders.dataloader:[362:368]
==autodeep.modelsdefinition.IGTD:[136:143]
        self.test_size = test_size
        self.random_state = random_state
        self.normalize_features = normalize_features
        self.return_extra_info = return_extra_info
        self.encode_categorical = encode_categorical

        # IGTD related parameters (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.dataloaders.dataloader:[119:124]
==autodeep.modelsdefinition.IGTD:[81:86]
            table_to_image(
                X,
                [self.img_rows, self.img_columns],
                config["fea_dist_method"],
                config["image_dist_method"], (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.CatBoostModel:[81:120]
==autodeep.modelsdefinition.MLP:[103:147]
        self.logger.debug("Computed predictions successfully")

        if predict_proba:
            return predictions, probabilities
        else:
            return predictions

    def hyperopt_search(
        self,
        X,
        y,
        model_config,
        metric,
        eval_metrics,
        max_evals=16,
        extra_info=None,
    ):
        """
        Method to perform hyperparameter search on the CatBoost model using Hyperopt.

        Parameters
        ----------
        X : ndarray
            Data input.
        y : ndarray
            Data labels.
        max_evals : int, optional
            Maximum number of evaluations to perform during the search (default is 100).
        random_state : int, optional
            Random state to use for the search (default is 42).
        val_size : float, optional
            Proportion of the data to use for validation (default is 0.2).

        Returns
        -------
        tuple
            Tuple containing the best hyperparameters and the corresponding best score.
        """
        # Split the data into training and validation sets (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.CatBoostModel:[57:68]
==autodeep.modelsdefinition.MLP:[65:76]
        self.num_workers = max(1, num_cpu_cores)

    def _load_best_model(self):
        """Load a trained model from a given path"""
        self.logger.info("Loading model")
        self.logger.debug("Model loaded successfully")
        self.model = self.best_model

    def save_model(self, model_dir, model_name):
        """Save the trained model to a given path"""
        self.logger.info(f"Saving model to {model_dir+model_name}") (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.MLP:[218:226]
==autodeep.modelsdefinition.XGBoostTrainer:[180:185]
            self.evaluator.y_pred = y_pred
            self.evaluator.y_prob = probabilities
            self.evaluator.run_metrics = eval_metrics

            metrics_for_split_val = self.evaluator.evaluate_model()

            # Extract main metric for optimization
            score = metrics_for_split_val[metric] (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.CommonStructure:[161:166]
==autodeep.modelsdefinition.SoftOrdering1DCNN:[270:275]
            self.loss_fn = nn.CrossEntropyLoss(weight=class_weights, reduction="mean")
        elif self.problem_type == "regression":
            self.loss_fn = nn.MSELoss()
        else:
            raise ValueError( (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.ResNetModel:[524:532]
==autodeep.modelsdefinition.SoftOrdering1DCNN:[529:539]
                            break

                    pbar.update(1)

            # Load the best model state dict
            if best_model_state_dict is not None:
                self.model.load_state_dict(best_model_state_dict)
                print(f"Best model loaded from epoch {best_epoch+1}")

            # Evaluate on validation set (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.ResNetModel:[476:484]
==autodeep.modelsdefinition.SoftOrdering1DCNN:[481:489]
                batch_size=bs,
                shuffle=False,
                drop_last=False,
                num_workers=self.num_workers,
                pin_memory=True,
            )

            self.model = self.build_model( (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.ResNetModel:[467:475]
==autodeep.modelsdefinition.SoftOrdering1DCNN:[473:480]
                batch_size=bs,
                shuffle=True,
                drop_last=False,
                num_workers=self.num_workers,
                pin_memory=True,
            )
            val_loader = torch.utils.data.DataLoader( (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.ResNetModel:[460:466]
==autodeep.modelsdefinition.SoftOrdering1DCNN:[466:472]
            if X_train.shape[0] % params["batch_size"] == 1:
                bs = params["batch_size"] + 1
            else:
                bs = params["batch_size"]

            train_loader = torch.utils.data.DataLoader( (duplicate-code)
dataloaders/dataloader.py:1:0: R0801: Similar lines in 2 files
==autodeep.modelsdefinition.ResNetModel:[254:261]
==autodeep.modelsdefinition.SoftOrdering1DCNN:[287:293]
        num_samples = len(dataset)

        num_train_samples = int((1 - val_size) * num_samples)
        if num_train_samples % batch_size == 1:
            num_train_samples += 1
        num_val_samples = num_samples - num_train_samples
 (duplicate-code)

------------------------------------------------------------------
Your code has been rated at 5.37/10 (previous run: 5.37/10, +0.00)

